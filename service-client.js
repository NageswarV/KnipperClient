/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
import { __decorate, __extends, __metadata, __param, __values } from "tslib";
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
export var API_BASE_URL = new InjectionToken('API_BASE_URL');
var ServiceClient = /** @class */ (function () {
    function ServiceClient(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }
    /**
     * @return Success
     */
    ServiceClient.prototype.getctiveAnnouncements = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Announcement/GetctiveAnnouncements";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetctiveAnnouncements(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetctiveAnnouncements(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetctiveAnnouncements = function (response) {
        var e_1, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_2, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_1 = __values(resultData200), resultData200_1_1 = resultData200_1.next(); !resultData200_1_1.done; resultData200_1_1 = resultData200_1.next()) {
                            var item = resultData200_1_1.value;
                            result200.push(Announcement.fromJS(item));
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (resultData200_1_1 && !resultData200_1_1.done && (_a = resultData200_1.return)) _a.call(resultData200_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getClassificationValues = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Classification/GetClassificationValues";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetClassificationValues(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetClassificationValues(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetClassificationValues = function (response) {
        var e_3, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_4, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_2 = __values(resultData200), resultData200_2_1 = resultData200_2.next(); !resultData200_2_1.done; resultData200_2_1 = resultData200_2.next()) {
                            var item = resultData200_2_1.value;
                            result200.push(ClassificationValue.fromJS(item));
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (resultData200_2_1 && !resultData200_2_1.done && (_a = resultData200_2.return)) _a.call(resultData200_2);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getClassificationTypes = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Classification/GetClassificationTypes";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetClassificationTypes(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetClassificationTypes(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetClassificationTypes = function (response) {
        var e_5, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_6, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_3 = __values(resultData200), resultData200_3_1 = resultData200_3.next(); !resultData200_3_1.done; resultData200_3_1 = resultData200_3.next()) {
                            var item = resultData200_3_1.value;
                            result200.push(ClassificationType.fromJS(item));
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (resultData200_3_1 && !resultData200_3_1.done && (_a = resultData200_3.return)) _a.call(resultData200_3);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param classificationTypeId (optional)
     * @return Success
     */
    ServiceClient.prototype.getClassificationValuesByType = function (classificationTypeId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Classification/GetClassificationValuesByType?";
        if (classificationTypeId === null)
            throw new Error("The parameter 'classificationTypeId' cannot be null.");
        else if (classificationTypeId !== undefined)
            url_ += "classificationTypeId=" + encodeURIComponent("" + classificationTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetClassificationValuesByType(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetClassificationValuesByType(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetClassificationValuesByType = function (response) {
        var e_7, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_8, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_4 = __values(resultData200), resultData200_4_1 = resultData200_4.next(); !resultData200_4_1.done; resultData200_4_1 = resultData200_4.next()) {
                            var item = resultData200_4_1.value;
                            result200.push(ClassificationValue.fromJS(item));
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (resultData200_4_1 && !resultData200_4_1.done && (_a = resultData200_4.return)) _a.call(resultData200_4);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param classificationTypeCode (optional)
     * @return Success
     */
    ServiceClient.prototype.getClassificationValuesByTypeCode = function (classificationTypeCode) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Classification/GetClassificationValuesByTypeCode?";
        if (classificationTypeCode !== undefined && classificationTypeCode !== null)
            url_ += "classificationTypeCode=" + encodeURIComponent("" + classificationTypeCode) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetClassificationValuesByTypeCode(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetClassificationValuesByTypeCode(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetClassificationValuesByTypeCode = function (response) {
        var e_9, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_10, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_5 = __values(resultData200), resultData200_5_1 = resultData200_5.next(); !resultData200_5_1.done; resultData200_5_1 = resultData200_5.next()) {
                            var item = resultData200_5_1.value;
                            result200.push(ClassificationValue.fromJS(item));
                        }
                    }
                    catch (e_10_1) { e_10 = { error: e_10_1 }; }
                    finally {
                        try {
                            if (resultData200_5_1 && !resultData200_5_1.done && (_a = resultData200_5.return)) _a.call(resultData200_5);
                        }
                        finally { if (e_10) throw e_10.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getCountries = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Country/GetCountries";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetCountries(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetCountries(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetCountries = function (response) {
        var e_11, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_12, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_6 = __values(resultData200), resultData200_6_1 = resultData200_6.next(); !resultData200_6_1.done; resultData200_6_1 = resultData200_6.next()) {
                            var item = resultData200_6_1.value;
                            result200.push(Country.fromJS(item));
                        }
                    }
                    catch (e_12_1) { e_12 = { error: e_12_1 }; }
                    finally {
                        try {
                            if (resultData200_6_1 && !resultData200_6_1.done && (_a = resultData200_6.return)) _a.call(resultData200_6);
                        }
                        finally { if (e_12) throw e_12.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getWeeklyOrderVolumeTrends = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Dashboard/GetWeeklyOrderVolumeTrends";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetWeeklyOrderVolumeTrends(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetWeeklyOrderVolumeTrends(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetWeeklyOrderVolumeTrends = function (response) {
        var e_13, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_13_1) { e_13 = { error: e_13_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_13) throw e_13.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = ChartDataResponseDto.fromJS(resultData200);
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.get14DayOrderEventsTrends = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Dashboard/Get14DayOrderEventsTrends";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGet14DayOrderEventsTrends(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGet14DayOrderEventsTrends(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGet14DayOrderEventsTrends = function (response) {
        var e_14, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_14_1) { e_14 = { error: e_14_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_14) throw e_14.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_15, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_7 = __values(resultData200), resultData200_7_1 = resultData200_7.next(); !resultData200_7_1.done; resultData200_7_1 = resultData200_7.next()) {
                            var item = resultData200_7_1.value;
                            result200.push(ChartDataResponseDto.fromJS(item));
                        }
                    }
                    catch (e_15_1) { e_15 = { error: e_15_1 }; }
                    finally {
                        try {
                            if (resultData200_7_1 && !resultData200_7_1.done && (_a = resultData200_7.return)) _a.call(resultData200_7);
                        }
                        finally { if (e_15) throw e_15.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getWeeklyCommunicationsVolumeTrends = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Dashboard/GetWeeklyCommunicationsVolumeTrends";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetWeeklyCommunicationsVolumeTrends(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetWeeklyCommunicationsVolumeTrends(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetWeeklyCommunicationsVolumeTrends = function (response) {
        var e_16, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_16_1) { e_16 = { error: e_16_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_16) throw e_16.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_17, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_8 = __values(resultData200), resultData200_8_1 = resultData200_8.next(); !resultData200_8_1.done; resultData200_8_1 = resultData200_8.next()) {
                            var item = resultData200_8_1.value;
                            result200.push(ChartDataResponseDto.fromJS(item));
                        }
                    }
                    catch (e_17_1) { e_17 = { error: e_17_1 }; }
                    finally {
                        try {
                            if (resultData200_8_1 && !resultData200_8_1.done && (_a = resultData200_8.return)) _a.call(resultData200_8);
                        }
                        finally { if (e_17) throw e_17.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getMonthlySVLVolumeTrends = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Dashboard/GetMonthlySVLVolumeTrends";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetMonthlySVLVolumeTrends(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetMonthlySVLVolumeTrends(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetMonthlySVLVolumeTrends = function (response) {
        var e_18, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_18_1) { e_18 = { error: e_18_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_18) throw e_18.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_19, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_9 = __values(resultData200), resultData200_9_1 = resultData200_9.next(); !resultData200_9_1.done; resultData200_9_1 = resultData200_9.next()) {
                            var item = resultData200_9_1.value;
                            result200.push(ChartDataResponseDto.fromJS(item));
                        }
                    }
                    catch (e_19_1) { e_19 = { error: e_19_1 }; }
                    finally {
                        try {
                            if (resultData200_9_1 && !resultData200_9_1.done && (_a = resultData200_9.return)) _a.call(resultData200_9);
                        }
                        finally { if (e_19) throw e_19.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getWeeklyAODTracking = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Dashboard/GetWeeklyAODTracking";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetWeeklyAODTracking(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetWeeklyAODTracking(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetWeeklyAODTracking = function (response) {
        var e_20, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_20_1) { e_20 = { error: e_20_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_20) throw e_20.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = ChartDataResponseDto.fromJS(resultData200);
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getHandCarryMetrics = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Dashboard/GetHandCarryMetrics";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetHandCarryMetrics(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetHandCarryMetrics(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetHandCarryMetrics = function (response) {
        var e_21, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_21_1) { e_21 = { error: e_21_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_21) throw e_21.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_22, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_10 = __values(resultData200), resultData200_10_1 = resultData200_10.next(); !resultData200_10_1.done; resultData200_10_1 = resultData200_10.next()) {
                            var item = resultData200_10_1.value;
                            result200.push(ChartDataResponseDto.fromJS(item));
                        }
                    }
                    catch (e_22_1) { e_22 = { error: e_22_1 }; }
                    finally {
                        try {
                            if (resultData200_10_1 && !resultData200_10_1.done && (_a = resultData200_10.return)) _a.call(resultData200_10);
                        }
                        finally { if (e_22) throw e_22.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param periodType (optional)
     * @param startDate (optional)
     * @return Success
     */
    ServiceClient.prototype.getOrderMetrics = function (periodType, startDate) {
        var _this = this;
        var url_ = this.baseUrl + "/api/DtpOrder/GetOrderMetrics?";
        if (periodType !== undefined && periodType !== null)
            url_ += "PeriodType=" + encodeURIComponent("" + periodType) + "&";
        if (startDate !== undefined && startDate !== null)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetOrderMetrics(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetOrderMetrics(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetOrderMetrics = function (response) {
        var e_23, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_23_1) { e_23 = { error: e_23_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_23) throw e_23.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = OrderMetricsDto.fromJS(resultData200);
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param orderId (optional)
     * @return Success
     */
    ServiceClient.prototype.getDtrOrderDetail = function (orderId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/DtrOrder/GetDtrOrderDetail?";
        if (orderId !== undefined && orderId !== null)
            url_ += "OrderId=" + encodeURIComponent("" + orderId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetDtrOrderDetail(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetDtrOrderDetail(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetDtrOrderDetail = function (response) {
        var e_24, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_24_1) { e_24 = { error: e_24_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_24) throw e_24.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = DtrOrderDto.fromJS(resultData200);
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param periodType (optional)
     * @param startDate (optional)
     * @return Success
     */
    ServiceClient.prototype.getOrderMetrics2 = function (periodType, startDate) {
        var _this = this;
        var url_ = this.baseUrl + "/api/HandCarryOrder/GetOrderMetrics?";
        if (periodType !== undefined && periodType !== null)
            url_ += "PeriodType=" + encodeURIComponent("" + periodType) + "&";
        if (startDate !== undefined && startDate !== null)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetOrderMetrics2(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetOrderMetrics2(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetOrderMetrics2 = function (response) {
        var e_25, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_25_1) { e_25 = { error: e_25_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_25) throw e_25.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = OrderMetricsDto.fromJS(resultData200);
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getHcpsIncludingDtpOrders = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Hcp/GetHcpsIncludingDtpOrders";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetHcpsIncludingDtpOrders(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetHcpsIncludingDtpOrders(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetHcpsIncludingDtpOrders = function (response) {
        var e_26, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_26_1) { e_26 = { error: e_26_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_26) throw e_26.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_27, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_11 = __values(resultData200), resultData200_11_1 = resultData200_11.next(); !resultData200_11_1.done; resultData200_11_1 = resultData200_11.next()) {
                            var item = resultData200_11_1.value;
                            result200.push(Hcp.fromJS(item));
                        }
                    }
                    catch (e_27_1) { e_27 = { error: e_27_1 }; }
                    finally {
                        try {
                            if (resultData200_11_1 && !resultData200_11_1.done && (_a = resultData200_11.return)) _a.call(resultData200_11);
                        }
                        finally { if (e_27) throw e_27.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param hcpId (optional)
     * @return Success
     */
    ServiceClient.prototype.getDtrOrdersByHcpId = function (hcpId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Hcp/GetDtrOrdersByHcpId?";
        if (hcpId !== undefined && hcpId !== null)
            url_ += "HcpId=" + encodeURIComponent("" + hcpId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetDtrOrdersByHcpId(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetDtrOrdersByHcpId(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetDtrOrdersByHcpId = function (response) {
        var e_28, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_28_1) { e_28 = { error: e_28_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_28) throw e_28.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_29, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_12 = __values(resultData200), resultData200_12_1 = resultData200_12.next(); !resultData200_12_1.done; resultData200_12_1 = resultData200_12.next()) {
                            var item = resultData200_12_1.value;
                            result200.push(DtrOrder.fromJS(item));
                        }
                    }
                    catch (e_29_1) { e_29 = { error: e_29_1 }; }
                    finally {
                        try {
                            if (resultData200_12_1 && !resultData200_12_1.done && (_a = resultData200_12.return)) _a.call(resultData200_12);
                        }
                        finally { if (e_29) throw e_29.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param orderId (optional)
     * @return Success
     */
    ServiceClient.prototype.getCommunicationsyOrderId = function (orderId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Hcp/GetCommunicationsyOrderId?";
        if (orderId !== undefined && orderId !== null)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetCommunicationsyOrderId(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetCommunicationsyOrderId(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetCommunicationsyOrderId = function (response) {
        var e_30, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_30_1) { e_30 = { error: e_30_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_30) throw e_30.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_31, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_13 = __values(resultData200), resultData200_13_1 = resultData200_13.next(); !resultData200_13_1.done; resultData200_13_1 = resultData200_13.next()) {
                            var item = resultData200_13_1.value;
                            result200.push(Communication.fromJS(item));
                        }
                    }
                    catch (e_31_1) { e_31 = { error: e_31_1 }; }
                    finally {
                        try {
                            if (resultData200_13_1 && !resultData200_13_1.done && (_a = resultData200_13.return)) _a.call(resultData200_13);
                        }
                        finally { if (e_31) throw e_31.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.health = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Health";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processHealth(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processHealth(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processHealth = function (response) {
        var e_32, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_32_1) { e_32 = { error: e_32_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_32) throw e_32.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = HealthDto.fromJS(resultData200);
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getProductsByInventory = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Product/GetProductsByInventory";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetProductsByInventory(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetProductsByInventory(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetProductsByInventory = function (response) {
        var e_33, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_33_1) { e_33 = { error: e_33_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_33) throw e_33.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_34, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_14 = __values(resultData200), resultData200_14_1 = resultData200_14.next(); !resultData200_14_1.done; resultData200_14_1 = resultData200_14.next()) {
                            var item = resultData200_14_1.value;
                            result200.push(Product.fromJS(item));
                        }
                    }
                    catch (e_34_1) { e_34 = { error: e_34_1 }; }
                    finally {
                        try {
                            if (resultData200_14_1 && !resultData200_14_1.done && (_a = resultData200_14.return)) _a.call(resultData200_14);
                        }
                        finally { if (e_34) throw e_34.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getProductsIncludingDtpOrders = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Product/GetProductsIncludingDtpOrders";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetProductsIncludingDtpOrders(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetProductsIncludingDtpOrders(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetProductsIncludingDtpOrders = function (response) {
        var e_35, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_35_1) { e_35 = { error: e_35_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_35) throw e_35.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_36, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_15 = __values(resultData200), resultData200_15_1 = resultData200_15.next(); !resultData200_15_1.done; resultData200_15_1 = resultData200_15.next()) {
                            var item = resultData200_15_1.value;
                            result200.push(Product.fromJS(item));
                        }
                    }
                    catch (e_36_1) { e_36 = { error: e_36_1 }; }
                    finally {
                        try {
                            if (resultData200_15_1 && !resultData200_15_1.done && (_a = resultData200_15.return)) _a.call(resultData200_15);
                        }
                        finally { if (e_36) throw e_36.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param productId (optional)
     * @return Success
     */
    ServiceClient.prototype.getRelatedDtrOrdersByProductId = function (productId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Product/GetRelatedDtrOrdersByProductId?";
        if (productId !== undefined && productId !== null)
            url_ += "ProductId=" + encodeURIComponent("" + productId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetRelatedDtrOrdersByProductId(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetRelatedDtrOrdersByProductId(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetRelatedDtrOrdersByProductId = function (response) {
        var e_37, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_37_1) { e_37 = { error: e_37_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_37) throw e_37.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_38, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_16 = __values(resultData200), resultData200_16_1 = resultData200_16.next(); !resultData200_16_1.done; resultData200_16_1 = resultData200_16.next()) {
                            var item = resultData200_16_1.value;
                            result200.push(DtrOrder.fromJS(item));
                        }
                    }
                    catch (e_38_1) { e_38 = { error: e_38_1 }; }
                    finally {
                        try {
                            if (resultData200_16_1 && !resultData200_16_1.done && (_a = resultData200_16.return)) _a.call(resultData200_16);
                        }
                        finally { if (e_38) throw e_38.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param culture (optional)
     * @return Success
     */
    ServiceClient.prototype.getDefaultProgram = function (culture) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Program/GetDefaultProgram?";
        if (culture !== undefined && culture !== null)
            url_ += "culture=" + encodeURIComponent("" + culture) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetDefaultProgram(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetDefaultProgram(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetDefaultProgram = function (response) {
        var e_39, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_39_1) { e_39 = { error: e_39_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_39) throw e_39.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = TenantInfoDto.fromJS(resultData200);
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getRepsIncludingPushShipments = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Rep/GetRepsIncludingPushShipments";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetRepsIncludingPushShipments(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetRepsIncludingPushShipments(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetRepsIncludingPushShipments = function (response) {
        var e_40, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_40_1) { e_40 = { error: e_40_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_40) throw e_40.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_41, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_17 = __values(resultData200), resultData200_17_1 = resultData200_17.next(); !resultData200_17_1.done; resultData200_17_1 = resultData200_17.next()) {
                            var item = resultData200_17_1.value;
                            result200.push(Rep.fromJS(item));
                        }
                    }
                    catch (e_41_1) { e_41 = { error: e_41_1 }; }
                    finally {
                        try {
                            if (resultData200_17_1 && !resultData200_17_1.done && (_a = resultData200_17.return)) _a.call(resultData200_17);
                        }
                        finally { if (e_41) throw e_41.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getRepsIncludingDtpOrders = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Rep/GetRepsIncludingDtpOrders";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetRepsIncludingDtpOrders(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetRepsIncludingDtpOrders(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetRepsIncludingDtpOrders = function (response) {
        var e_42, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_42_1) { e_42 = { error: e_42_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_42) throw e_42.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_43, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_18 = __values(resultData200), resultData200_18_1 = resultData200_18.next(); !resultData200_18_1.done; resultData200_18_1 = resultData200_18.next()) {
                            var item = resultData200_18_1.value;
                            result200.push(Rep.fromJS(item));
                        }
                    }
                    catch (e_43_1) { e_43 = { error: e_43_1 }; }
                    finally {
                        try {
                            if (resultData200_18_1 && !resultData200_18_1.done && (_a = resultData200_18.return)) _a.call(resultData200_18);
                        }
                        finally { if (e_43) throw e_43.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param repId (optional)
     * @return Success
     */
    ServiceClient.prototype.getDtrOrdersByRepId = function (repId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Rep/GetDtrOrdersByRepId?";
        if (repId !== undefined && repId !== null)
            url_ += "RepId=" + encodeURIComponent("" + repId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetDtrOrdersByRepId(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetDtrOrdersByRepId(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetDtrOrdersByRepId = function (response) {
        var e_44, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_44_1) { e_44 = { error: e_44_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_44) throw e_44.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_45, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_19 = __values(resultData200), resultData200_19_1 = resultData200_19.next(); !resultData200_19_1.done; resultData200_19_1 = resultData200_19.next()) {
                            var item = resultData200_19_1.value;
                            result200.push(DtrOrder.fromJS(item));
                        }
                    }
                    catch (e_45_1) { e_45 = { error: e_45_1 }; }
                    finally {
                        try {
                            if (resultData200_19_1 && !resultData200_19_1.done && (_a = resultData200_19.return)) _a.call(resultData200_19);
                        }
                        finally { if (e_45) throw e_45.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param repId (optional)
     * @return Success
     */
    ServiceClient.prototype.getRepTerritoryHistory = function (repId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Rep/GetRepTerritoryHistory?";
        if (repId !== undefined && repId !== null)
            url_ += "RepId=" + encodeURIComponent("" + repId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetRepTerritoryHistory(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetRepTerritoryHistory(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetRepTerritoryHistory = function (response) {
        var e_46, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_46_1) { e_46 = { error: e_46_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_46) throw e_46.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_47, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_20 = __values(resultData200), resultData200_20_1 = resultData200_20.next(); !resultData200_20_1.done; resultData200_20_1 = resultData200_20.next()) {
                            var item = resultData200_20_1.value;
                            result200.push(RepTerritory.fromJS(item));
                        }
                    }
                    catch (e_47_1) { e_47 = { error: e_47_1 }; }
                    finally {
                        try {
                            if (resultData200_20_1 && !resultData200_20_1.done && (_a = resultData200_20.return)) _a.call(resultData200_20);
                        }
                        finally { if (e_47) throw e_47.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getReportDefinitions = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Report/GetReportDefinitions";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetReportDefinitions(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetReportDefinitions(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetReportDefinitions = function (response) {
        var e_48, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_48_1) { e_48 = { error: e_48_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_48) throw e_48.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_49, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_21 = __values(resultData200), resultData200_21_1 = resultData200_21.next(); !resultData200_21_1.done; resultData200_21_1 = resultData200_21.next()) {
                            var item = resultData200_21_1.value;
                            result200.push(ReportDefinition.fromJS(item));
                        }
                    }
                    catch (e_49_1) { e_49 = { error: e_49_1 }; }
                    finally {
                        try {
                            if (resultData200_21_1 && !resultData200_21_1.done && (_a = resultData200_21.return)) _a.call(resultData200_21);
                        }
                        finally { if (e_49) throw e_49.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getGeneratedReports = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Report/GetGeneratedReports";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetGeneratedReports(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetGeneratedReports(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetGeneratedReports = function (response) {
        var e_50, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_50_1) { e_50 = { error: e_50_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_50) throw e_50.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_51, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_22 = __values(resultData200), resultData200_22_1 = resultData200_22.next(); !resultData200_22_1.done; resultData200_22_1 = resultData200_22.next()) {
                            var item = resultData200_22_1.value;
                            result200.push(Report.fromJS(item));
                        }
                    }
                    catch (e_51_1) { e_51 = { error: e_51_1 }; }
                    finally {
                        try {
                            if (resultData200_22_1 && !resultData200_22_1.done && (_a = resultData200_22.return)) _a.call(resultData200_22);
                        }
                        finally { if (e_51) throw e_51.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @return Success
     */
    ServiceClient.prototype.getStates = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/State/GetStates";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("get", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processGetStates(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetStates(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processGetStates = function (response) {
        var e_52, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_52_1) { e_52 = { error: e_52_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_52) throw e_52.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var e_53, _a;
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    try {
                        for (var resultData200_23 = __values(resultData200), resultData200_23_1 = resultData200_23.next(); !resultData200_23_1.done; resultData200_23_1 = resultData200_23.next()) {
                            var item = resultData200_23_1.value;
                            result200.push(State.fromJS(item));
                        }
                    }
                    catch (e_53_1) { e_53 = { error: e_53_1 }; }
                    finally {
                        try {
                            if (resultData200_23_1 && !resultData200_23_1.done && (_a = resultData200_23.return)) _a.call(resultData200_23);
                        }
                        finally { if (e_53) throw e_53.error; }
                    }
                }
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    /**
     * @param email (optional)
     * @param passsword (optional)
     * @return Success
     */
    ServiceClient.prototype.signIn = function (email, passsword) {
        var _this = this;
        var url_ = this.baseUrl + "/api/User/SignIn?";
        if (email !== undefined && email !== null)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (passsword !== undefined && passsword !== null)
            url_ += "passsword=" + encodeURIComponent("" + passsword) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };
        return this.http.request("post", url_, options_).pipe(_observableMergeMap(function (response_) {
            return _this.processSignIn(response_);
        })).pipe(_observableCatch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processSignIn(response_);
                }
                catch (e) {
                    return _observableThrow(e);
                }
            }
            else
                return _observableThrow(response_);
        }));
    };
    ServiceClient.prototype.processSignIn = function (response) {
        var e_54, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_54_1) { e_54 = { error: e_54_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_54) throw e_54.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = User.fromJS(resultData200);
                return _observableOf(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null);
    };
    ServiceClient = __decorate([
        Injectable(),
        __param(0, Inject(HttpClient)), __param(1, Optional()), __param(1, Inject(API_BASE_URL)),
        __metadata("design:paramtypes", [HttpClient, String])
    ], ServiceClient);
    return ServiceClient;
}());
export { ServiceClient };
var Announcement = /** @class */ (function () {
    function Announcement(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Announcement.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.attachmentLink = _data["attachmentLink"];
            this.publishedOn = _data["publishedOn"] ? new Date(_data["publishedOn"].toString()) : undefined;
            this.isActive = _data["isActive"];
        }
    };
    Announcement.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Announcement();
        result.init(data);
        return result;
    };
    Announcement.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["title"] = this.title;
        data["description"] = this.description;
        data["attachmentLink"] = this.attachmentLink;
        data["publishedOn"] = this.publishedOn ? this.publishedOn.toISOString() : undefined;
        data["isActive"] = this.isActive;
        return data;
    };
    Announcement.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Announcement();
        result.init(json);
        return result;
    };
    return Announcement;
}());
export { Announcement };
var ClassificationValue = /** @class */ (function () {
    function ClassificationValue(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ClassificationValue.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.classificationTypeId = _data["classificationTypeId"];
            this.classificationTypeCode = _data["classificationTypeCode"];
            this.classificationValueCode = _data["classificationValueCode"];
            this.classificationValueName = _data["classificationValueName"];
            this.readOnlyFlag = _data["readOnlyFlag"];
            this.commentsText = _data["commentsText"];
            this.priorityNbr = _data["priorityNbr"];
            this.isActive = _data["isActive"];
        }
    };
    ClassificationValue.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ClassificationValue();
        result.init(data);
        return result;
    };
    ClassificationValue.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["classificationTypeId"] = this.classificationTypeId;
        data["classificationTypeCode"] = this.classificationTypeCode;
        data["classificationValueCode"] = this.classificationValueCode;
        data["classificationValueName"] = this.classificationValueName;
        data["readOnlyFlag"] = this.readOnlyFlag;
        data["commentsText"] = this.commentsText;
        data["priorityNbr"] = this.priorityNbr;
        data["isActive"] = this.isActive;
        return data;
    };
    ClassificationValue.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ClassificationValue();
        result.init(json);
        return result;
    };
    return ClassificationValue;
}());
export { ClassificationValue };
var ClassificationType = /** @class */ (function () {
    function ClassificationType(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ClassificationType.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.classificationTypeCode = _data["classificationTypeCode"];
            this.classificationTypeName = _data["classificationTypeName"];
        }
    };
    ClassificationType.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ClassificationType();
        result.init(data);
        return result;
    };
    ClassificationType.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["classificationTypeCode"] = this.classificationTypeCode;
        data["classificationTypeName"] = this.classificationTypeName;
        return data;
    };
    ClassificationType.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ClassificationType();
        result.init(json);
        return result;
    };
    return ClassificationType;
}());
export { ClassificationType };
var Country = /** @class */ (function () {
    function Country(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Country.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.countryName = _data["countryName"];
        }
    };
    Country.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Country();
        result.init(data);
        return result;
    };
    Country.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["countryName"] = this.countryName;
        return data;
    };
    Country.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Country();
        result.init(json);
        return result;
    };
    return Country;
}());
export { Country };
var Dataset = /** @class */ (function () {
    function Dataset(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Dataset.prototype.init = function (_data) {
        var e_55, _a;
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [];
                try {
                    for (var _b = __values(_data["data"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.data.push(item);
                    }
                }
                catch (e_55_1) { e_55 = { error: e_55_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_55) throw e_55.error; }
                }
            }
            this.label = _data["label"];
        }
    };
    Dataset.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Dataset();
        result.init(data);
        return result;
    };
    Dataset.prototype.toJSON = function (data) {
        var e_56, _a;
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            try {
                for (var _b = __values(this.data), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["data"].push(item);
                }
            }
            catch (e_56_1) { e_56 = { error: e_56_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_56) throw e_56.error; }
            }
        }
        data["label"] = this.label;
        return data;
    };
    Dataset.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Dataset();
        result.init(json);
        return result;
    };
    return Dataset;
}());
export { Dataset };
var ChartDataDto = /** @class */ (function () {
    function ChartDataDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ChartDataDto.prototype.init = function (_data) {
        var e_57, _a, e_58, _b;
        if (_data) {
            if (Array.isArray(_data["labels"])) {
                this.labels = [];
                try {
                    for (var _c = __values(_data["labels"]), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var item = _d.value;
                        this.labels.push(item);
                    }
                }
                catch (e_57_1) { e_57 = { error: e_57_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_57) throw e_57.error; }
                }
            }
            if (Array.isArray(_data["datasets"])) {
                this.datasets = [];
                try {
                    for (var _e = __values(_data["datasets"]), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var item = _f.value;
                        this.datasets.push(Dataset.fromJS(item));
                    }
                }
                catch (e_58_1) { e_58 = { error: e_58_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_58) throw e_58.error; }
                }
            }
        }
    };
    ChartDataDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ChartDataDto();
        result.init(data);
        return result;
    };
    ChartDataDto.prototype.toJSON = function (data) {
        var e_59, _a, e_60, _b;
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.labels)) {
            data["labels"] = [];
            try {
                for (var _c = __values(this.labels), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var item = _d.value;
                    data["labels"].push(item);
                }
            }
            catch (e_59_1) { e_59 = { error: e_59_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_59) throw e_59.error; }
            }
        }
        if (Array.isArray(this.datasets)) {
            data["datasets"] = [];
            try {
                for (var _e = __values(this.datasets), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var item = _f.value;
                    data["datasets"].push(item.toJSON());
                }
            }
            catch (e_60_1) { e_60 = { error: e_60_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_60) throw e_60.error; }
            }
        }
        return data;
    };
    ChartDataDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ChartDataDto();
        result.init(json);
        return result;
    };
    return ChartDataDto;
}());
export { ChartDataDto };
var ChartDataResponseDto = /** @class */ (function () {
    function ChartDataResponseDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ChartDataResponseDto.prototype.init = function (_data) {
        if (_data) {
            this.data = _data["data"] ? ChartDataDto.fromJS(_data["data"]) : undefined;
        }
    };
    ChartDataResponseDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ChartDataResponseDto();
        result.init(data);
        return result;
    };
    ChartDataResponseDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : undefined;
        return data;
    };
    ChartDataResponseDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ChartDataResponseDto();
        result.init(json);
        return result;
    };
    return ChartDataResponseDto;
}());
export { ChartDataResponseDto };
var OrderMetricPeriod = /** @class */ (function () {
    function OrderMetricPeriod(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OrderMetricPeriod.prototype.init = function (_data) {
        if (_data) {
            this.quantity = _data["quantity"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined;
        }
    };
    OrderMetricPeriod.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new OrderMetricPeriod();
        result.init(data);
        return result;
    };
    OrderMetricPeriod.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["quantity"] = this.quantity;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
        return data;
    };
    OrderMetricPeriod.prototype.clone = function () {
        var json = this.toJSON();
        var result = new OrderMetricPeriod();
        result.init(json);
        return result;
    };
    return OrderMetricPeriod;
}());
export { OrderMetricPeriod };
var OrderMetric = /** @class */ (function () {
    function OrderMetric(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OrderMetric.prototype.init = function (_data) {
        if (_data) {
            this.orderStatus = _data["orderStatus"];
            this.currentPeriod = _data["currentPeriod"] ? OrderMetricPeriod.fromJS(_data["currentPeriod"]) : undefined;
            this.previousPeriod = _data["previousPeriod"] ? OrderMetricPeriod.fromJS(_data["previousPeriod"]) : undefined;
        }
    };
    OrderMetric.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new OrderMetric();
        result.init(data);
        return result;
    };
    OrderMetric.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["orderStatus"] = this.orderStatus;
        data["currentPeriod"] = this.currentPeriod ? this.currentPeriod.toJSON() : undefined;
        data["previousPeriod"] = this.previousPeriod ? this.previousPeriod.toJSON() : undefined;
        return data;
    };
    OrderMetric.prototype.clone = function () {
        var json = this.toJSON();
        var result = new OrderMetric();
        result.init(json);
        return result;
    };
    return OrderMetric;
}());
export { OrderMetric };
var OrderMetricsDto = /** @class */ (function () {
    function OrderMetricsDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OrderMetricsDto.prototype.init = function (_data) {
        var e_61, _a;
        if (_data) {
            this.periodType = _data["periodType"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : undefined;
            if (Array.isArray(_data["metrics"])) {
                this.metrics = [];
                try {
                    for (var _b = __values(_data["metrics"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.metrics.push(OrderMetric.fromJS(item));
                    }
                }
                catch (e_61_1) { e_61 = { error: e_61_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_61) throw e_61.error; }
                }
            }
        }
    };
    OrderMetricsDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new OrderMetricsDto();
        result.init(data);
        return result;
    };
    OrderMetricsDto.prototype.toJSON = function (data) {
        var e_62, _a;
        data = typeof data === 'object' ? data : {};
        data["periodType"] = this.periodType;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
        if (Array.isArray(this.metrics)) {
            data["metrics"] = [];
            try {
                for (var _b = __values(this.metrics), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["metrics"].push(item.toJSON());
                }
            }
            catch (e_62_1) { e_62 = { error: e_62_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_62) throw e_62.error; }
            }
        }
        return data;
    };
    OrderMetricsDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new OrderMetricsDto();
        result.init(json);
        return result;
    };
    return OrderMetricsDto;
}());
export { OrderMetricsDto };
var OrderLineItemDto = /** @class */ (function () {
    function OrderLineItemDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OrderLineItemDto.prototype.init = function (_data) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.productId = _data["productId"];
            this.status = _data["status"];
            this.orderQty = _data["orderQty"];
            this.productName = _data["productName"];
            this.productCode = _data["productCode"];
            this.productUom = _data["productUom"];
        }
    };
    OrderLineItemDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new OrderLineItemDto();
        result.init(data);
        return result;
    };
    OrderLineItemDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["productId"] = this.productId;
        data["status"] = this.status;
        data["orderQty"] = this.orderQty;
        data["productName"] = this.productName;
        data["productCode"] = this.productCode;
        data["productUom"] = this.productUom;
        return data;
    };
    OrderLineItemDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new OrderLineItemDto();
        result.init(json);
        return result;
    };
    return OrderLineItemDto;
}());
export { OrderLineItemDto };
var DtrOrderDto = /** @class */ (function () {
    function DtrOrderDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DtrOrderDto.prototype.init = function (_data) {
        var e_63, _a;
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.status = _data["status"];
            this.orderDate = _data["orderDate"];
            this.orderType = _data["orderType"];
            this.orderedByFirstName = _data["orderedByFirstName"];
            this.orderedByLastName = _data["orderedByLastName"];
            this.orderedByAddressLine1 = _data["orderedByAddressLine1"];
            this.orderedByAddressLine2 = _data["orderedByAddressLine2"];
            this.orderedByCity = _data["orderedByCity"];
            this.orderedByState = _data["orderedByState"];
            this.orderedByZipCode = _data["orderedByZipCode"];
            this.orderedByCountry = _data["orderedByCountry"];
            this.shipToFirstName = _data["shipToFirstName"];
            this.shipToLastName = _data["shipToLastName"];
            this.shipToAddressLine1 = _data["shipToAddressLine1"];
            this.shipToAddressLine2 = _data["shipToAddressLine2"];
            this.shipToCity = _data["shipToCity"];
            this.shipToState = _data["shipToState"];
            this.shipToZipCode = _data["shipToZipCode"];
            this.shipToCountry = _data["shipToCountry"];
            this.repId = _data["repId"];
            this.hcpId = _data["hcpId"];
            this.rushFlag = _data["rushFlag"];
            this.carrier = _data["carrier"];
            this.service = _data["service"];
            if (Array.isArray(_data["orderLineItems"])) {
                this.orderLineItems = [];
                try {
                    for (var _b = __values(_data["orderLineItems"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.orderLineItems.push(OrderLineItemDto.fromJS(item));
                    }
                }
                catch (e_63_1) { e_63 = { error: e_63_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_63) throw e_63.error; }
                }
            }
        }
    };
    DtrOrderDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DtrOrderDto();
        result.init(data);
        return result;
    };
    DtrOrderDto.prototype.toJSON = function (data) {
        var e_64, _a;
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["status"] = this.status;
        data["orderDate"] = this.orderDate;
        data["orderType"] = this.orderType;
        data["orderedByFirstName"] = this.orderedByFirstName;
        data["orderedByLastName"] = this.orderedByLastName;
        data["orderedByAddressLine1"] = this.orderedByAddressLine1;
        data["orderedByAddressLine2"] = this.orderedByAddressLine2;
        data["orderedByCity"] = this.orderedByCity;
        data["orderedByState"] = this.orderedByState;
        data["orderedByZipCode"] = this.orderedByZipCode;
        data["orderedByCountry"] = this.orderedByCountry;
        data["shipToFirstName"] = this.shipToFirstName;
        data["shipToLastName"] = this.shipToLastName;
        data["shipToAddressLine1"] = this.shipToAddressLine1;
        data["shipToAddressLine2"] = this.shipToAddressLine2;
        data["shipToCity"] = this.shipToCity;
        data["shipToState"] = this.shipToState;
        data["shipToZipCode"] = this.shipToZipCode;
        data["shipToCountry"] = this.shipToCountry;
        data["repId"] = this.repId;
        data["hcpId"] = this.hcpId;
        data["rushFlag"] = this.rushFlag;
        data["carrier"] = this.carrier;
        data["service"] = this.service;
        if (Array.isArray(this.orderLineItems)) {
            data["orderLineItems"] = [];
            try {
                for (var _b = __values(this.orderLineItems), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["orderLineItems"].push(item.toJSON());
                }
            }
            catch (e_64_1) { e_64 = { error: e_64_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_64) throw e_64.error; }
            }
        }
        return data;
    };
    DtrOrderDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new DtrOrderDto();
        result.init(json);
        return result;
    };
    return DtrOrderDto;
}());
export { DtrOrderDto };
var OrderLine = /** @class */ (function () {
    function OrderLine(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OrderLine.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.orderId = _data["orderId"];
            this.productId = _data["productId"];
            this.status = _data["status"];
            this.orderQty = _data["orderQty"];
            this.adjustedOrderQty = _data["adjustedOrderQty"];
            this.shippedQty = _data["shippedQty"];
            this.adjustedQuantity = _data["adjustedQuantity"];
            this.deliveredQty = _data["deliveredQty"];
            this.adjustedDeliveryQty = _data["adjustedDeliveryQty"];
            this.returnedQty = _data["returnedQty"];
        }
    };
    OrderLine.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new OrderLine();
        result.init(data);
        return result;
    };
    OrderLine.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["orderId"] = this.orderId;
        data["productId"] = this.productId;
        data["status"] = this.status;
        data["orderQty"] = this.orderQty;
        data["adjustedOrderQty"] = this.adjustedOrderQty;
        data["shippedQty"] = this.shippedQty;
        data["adjustedQuantity"] = this.adjustedQuantity;
        data["deliveredQty"] = this.deliveredQty;
        data["adjustedDeliveryQty"] = this.adjustedDeliveryQty;
        data["returnedQty"] = this.returnedQty;
        return data;
    };
    OrderLine.prototype.clone = function () {
        var json = this.toJSON();
        var result = new OrderLine();
        result.init(json);
        return result;
    };
    return OrderLine;
}());
export { OrderLine };
var DtrOrder = /** @class */ (function () {
    function DtrOrder(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DtrOrder.prototype.init = function (_data) {
        var e_65, _a;
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.status = _data["status"];
            this.orderDate = _data["orderDate"];
            this.orderType = _data["orderType"];
            this.orderedByFirstName = _data["orderedByFirstName"];
            this.orderedByLastName = _data["orderedByLastName"];
            this.orderedByAddressLine1 = _data["orderedByAddressLine1"];
            this.orderedByAddressLine2 = _data["orderedByAddressLine2"];
            this.orderedByCity = _data["orderedByCity"];
            this.orderedByState = _data["orderedByState"];
            this.orderedByZipCode = _data["orderedByZipCode"];
            this.orderedByCountry = _data["orderedByCountry"];
            this.shipToFirstName = _data["shipToFirstName"];
            this.shipToLastName = _data["shipToLastName"];
            this.shipToAddressLine1 = _data["shipToAddressLine1"];
            this.shipToAddressLine2 = _data["shipToAddressLine2"];
            this.shipToCity = _data["shipToCity"];
            this.shipToState = _data["shipToState"];
            this.shipToZipCode = _data["shipToZipCode"];
            this.shipToCountry = _data["shipToCountry"];
            if (Array.isArray(_data["orderLines"])) {
                this.orderLines = [];
                try {
                    for (var _b = __values(_data["orderLines"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.orderLines.push(OrderLine.fromJS(item));
                    }
                }
                catch (e_65_1) { e_65 = { error: e_65_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_65) throw e_65.error; }
                }
            }
            this.repId = _data["repId"];
            this.hcpId = _data["hcpId"];
            this.rushFlag = _data["rushFlag"];
            this.carrier = _data["carrier"];
            this.service = _data["service"];
        }
    };
    DtrOrder.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DtrOrder();
        result.init(data);
        return result;
    };
    DtrOrder.prototype.toJSON = function (data) {
        var e_66, _a;
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["status"] = this.status;
        data["orderDate"] = this.orderDate;
        data["orderType"] = this.orderType;
        data["orderedByFirstName"] = this.orderedByFirstName;
        data["orderedByLastName"] = this.orderedByLastName;
        data["orderedByAddressLine1"] = this.orderedByAddressLine1;
        data["orderedByAddressLine2"] = this.orderedByAddressLine2;
        data["orderedByCity"] = this.orderedByCity;
        data["orderedByState"] = this.orderedByState;
        data["orderedByZipCode"] = this.orderedByZipCode;
        data["orderedByCountry"] = this.orderedByCountry;
        data["shipToFirstName"] = this.shipToFirstName;
        data["shipToLastName"] = this.shipToLastName;
        data["shipToAddressLine1"] = this.shipToAddressLine1;
        data["shipToAddressLine2"] = this.shipToAddressLine2;
        data["shipToCity"] = this.shipToCity;
        data["shipToState"] = this.shipToState;
        data["shipToZipCode"] = this.shipToZipCode;
        data["shipToCountry"] = this.shipToCountry;
        if (Array.isArray(this.orderLines)) {
            data["orderLines"] = [];
            try {
                for (var _b = __values(this.orderLines), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["orderLines"].push(item.toJSON());
                }
            }
            catch (e_66_1) { e_66 = { error: e_66_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_66) throw e_66.error; }
            }
        }
        data["repId"] = this.repId;
        data["hcpId"] = this.hcpId;
        data["rushFlag"] = this.rushFlag;
        data["carrier"] = this.carrier;
        data["service"] = this.service;
        return data;
    };
    DtrOrder.prototype.clone = function () {
        var json = this.toJSON();
        var result = new DtrOrder();
        result.init(json);
        return result;
    };
    return DtrOrder;
}());
export { DtrOrder };
var DtpOrder = /** @class */ (function () {
    function DtpOrder(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DtpOrder.prototype.init = function (_data) {
        var e_67, _a;
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.status = _data["status"];
            this.orderDate = _data["orderDate"];
            this.orderType = _data["orderType"];
            this.orderedByFirstName = _data["orderedByFirstName"];
            this.orderedByLastName = _data["orderedByLastName"];
            this.orderedByAddressLine1 = _data["orderedByAddressLine1"];
            this.orderedByAddressLine2 = _data["orderedByAddressLine2"];
            this.orderedByCity = _data["orderedByCity"];
            this.orderedByState = _data["orderedByState"];
            this.orderedByZipCode = _data["orderedByZipCode"];
            this.orderedByCountry = _data["orderedByCountry"];
            this.shipToFirstName = _data["shipToFirstName"];
            this.shipToLastName = _data["shipToLastName"];
            this.shipToAddressLine1 = _data["shipToAddressLine1"];
            this.shipToAddressLine2 = _data["shipToAddressLine2"];
            this.shipToCity = _data["shipToCity"];
            this.shipToState = _data["shipToState"];
            this.shipToZipCode = _data["shipToZipCode"];
            this.shipToCountry = _data["shipToCountry"];
            if (Array.isArray(_data["orderLines"])) {
                this.orderLines = [];
                try {
                    for (var _b = __values(_data["orderLines"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.orderLines.push(OrderLine.fromJS(item));
                    }
                }
                catch (e_67_1) { e_67 = { error: e_67_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_67) throw e_67.error; }
                }
            }
            this.repId = _data["repId"];
            this.hcpId = _data["hcpId"];
            this.orderSource = _data["orderSource"];
            this.programId = _data["programId"];
            this.territoryId = _data["territoryId"];
            this.communicationLabel = _data["communicationLabel"];
            this.repFirstName = _data["repFirstName"];
            this.repLastName = _data["repLastName"];
        }
    };
    DtpOrder.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DtpOrder();
        result.init(data);
        return result;
    };
    DtpOrder.prototype.toJSON = function (data) {
        var e_68, _a;
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["status"] = this.status;
        data["orderDate"] = this.orderDate;
        data["orderType"] = this.orderType;
        data["orderedByFirstName"] = this.orderedByFirstName;
        data["orderedByLastName"] = this.orderedByLastName;
        data["orderedByAddressLine1"] = this.orderedByAddressLine1;
        data["orderedByAddressLine2"] = this.orderedByAddressLine2;
        data["orderedByCity"] = this.orderedByCity;
        data["orderedByState"] = this.orderedByState;
        data["orderedByZipCode"] = this.orderedByZipCode;
        data["orderedByCountry"] = this.orderedByCountry;
        data["shipToFirstName"] = this.shipToFirstName;
        data["shipToLastName"] = this.shipToLastName;
        data["shipToAddressLine1"] = this.shipToAddressLine1;
        data["shipToAddressLine2"] = this.shipToAddressLine2;
        data["shipToCity"] = this.shipToCity;
        data["shipToState"] = this.shipToState;
        data["shipToZipCode"] = this.shipToZipCode;
        data["shipToCountry"] = this.shipToCountry;
        if (Array.isArray(this.orderLines)) {
            data["orderLines"] = [];
            try {
                for (var _b = __values(this.orderLines), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["orderLines"].push(item.toJSON());
                }
            }
            catch (e_68_1) { e_68 = { error: e_68_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_68) throw e_68.error; }
            }
        }
        data["repId"] = this.repId;
        data["hcpId"] = this.hcpId;
        data["orderSource"] = this.orderSource;
        data["programId"] = this.programId;
        data["territoryId"] = this.territoryId;
        data["communicationLabel"] = this.communicationLabel;
        data["repFirstName"] = this.repFirstName;
        data["repLastName"] = this.repLastName;
        return data;
    };
    DtpOrder.prototype.clone = function () {
        var json = this.toJSON();
        var result = new DtpOrder();
        result.init(json);
        return result;
    };
    return DtpOrder;
}());
export { DtpOrder };
var HandCarryOrder = /** @class */ (function () {
    function HandCarryOrder(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HandCarryOrder.prototype.init = function (_data) {
        if (_data) {
            this.repId = _data["repId"];
        }
    };
    HandCarryOrder.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new HandCarryOrder();
        result.init(data);
        return result;
    };
    HandCarryOrder.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["repId"] = this.repId;
        return data;
    };
    HandCarryOrder.prototype.clone = function () {
        var json = this.toJSON();
        var result = new HandCarryOrder();
        result.init(json);
        return result;
    };
    return HandCarryOrder;
}());
export { HandCarryOrder };
var Hcp = /** @class */ (function () {
    function Hcp(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Hcp.prototype.init = function (_data) {
        var e_69, _a, e_70, _b, e_71, _c;
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.address1Text = _data["address1Text"];
            this.address2Text = _data["address2Text"];
            this.address3Text = _data["address3Text"];
            this.address4Text = _data["address4Text"];
            this.cityName = _data["cityName"];
            this.zipCode = _data["zipCode"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.phoneNumber = _data["phoneNumber"];
            this.title = _data["title"];
            this.phoneExtensionNumber = _data["phoneExtensionNumber"];
            this.faxNumber = _data["faxNumber"];
            this.mobilePhoneNumber = _data["mobilePhoneNumber"];
            this.countryCode = _data["countryCode"];
            this.stateCode = _data["stateCode"];
            this.internalFlag = _data["internalFlag"];
            this.lastLoginTime = _data["lastLoginTime"] ? new Date(_data["lastLoginTime"].toString()) : undefined;
            this.fullName = _data["fullName"];
            this.knipperId = _data["knipperId"];
            this.clientId = _data["clientId"];
            this.npiNbr = _data["npiNbr"];
            this.suffix = _data["suffix"];
            this.primarySpeciality = _data["primarySpeciality"];
            this.secondarySpeciality = _data["secondarySpeciality"];
            this.sanExemptionFlag = _data["sanExemptionFlag"];
            this.professionalDesignation = _data["professionalDesignation"];
            this.status = _data["status"];
            this.facilityName = _data["facilityName"];
            this.profession = _data["profession"];
            this.patientsInMonth = _data["patientsInMonth"];
            this.accountRegistrationStatus = _data["accountRegistrationStatus"];
            this.secondaryAuthorizationNumber = _data["secondaryAuthorizationNumber"];
            this.tddExemptionFlag = _data["tddExemptionFlag"];
            this.certifiedHcpConsent = _data["certifiedHcpConsent"];
            this.termsAgreementFlag = _data["termsAgreementFlag"];
            this.totalReceivedOrders = _data["totalReceivedOrders"];
            this.totalPendingAocs = _data["totalPendingAocs"];
            if (Array.isArray(_data["dtrOrders"])) {
                this.dtrOrders = [];
                try {
                    for (var _d = __values(_data["dtrOrders"]), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var item = _e.value;
                        this.dtrOrders.push(DtrOrder.fromJS(item));
                    }
                }
                catch (e_69_1) { e_69 = { error: e_69_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                    }
                    finally { if (e_69) throw e_69.error; }
                }
            }
            if (Array.isArray(_data["dtpOrders"])) {
                this.dtpOrders = [];
                try {
                    for (var _f = __values(_data["dtpOrders"]), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var item = _g.value;
                        this.dtpOrders.push(DtpOrder.fromJS(item));
                    }
                }
                catch (e_70_1) { e_70 = { error: e_70_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_70) throw e_70.error; }
                }
            }
            if (Array.isArray(_data["handCarryOrders"])) {
                this.handCarryOrders = [];
                try {
                    for (var _h = __values(_data["handCarryOrders"]), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var item = _j.value;
                        this.handCarryOrders.push(HandCarryOrder.fromJS(item));
                    }
                }
                catch (e_71_1) { e_71 = { error: e_71_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                    }
                    finally { if (e_71) throw e_71.error; }
                }
            }
        }
    };
    Hcp.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Hcp();
        result.init(data);
        return result;
    };
    Hcp.prototype.toJSON = function (data) {
        var e_72, _a, e_73, _b, e_74, _c;
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["address1Text"] = this.address1Text;
        data["address2Text"] = this.address2Text;
        data["address3Text"] = this.address3Text;
        data["address4Text"] = this.address4Text;
        data["cityName"] = this.cityName;
        data["zipCode"] = this.zipCode;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phoneNumber"] = this.phoneNumber;
        data["title"] = this.title;
        data["phoneExtensionNumber"] = this.phoneExtensionNumber;
        data["faxNumber"] = this.faxNumber;
        data["mobilePhoneNumber"] = this.mobilePhoneNumber;
        data["countryCode"] = this.countryCode;
        data["stateCode"] = this.stateCode;
        data["internalFlag"] = this.internalFlag;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : undefined;
        data["fullName"] = this.fullName;
        data["knipperId"] = this.knipperId;
        data["clientId"] = this.clientId;
        data["npiNbr"] = this.npiNbr;
        data["suffix"] = this.suffix;
        data["primarySpeciality"] = this.primarySpeciality;
        data["secondarySpeciality"] = this.secondarySpeciality;
        data["sanExemptionFlag"] = this.sanExemptionFlag;
        data["professionalDesignation"] = this.professionalDesignation;
        data["status"] = this.status;
        data["facilityName"] = this.facilityName;
        data["profession"] = this.profession;
        data["patientsInMonth"] = this.patientsInMonth;
        data["accountRegistrationStatus"] = this.accountRegistrationStatus;
        data["secondaryAuthorizationNumber"] = this.secondaryAuthorizationNumber;
        data["tddExemptionFlag"] = this.tddExemptionFlag;
        data["certifiedHcpConsent"] = this.certifiedHcpConsent;
        data["termsAgreementFlag"] = this.termsAgreementFlag;
        data["totalReceivedOrders"] = this.totalReceivedOrders;
        data["totalPendingAocs"] = this.totalPendingAocs;
        if (Array.isArray(this.dtrOrders)) {
            data["dtrOrders"] = [];
            try {
                for (var _d = __values(this.dtrOrders), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var item = _e.value;
                    data["dtrOrders"].push(item.toJSON());
                }
            }
            catch (e_72_1) { e_72 = { error: e_72_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_72) throw e_72.error; }
            }
        }
        if (Array.isArray(this.dtpOrders)) {
            data["dtpOrders"] = [];
            try {
                for (var _f = __values(this.dtpOrders), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var item = _g.value;
                    data["dtpOrders"].push(item.toJSON());
                }
            }
            catch (e_73_1) { e_73 = { error: e_73_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_73) throw e_73.error; }
            }
        }
        if (Array.isArray(this.handCarryOrders)) {
            data["handCarryOrders"] = [];
            try {
                for (var _h = __values(this.handCarryOrders), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var item = _j.value;
                    data["handCarryOrders"].push(item.toJSON());
                }
            }
            catch (e_74_1) { e_74 = { error: e_74_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                }
                finally { if (e_74) throw e_74.error; }
            }
        }
        return data;
    };
    Hcp.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Hcp();
        result.init(json);
        return result;
    };
    return Hcp;
}());
export { Hcp };
var Mail = /** @class */ (function () {
    function Mail(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Mail.prototype.init = function (_data) {
        if (_data) {
            this.addresseeName = _data["addresseeName"];
            this.toCompanyName = _data["toCompanyName"];
            this.toAddress1Text = _data["toAddress1Text"];
            this.toAddress2Text = _data["toAddress2Text"];
            this.toAddress3Text = _data["toAddress3Text"];
            this.toAddress4Text = _data["toAddress4Text"];
            this.toCityName = _data["toCityName"];
            this.toZipCode = _data["toZipCode"];
            this.stateCode = _data["stateCode"];
            this.countryCode = _data["countryCode"];
        }
    };
    Mail.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Mail();
        result.init(data);
        return result;
    };
    Mail.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["addresseeName"] = this.addresseeName;
        data["toCompanyName"] = this.toCompanyName;
        data["toAddress1Text"] = this.toAddress1Text;
        data["toAddress2Text"] = this.toAddress2Text;
        data["toAddress3Text"] = this.toAddress3Text;
        data["toAddress4Text"] = this.toAddress4Text;
        data["toCityName"] = this.toCityName;
        data["toZipCode"] = this.toZipCode;
        data["stateCode"] = this.stateCode;
        data["countryCode"] = this.countryCode;
        return data;
    };
    Mail.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Mail();
        result.init(json);
        return result;
    };
    return Mail;
}());
export { Mail };
var Communication = /** @class */ (function () {
    function Communication(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Communication.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.direction = _data["direction"];
            this.communicationType = _data["communicationType"];
            this.communicationDate = _data["communicationDate"] ? new Date(_data["communicationDate"].toString()) : undefined;
            this.communicationSource = _data["communicationSource"];
            this.attachmentType = _data["attachmentType"];
            this.attachmentName = _data["attachmentName"];
            this.emailRecipient = _data["emailRecipient"];
            this.faxNumber = _data["faxNumber"];
            this.mail = _data["mail"] ? Mail.fromJS(_data["mail"]) : undefined;
            this.orderId = _data["orderId"];
        }
    };
    Communication.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Communication();
        result.init(data);
        return result;
    };
    Communication.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["direction"] = this.direction;
        data["communicationType"] = this.communicationType;
        data["communicationDate"] = this.communicationDate ? this.communicationDate.toISOString() : undefined;
        data["communicationSource"] = this.communicationSource;
        data["attachmentType"] = this.attachmentType;
        data["attachmentName"] = this.attachmentName;
        data["emailRecipient"] = this.emailRecipient;
        data["faxNumber"] = this.faxNumber;
        data["mail"] = this.mail ? this.mail.toJSON() : undefined;
        data["orderId"] = this.orderId;
        return data;
    };
    Communication.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Communication();
        result.init(json);
        return result;
    };
    return Communication;
}());
export { Communication };
var HealthDto = /** @class */ (function () {
    function HealthDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HealthDto.prototype.init = function (_data) {
        if (_data) {
            this.isRunning = _data["isRunning"];
            this.timeStamp = _data["timeStamp"] ? new Date(_data["timeStamp"].toString()) : undefined;
            this.description = _data["description"];
        }
    };
    HealthDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new HealthDto();
        result.init(data);
        return result;
    };
    HealthDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isRunning"] = this.isRunning;
        data["timeStamp"] = this.timeStamp ? this.timeStamp.toISOString() : undefined;
        data["description"] = this.description;
        return data;
    };
    HealthDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new HealthDto();
        result.init(json);
        return result;
    };
    return HealthDto;
}());
export { HealthDto };
var Lot = /** @class */ (function () {
    function Lot(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Lot.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.lotNumber = _data["lotNumber"];
            this.productCode = _data["productCode"];
            this.expirationDate = _data["expirationDate"] ? new Date(_data["expirationDate"].toString()) : undefined;
            this.lastUseDate = _data["lastUseDate"] ? new Date(_data["lastUseDate"].toString()) : undefined;
            this.status = _data["status"];
            this.signalStatus = _data["signalStatus"];
            this.availableQty = _data["availableQty"];
            this.markedQty = _data["markedQty"];
            this.unavailableQty = _data["unavailableQty"];
        }
    };
    Lot.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Lot();
        result.init(data);
        return result;
    };
    Lot.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["lotNumber"] = this.lotNumber;
        data["productCode"] = this.productCode;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : undefined;
        data["lastUseDate"] = this.lastUseDate ? this.lastUseDate.toISOString() : undefined;
        data["status"] = this.status;
        data["signalStatus"] = this.signalStatus;
        data["availableQty"] = this.availableQty;
        data["markedQty"] = this.markedQty;
        data["unavailableQty"] = this.unavailableQty;
        return data;
    };
    Lot.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Lot();
        result.init(json);
        return result;
    };
    return Lot;
}());
export { Lot };
var Product = /** @class */ (function () {
    function Product(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Product.prototype.init = function (_data) {
        var e_75, _a, e_76, _b, e_77, _c, e_78, _d;
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.fulfillmentSource = _data["fulfillmentSource"];
            this.inventoryStatus = _data["inventoryStatus"];
            this.availableInventory = _data["availableInventory"];
            this.productType = _data["productType"];
            this.drugSchedule = _data["drugSchedule"];
            this.shortDay = _data["shortDay"];
            this.storageCondition = _data["storageCondition"];
            this.description = _data["description"];
            this.uom = _data["uom"];
            if (Array.isArray(_data["activeLots"])) {
                this.activeLots = [];
                try {
                    for (var _e = __values(_data["activeLots"]), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var item = _f.value;
                        this.activeLots.push(Lot.fromJS(item));
                    }
                }
                catch (e_75_1) { e_75 = { error: e_75_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                    }
                    finally { if (e_75) throw e_75.error; }
                }
            }
            if (Array.isArray(_data["inactiveLots"])) {
                this.inactiveLots = [];
                try {
                    for (var _g = __values(_data["inactiveLots"]), _h = _g.next(); !_h.done; _h = _g.next()) {
                        var item = _h.value;
                        this.inactiveLots.push(Lot.fromJS(item));
                    }
                }
                catch (e_76_1) { e_76 = { error: e_76_1 }; }
                finally {
                    try {
                        if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                    }
                    finally { if (e_76) throw e_76.error; }
                }
            }
            if (Array.isArray(_data["dtpOrders"])) {
                this.dtpOrders = [];
                try {
                    for (var _j = __values(_data["dtpOrders"]), _k = _j.next(); !_k.done; _k = _j.next()) {
                        var item = _k.value;
                        this.dtpOrders.push(DtpOrder.fromJS(item));
                    }
                }
                catch (e_77_1) { e_77 = { error: e_77_1 }; }
                finally {
                    try {
                        if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                    }
                    finally { if (e_77) throw e_77.error; }
                }
            }
            if (Array.isArray(_data["dtrOrders"])) {
                this.dtrOrders = [];
                try {
                    for (var _l = __values(_data["dtrOrders"]), _m = _l.next(); !_m.done; _m = _l.next()) {
                        var item = _m.value;
                        this.dtrOrders.push(DtrOrder.fromJS(item));
                    }
                }
                catch (e_78_1) { e_78 = { error: e_78_1 }; }
                finally {
                    try {
                        if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                    }
                    finally { if (e_78) throw e_78.error; }
                }
            }
        }
    };
    Product.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Product();
        result.init(data);
        return result;
    };
    Product.prototype.toJSON = function (data) {
        var e_79, _a, e_80, _b, e_81, _c, e_82, _d;
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["code"] = this.code;
        data["name"] = this.name;
        data["fulfillmentSource"] = this.fulfillmentSource;
        data["inventoryStatus"] = this.inventoryStatus;
        data["availableInventory"] = this.availableInventory;
        data["productType"] = this.productType;
        data["drugSchedule"] = this.drugSchedule;
        data["shortDay"] = this.shortDay;
        data["storageCondition"] = this.storageCondition;
        data["description"] = this.description;
        data["uom"] = this.uom;
        if (Array.isArray(this.activeLots)) {
            data["activeLots"] = [];
            try {
                for (var _e = __values(this.activeLots), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var item = _f.value;
                    data["activeLots"].push(item.toJSON());
                }
            }
            catch (e_79_1) { e_79 = { error: e_79_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_79) throw e_79.error; }
            }
        }
        if (Array.isArray(this.inactiveLots)) {
            data["inactiveLots"] = [];
            try {
                for (var _g = __values(this.inactiveLots), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var item = _h.value;
                    data["inactiveLots"].push(item.toJSON());
                }
            }
            catch (e_80_1) { e_80 = { error: e_80_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_80) throw e_80.error; }
            }
        }
        if (Array.isArray(this.dtpOrders)) {
            data["dtpOrders"] = [];
            try {
                for (var _j = __values(this.dtpOrders), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var item = _k.value;
                    data["dtpOrders"].push(item.toJSON());
                }
            }
            catch (e_81_1) { e_81 = { error: e_81_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_81) throw e_81.error; }
            }
        }
        if (Array.isArray(this.dtrOrders)) {
            data["dtrOrders"] = [];
            try {
                for (var _l = __values(this.dtrOrders), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var item = _m.value;
                    data["dtrOrders"].push(item.toJSON());
                }
            }
            catch (e_82_1) { e_82 = { error: e_82_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                }
                finally { if (e_82) throw e_82.error; }
            }
        }
        return data;
    };
    Product.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Product();
        result.init(json);
        return result;
    };
    return Product;
}());
export { Product };
var ProgramDto = /** @class */ (function () {
    function ProgramDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ProgramDto.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.jobNumber = _data["jobNumber"];
            this.clientName = _data["clientName"];
            this.tenantId = _data["tenantId"];
            this.programTypeClassificationId = _data["programTypeClassificationId"];
            this.isMimic = _data["isMimic"];
            this.programStatus = _data["programStatus"];
            this.programStatusName = _data["programStatusName"];
            this.siteLiveDate = _data["siteLiveDate"];
            this.activatedDate = _data["activatedDate"];
            this.numberOfSitePromotions = _data["numberOfSitePromotions"];
            this.url = _data["url"];
            this.canonicalName = _data["canonicalName"];
        }
    };
    ProgramDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ProgramDto();
        result.init(data);
        return result;
    };
    ProgramDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["jobNumber"] = this.jobNumber;
        data["clientName"] = this.clientName;
        data["tenantId"] = this.tenantId;
        data["programTypeClassificationId"] = this.programTypeClassificationId;
        data["isMimic"] = this.isMimic;
        data["programStatus"] = this.programStatus;
        data["programStatusName"] = this.programStatusName;
        data["siteLiveDate"] = this.siteLiveDate;
        data["activatedDate"] = this.activatedDate;
        data["numberOfSitePromotions"] = this.numberOfSitePromotions;
        data["url"] = this.url;
        data["canonicalName"] = this.canonicalName;
        return data;
    };
    ProgramDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ProgramDto();
        result.init(json);
        return result;
    };
    return ProgramDto;
}());
export { ProgramDto };
var TenantInfoDto = /** @class */ (function () {
    function TenantInfoDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantInfoDto.prototype.init = function (_data) {
        var e_83, _a, e_84, _b;
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.tenancyName = _data["tenancyName"];
            this.themeUrl = _data["themeUrl"];
            this.blobStorageContainerName = _data["blobStorageContainerName"];
            this.inMaintenance = _data["inMaintenance"];
            if (Array.isArray(_data["programs"])) {
                this.programs = [];
                try {
                    for (var _c = __values(_data["programs"]), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var item = _d.value;
                        this.programs.push(ProgramDto.fromJS(item));
                    }
                }
                catch (e_83_1) { e_83 = { error: e_83_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_83) throw e_83.error; }
                }
            }
            this.daxId = _data["daxId"];
            this.tenantCulture = _data["tenantCulture"];
            if (Array.isArray(_data["bannerCarouselImageUrls"])) {
                this.bannerCarouselImageUrls = [];
                try {
                    for (var _e = __values(_data["bannerCarouselImageUrls"]), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var item = _f.value;
                        this.bannerCarouselImageUrls.push(item);
                    }
                }
                catch (e_84_1) { e_84 = { error: e_84_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_84) throw e_84.error; }
                }
            }
        }
    };
    TenantInfoDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantInfoDto();
        result.init(data);
        return result;
    };
    TenantInfoDto.prototype.toJSON = function (data) {
        var e_85, _a, e_86, _b;
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["tenancyName"] = this.tenancyName;
        data["themeUrl"] = this.themeUrl;
        data["blobStorageContainerName"] = this.blobStorageContainerName;
        data["inMaintenance"] = this.inMaintenance;
        if (Array.isArray(this.programs)) {
            data["programs"] = [];
            try {
                for (var _c = __values(this.programs), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var item = _d.value;
                    data["programs"].push(item.toJSON());
                }
            }
            catch (e_85_1) { e_85 = { error: e_85_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_85) throw e_85.error; }
            }
        }
        data["daxId"] = this.daxId;
        data["tenantCulture"] = this.tenantCulture;
        if (Array.isArray(this.bannerCarouselImageUrls)) {
            data["bannerCarouselImageUrls"] = [];
            try {
                for (var _e = __values(this.bannerCarouselImageUrls), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var item = _f.value;
                    data["bannerCarouselImageUrls"].push(item);
                }
            }
            catch (e_86_1) { e_86 = { error: e_86_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_86) throw e_86.error; }
            }
        }
        return data;
    };
    TenantInfoDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantInfoDto();
        result.init(json);
        return result;
    };
    return TenantInfoDto;
}());
export { TenantInfoDto };
var Territory = /** @class */ (function () {
    function Territory(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Territory.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.code = _data["code"];
            this.name = _data["name"];
        }
    };
    Territory.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Territory();
        result.init(data);
        return result;
    };
    Territory.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["code"] = this.code;
        data["name"] = this.name;
        return data;
    };
    Territory.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Territory();
        result.init(json);
        return result;
    };
    return Territory;
}());
export { Territory };
var PushShipment = /** @class */ (function () {
    function PushShipment(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PushShipment.prototype.init = function (_data) {
        var e_87, _a;
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.status = _data["status"];
            this.orderDate = _data["orderDate"];
            this.orderType = _data["orderType"];
            this.orderedByFirstName = _data["orderedByFirstName"];
            this.orderedByLastName = _data["orderedByLastName"];
            this.orderedByAddressLine1 = _data["orderedByAddressLine1"];
            this.orderedByAddressLine2 = _data["orderedByAddressLine2"];
            this.orderedByCity = _data["orderedByCity"];
            this.orderedByState = _data["orderedByState"];
            this.orderedByZipCode = _data["orderedByZipCode"];
            this.orderedByCountry = _data["orderedByCountry"];
            this.shipToFirstName = _data["shipToFirstName"];
            this.shipToLastName = _data["shipToLastName"];
            this.shipToAddressLine1 = _data["shipToAddressLine1"];
            this.shipToAddressLine2 = _data["shipToAddressLine2"];
            this.shipToCity = _data["shipToCity"];
            this.shipToState = _data["shipToState"];
            this.shipToZipCode = _data["shipToZipCode"];
            this.shipToCountry = _data["shipToCountry"];
            if (Array.isArray(_data["orderLines"])) {
                this.orderLines = [];
                try {
                    for (var _b = __values(_data["orderLines"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.orderLines.push(OrderLine.fromJS(item));
                    }
                }
                catch (e_87_1) { e_87 = { error: e_87_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_87) throw e_87.error; }
                }
            }
            this.repId = _data["repId"];
        }
    };
    PushShipment.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PushShipment();
        result.init(data);
        return result;
    };
    PushShipment.prototype.toJSON = function (data) {
        var e_88, _a;
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["status"] = this.status;
        data["orderDate"] = this.orderDate;
        data["orderType"] = this.orderType;
        data["orderedByFirstName"] = this.orderedByFirstName;
        data["orderedByLastName"] = this.orderedByLastName;
        data["orderedByAddressLine1"] = this.orderedByAddressLine1;
        data["orderedByAddressLine2"] = this.orderedByAddressLine2;
        data["orderedByCity"] = this.orderedByCity;
        data["orderedByState"] = this.orderedByState;
        data["orderedByZipCode"] = this.orderedByZipCode;
        data["orderedByCountry"] = this.orderedByCountry;
        data["shipToFirstName"] = this.shipToFirstName;
        data["shipToLastName"] = this.shipToLastName;
        data["shipToAddressLine1"] = this.shipToAddressLine1;
        data["shipToAddressLine2"] = this.shipToAddressLine2;
        data["shipToCity"] = this.shipToCity;
        data["shipToState"] = this.shipToState;
        data["shipToZipCode"] = this.shipToZipCode;
        data["shipToCountry"] = this.shipToCountry;
        if (Array.isArray(this.orderLines)) {
            data["orderLines"] = [];
            try {
                for (var _b = __values(this.orderLines), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["orderLines"].push(item.toJSON());
                }
            }
            catch (e_88_1) { e_88 = { error: e_88_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_88) throw e_88.error; }
            }
        }
        data["repId"] = this.repId;
        return data;
    };
    PushShipment.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PushShipment();
        result.init(json);
        return result;
    };
    return PushShipment;
}());
export { PushShipment };
var RepTerritory = /** @class */ (function () {
    function RepTerritory(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RepTerritory.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.repId = _data["repId"];
            this.territoryId = _data["territoryId"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined;
            this.territory = _data["territory"] ? Territory.fromJS(_data["territory"]) : undefined;
        }
    };
    RepTerritory.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RepTerritory();
        result.init(data);
        return result;
    };
    RepTerritory.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["repId"] = this.repId;
        data["territoryId"] = this.territoryId;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
        data["territory"] = this.territory ? this.territory.toJSON() : undefined;
        return data;
    };
    RepTerritory.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RepTerritory();
        result.init(json);
        return result;
    };
    return RepTerritory;
}());
export { RepTerritory };
var Rep = /** @class */ (function () {
    function Rep(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Rep.prototype.init = function (_data) {
        var e_89, _a, e_90, _b, e_91, _c, e_92, _d, e_93, _e;
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.address1Text = _data["address1Text"];
            this.address2Text = _data["address2Text"];
            this.address3Text = _data["address3Text"];
            this.address4Text = _data["address4Text"];
            this.cityName = _data["cityName"];
            this.zipCode = _data["zipCode"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.phoneNumber = _data["phoneNumber"];
            this.title = _data["title"];
            this.phoneExtensionNumber = _data["phoneExtensionNumber"];
            this.faxNumber = _data["faxNumber"];
            this.mobilePhoneNumber = _data["mobilePhoneNumber"];
            this.countryCode = _data["countryCode"];
            this.stateCode = _data["stateCode"];
            this.internalFlag = _data["internalFlag"];
            this.lastLoginTime = _data["lastLoginTime"] ? new Date(_data["lastLoginTime"].toString()) : undefined;
            this.fullName = _data["fullName"];
            this.clientRepNbrCode = _data["clientRepNbrCode"];
            this.totalOrdersReceived = _data["totalOrdersReceived"];
            this.therapeuticClass = _data["therapeuticClass"];
            this.currentTerritory = _data["currentTerritory"] ? Territory.fromJS(_data["currentTerritory"]) : undefined;
            if (Array.isArray(_data["repPushShipments"])) {
                this.repPushShipments = [];
                try {
                    for (var _f = __values(_data["repPushShipments"]), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var item = _g.value;
                        this.repPushShipments.push(PushShipment.fromJS(item));
                    }
                }
                catch (e_89_1) { e_89 = { error: e_89_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
                    }
                    finally { if (e_89) throw e_89.error; }
                }
            }
            if (Array.isArray(_data["dtrOrders"])) {
                this.dtrOrders = [];
                try {
                    for (var _h = __values(_data["dtrOrders"]), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var item = _j.value;
                        this.dtrOrders.push(DtrOrder.fromJS(item));
                    }
                }
                catch (e_90_1) { e_90 = { error: e_90_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                    }
                    finally { if (e_90) throw e_90.error; }
                }
            }
            if (Array.isArray(_data["dtpOrders"])) {
                this.dtpOrders = [];
                try {
                    for (var _k = __values(_data["dtpOrders"]), _l = _k.next(); !_l.done; _l = _k.next()) {
                        var item = _l.value;
                        this.dtpOrders.push(DtpOrder.fromJS(item));
                    }
                }
                catch (e_91_1) { e_91 = { error: e_91_1 }; }
                finally {
                    try {
                        if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
                    }
                    finally { if (e_91) throw e_91.error; }
                }
            }
            if (Array.isArray(_data["handCarryOrders"])) {
                this.handCarryOrders = [];
                try {
                    for (var _m = __values(_data["handCarryOrders"]), _o = _m.next(); !_o.done; _o = _m.next()) {
                        var item = _o.value;
                        this.handCarryOrders.push(HandCarryOrder.fromJS(item));
                    }
                }
                catch (e_92_1) { e_92 = { error: e_92_1 }; }
                finally {
                    try {
                        if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
                    }
                    finally { if (e_92) throw e_92.error; }
                }
            }
            if (Array.isArray(_data["repTerritories"])) {
                this.repTerritories = [];
                try {
                    for (var _p = __values(_data["repTerritories"]), _q = _p.next(); !_q.done; _q = _p.next()) {
                        var item = _q.value;
                        this.repTerritories.push(RepTerritory.fromJS(item));
                    }
                }
                catch (e_93_1) { e_93 = { error: e_93_1 }; }
                finally {
                    try {
                        if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
                    }
                    finally { if (e_93) throw e_93.error; }
                }
            }
        }
    };
    Rep.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Rep();
        result.init(data);
        return result;
    };
    Rep.prototype.toJSON = function (data) {
        var e_94, _a, e_95, _b, e_96, _c, e_97, _d, e_98, _e;
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["address1Text"] = this.address1Text;
        data["address2Text"] = this.address2Text;
        data["address3Text"] = this.address3Text;
        data["address4Text"] = this.address4Text;
        data["cityName"] = this.cityName;
        data["zipCode"] = this.zipCode;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phoneNumber"] = this.phoneNumber;
        data["title"] = this.title;
        data["phoneExtensionNumber"] = this.phoneExtensionNumber;
        data["faxNumber"] = this.faxNumber;
        data["mobilePhoneNumber"] = this.mobilePhoneNumber;
        data["countryCode"] = this.countryCode;
        data["stateCode"] = this.stateCode;
        data["internalFlag"] = this.internalFlag;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : undefined;
        data["fullName"] = this.fullName;
        data["clientRepNbrCode"] = this.clientRepNbrCode;
        data["totalOrdersReceived"] = this.totalOrdersReceived;
        data["therapeuticClass"] = this.therapeuticClass;
        data["currentTerritory"] = this.currentTerritory ? this.currentTerritory.toJSON() : undefined;
        if (Array.isArray(this.repPushShipments)) {
            data["repPushShipments"] = [];
            try {
                for (var _f = __values(this.repPushShipments), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var item = _g.value;
                    data["repPushShipments"].push(item.toJSON());
                }
            }
            catch (e_94_1) { e_94 = { error: e_94_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
                }
                finally { if (e_94) throw e_94.error; }
            }
        }
        if (Array.isArray(this.dtrOrders)) {
            data["dtrOrders"] = [];
            try {
                for (var _h = __values(this.dtrOrders), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var item = _j.value;
                    data["dtrOrders"].push(item.toJSON());
                }
            }
            catch (e_95_1) { e_95 = { error: e_95_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                }
                finally { if (e_95) throw e_95.error; }
            }
        }
        if (Array.isArray(this.dtpOrders)) {
            data["dtpOrders"] = [];
            try {
                for (var _k = __values(this.dtpOrders), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var item = _l.value;
                    data["dtpOrders"].push(item.toJSON());
                }
            }
            catch (e_96_1) { e_96 = { error: e_96_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
                }
                finally { if (e_96) throw e_96.error; }
            }
        }
        if (Array.isArray(this.handCarryOrders)) {
            data["handCarryOrders"] = [];
            try {
                for (var _m = __values(this.handCarryOrders), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var item = _o.value;
                    data["handCarryOrders"].push(item.toJSON());
                }
            }
            catch (e_97_1) { e_97 = { error: e_97_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
                }
                finally { if (e_97) throw e_97.error; }
            }
        }
        if (Array.isArray(this.repTerritories)) {
            data["repTerritories"] = [];
            try {
                for (var _p = __values(this.repTerritories), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var item = _q.value;
                    data["repTerritories"].push(item.toJSON());
                }
            }
            catch (e_98_1) { e_98 = { error: e_98_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
                }
                finally { if (e_98) throw e_98.error; }
            }
        }
        return data;
    };
    Rep.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Rep();
        result.init(json);
        return result;
    };
    return Rep;
}());
export { Rep };
var ReportDefinitionModule = /** @class */ (function () {
    function ReportDefinitionModule(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ReportDefinitionModule.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.reportDefinitionId = _data["reportDefinitionId"];
            this.module = _data["module"];
        }
    };
    ReportDefinitionModule.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ReportDefinitionModule();
        result.init(data);
        return result;
    };
    ReportDefinitionModule.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["reportDefinitionId"] = this.reportDefinitionId;
        data["module"] = this.module;
        return data;
    };
    ReportDefinitionModule.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ReportDefinitionModule();
        result.init(json);
        return result;
    };
    return ReportDefinitionModule;
}());
export { ReportDefinitionModule };
var ReportDefinition = /** @class */ (function () {
    function ReportDefinition(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ReportDefinition.prototype.init = function (_data) {
        var e_99, _a;
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.category = _data["category"];
            if (Array.isArray(_data["modules"])) {
                this.modules = [];
                try {
                    for (var _b = __values(_data["modules"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.modules.push(ReportDefinitionModule.fromJS(item));
                    }
                }
                catch (e_99_1) { e_99 = { error: e_99_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_99) throw e_99.error; }
                }
            }
        }
    };
    ReportDefinition.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ReportDefinition();
        result.init(data);
        return result;
    };
    ReportDefinition.prototype.toJSON = function (data) {
        var e_100, _a;
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["category"] = this.category;
        if (Array.isArray(this.modules)) {
            data["modules"] = [];
            try {
                for (var _b = __values(this.modules), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["modules"].push(item.toJSON());
                }
            }
            catch (e_100_1) { e_100 = { error: e_100_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_100) throw e_100.error; }
            }
        }
        return data;
    };
    ReportDefinition.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ReportDefinition();
        result.init(json);
        return result;
    };
    return ReportDefinition;
}());
export { ReportDefinition };
var User = /** @class */ (function () {
    function User(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    User.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.address1Text = _data["address1Text"];
            this.address2Text = _data["address2Text"];
            this.address3Text = _data["address3Text"];
            this.address4Text = _data["address4Text"];
            this.cityName = _data["cityName"];
            this.zipCode = _data["zipCode"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.phoneNumber = _data["phoneNumber"];
            this.title = _data["title"];
            this.phoneExtensionNumber = _data["phoneExtensionNumber"];
            this.faxNumber = _data["faxNumber"];
            this.mobilePhoneNumber = _data["mobilePhoneNumber"];
            this.countryCode = _data["countryCode"];
            this.stateCode = _data["stateCode"];
            this.internalFlag = _data["internalFlag"];
            this.lastLoginTime = _data["lastLoginTime"] ? new Date(_data["lastLoginTime"].toString()) : undefined;
            this.fullName = _data["fullName"];
        }
    };
    User.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new User();
        result.init(data);
        return result;
    };
    User.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["address1Text"] = this.address1Text;
        data["address2Text"] = this.address2Text;
        data["address3Text"] = this.address3Text;
        data["address4Text"] = this.address4Text;
        data["cityName"] = this.cityName;
        data["zipCode"] = this.zipCode;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phoneNumber"] = this.phoneNumber;
        data["title"] = this.title;
        data["phoneExtensionNumber"] = this.phoneExtensionNumber;
        data["faxNumber"] = this.faxNumber;
        data["mobilePhoneNumber"] = this.mobilePhoneNumber;
        data["countryCode"] = this.countryCode;
        data["stateCode"] = this.stateCode;
        data["internalFlag"] = this.internalFlag;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : undefined;
        data["fullName"] = this.fullName;
        return data;
    };
    User.prototype.clone = function () {
        var json = this.toJSON();
        var result = new User();
        result.init(json);
        return result;
    };
    return User;
}());
export { User };
var Report = /** @class */ (function () {
    function Report(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Report.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.reportDefinitionId = _data["reportDefinitionId"];
            this.reportName = _data["reportName"];
            this.attachment = _data["attachment"];
            this.uploadedOn = _data["uploadedOn"] ? new Date(_data["uploadedOn"].toString()) : undefined;
            this.uploadedByUserId = _data["uploadedByUserId"];
            this.uploadedByUser = _data["uploadedByUser"] ? User.fromJS(_data["uploadedByUser"]) : undefined;
            this.reportDefinition = _data["reportDefinition"] ? ReportDefinition.fromJS(_data["reportDefinition"]) : undefined;
        }
    };
    Report.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Report();
        result.init(data);
        return result;
    };
    Report.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["reportDefinitionId"] = this.reportDefinitionId;
        data["reportName"] = this.reportName;
        data["attachment"] = this.attachment;
        data["uploadedOn"] = this.uploadedOn ? this.uploadedOn.toISOString() : undefined;
        data["uploadedByUserId"] = this.uploadedByUserId;
        data["uploadedByUser"] = this.uploadedByUser ? this.uploadedByUser.toJSON() : undefined;
        data["reportDefinition"] = this.reportDefinition ? this.reportDefinition.toJSON() : undefined;
        return data;
    };
    Report.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Report();
        result.init(json);
        return result;
    };
    return Report;
}());
export { Report };
var State = /** @class */ (function () {
    function State(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    State.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.stateName = _data["stateName"];
            this.countryId = _data["countryId"];
            this.internalStateCode = _data["internalStateCode"];
            this.isDistrict = _data["isDistrict"];
            this.exemptionLabel = _data["exemptionLabel"];
            this.helpText = _data["helpText"];
            this.isSANExists = _data["isSANExists"];
        }
    };
    State.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new State();
        result.init(data);
        return result;
    };
    State.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["stateName"] = this.stateName;
        data["countryId"] = this.countryId;
        data["internalStateCode"] = this.internalStateCode;
        data["isDistrict"] = this.isDistrict;
        data["exemptionLabel"] = this.exemptionLabel;
        data["helpText"] = this.helpText;
        data["isSANExists"] = this.isSANExists;
        return data;
    };
    State.prototype.clone = function () {
        var json = this.toJSON();
        var result = new State();
        result.init(json);
        return result;
    };
    return State;
}());
export { State };
var ApiException = /** @class */ (function (_super) {
    __extends(ApiException, _super);
    function ApiException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isApiException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    ApiException.isApiException = function (obj) {
        return obj.isApiException === true;
    };
    return ApiException;
}(Error));
export { ApiException };
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}
function blobToText(blob) {
    return new Observable(function (observer) {
        if (!blob) {
            observer.next("");
            observer.complete();
        }
        else {
            var reader = new FileReader();
            reader.onload = function (event) {
                observer.next(event.target.result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
//# sourceMappingURL=service-client.js.map
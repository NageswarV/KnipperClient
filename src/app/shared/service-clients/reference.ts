/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const REFERENCE_API_BASE_URL = new InjectionToken<string>('REFERENCE_API_BASE_URL');

export class ServiceBaseConfig {
  public key: string;
}

export class ServiceBase {
  private readonly apiKey: string;
  private readonly apimHeaderName: string = 'Ocp-Apim-Subscription-Key';
  private readonly tenantIdHeaderName: string = 'TenantId';
  private readonly tenantIdLocalStorageKey: string = 'samplicity-dtp-current-client';
  private readonly idTokenKey: string = 'samplicity-id-token';

  constructor(config: ServiceBaseConfig) {
    this.apiKey = config.key;
  }

  protected transformOptions(options: any) {
    let headers: HttpHeaders = options.headers;

    if (this.apiKey) {
      headers = headers.append(this.apimHeaderName, this.apiKey);
    }

    const tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
    if (tenantId) {
      headers = headers.append(this.tenantIdHeaderName, tenantId);
    }

    const token = localStorage.getItem(this.idTokenKey);
    if (token) {
      headers = headers.append('Authorization', 'Bearer ' + token);
    }

    options.headers = headers;

    return Promise.resolve(options);
  }
}

@Injectable()
export class Reference extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(ServiceBaseConfig) configuration: ServiceBaseConfig, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(REFERENCE_API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param typeId (optional) 
     * @return Success
     */
    getProductTypeById(typeId: string | null | undefined): Observable<AjaxResponseOfProductTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductType/GetProductTypeById?";
        if (typeId !== undefined)
            url_ += "typeId=" + encodeURIComponent("" + typeId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProductTypeById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductTypeById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProductTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProductTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductTypeById(response: HttpResponseBase): Observable<AjaxResponseOfProductTypeDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProductTypeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProductTypeDto>(<any>null);
    }

    /**
     * @param typeCode (optional) 
     * @return Success
     */
    getProductTypeByCode(typeCode: string | null | undefined): Observable<AjaxResponseOfProductTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductType/GetProductTypeByCode?";
        if (typeCode !== undefined)
            url_ += "typeCode=" + encodeURIComponent("" + typeCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProductTypeByCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductTypeByCode(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProductTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProductTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductTypeByCode(response: HttpResponseBase): Observable<AjaxResponseOfProductTypeDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProductTypeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProductTypeDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProductTypes(): Observable<AjaxResponseOfIListOfProductTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductType/GetProductTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProductTypes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductTypes(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfProductTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfProductTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductTypes(response: HttpResponseBase): Observable<AjaxResponseOfIListOfProductTypeDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfProductTypeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfProductTypeDto>(<any>null);
    }

    /**
     * @return Success
     */
    getWmsProductTypes(): Observable<AjaxResponseOfIListOfWmsProductTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductType/GetWmsProductTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetWmsProductTypes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWmsProductTypes(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfWmsProductTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfWmsProductTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetWmsProductTypes(response: HttpResponseBase): Observable<AjaxResponseOfIListOfWmsProductTypeDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfWmsProductTypeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfWmsProductTypeDto>(<any>null);
    }

    /**
     * @return Success
     */
    getGlobalSettings(): Observable<AjaxResponseOfIListOfGlobalSettingDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetGlobalSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetGlobalSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGlobalSettings(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfGlobalSettingDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfGlobalSettingDto>><any>Observable.throw(response_);
        });
    }

    protected processGetGlobalSettings(response: HttpResponseBase): Observable<AjaxResponseOfIListOfGlobalSettingDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfGlobalSettingDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfGlobalSettingDto>(<any>null);
    }

    /**
     * @return Success
     */
    getModules(): Observable<AjaxResponseOfIListOfModuleDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetModules";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetModules(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetModules(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfModuleDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfModuleDto>><any>Observable.throw(response_);
        });
    }

    protected processGetModules(response: HttpResponseBase): Observable<AjaxResponseOfIListOfModuleDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfModuleDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfModuleDto>(<any>null);
    }

    /**
     * @return Success
     */
    getContactMethodTypes(): Observable<AjaxResponseOfIListOfContactMethodTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetContactMethodTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetContactMethodTypes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetContactMethodTypes(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfContactMethodTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfContactMethodTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetContactMethodTypes(response: HttpResponseBase): Observable<AjaxResponseOfIListOfContactMethodTypeDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfContactMethodTypeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfContactMethodTypeDto>(<any>null);
    }

    /**
     * @return Success
     */
    getStates(): Observable<AjaxResponseOfIListOfStateDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetStates";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetStates(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStates(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfStateDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfStateDto>><any>Observable.throw(response_);
        });
    }

    protected processGetStates(response: HttpResponseBase): Observable<AjaxResponseOfIListOfStateDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfStateDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfStateDto>(<any>null);
    }

    /**
     * @return Success
     */
    getCountries(): Observable<AjaxResponseOfIListOfCountryDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetCountries";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetCountries(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountries(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfCountryDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfCountryDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCountries(response: HttpResponseBase): Observable<AjaxResponseOfIListOfCountryDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfCountryDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfCountryDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProfessionalDesignations(): Observable<AjaxResponseOfIListOfProfessionalDesignationDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetProfessionalDesignations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProfessionalDesignations(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProfessionalDesignations(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfProfessionalDesignationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfProfessionalDesignationDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProfessionalDesignations(response: HttpResponseBase): Observable<AjaxResponseOfIListOfProfessionalDesignationDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfProfessionalDesignationDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfProfessionalDesignationDto>(<any>null);
    }

    /**
     * @return Success
     */
    getOrderSources(): Observable<AjaxResponseOfIListOfOrderSourceDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetOrderSources";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderSources(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderSources(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfOrderSourceDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfOrderSourceDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderSources(response: HttpResponseBase): Observable<AjaxResponseOfIListOfOrderSourceDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfOrderSourceDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfOrderSourceDto>(<any>null);
    }

    /**
     * @return Success
     */
    getOrderSourceExceptionActions(): Observable<AjaxResponseOfIListOfOrderSourceExceptionActionDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetOrderSourceExceptionActions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderSourceExceptionActions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderSourceExceptionActions(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfOrderSourceExceptionActionDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfOrderSourceExceptionActionDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderSourceExceptionActions(response: HttpResponseBase): Observable<AjaxResponseOfIListOfOrderSourceExceptionActionDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfOrderSourceExceptionActionDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfOrderSourceExceptionActionDto>(<any>null);
    }

    /**
     * @return Success
     */
    getDoNotHonorExclusionReasons(): Observable<AjaxResponseOfIListOfDoNotHonorExclusionReasonDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetDoNotHonorExclusionReasons";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetDoNotHonorExclusionReasons(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDoNotHonorExclusionReasons(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfDoNotHonorExclusionReasonDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfDoNotHonorExclusionReasonDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDoNotHonorExclusionReasons(response: HttpResponseBase): Observable<AjaxResponseOfIListOfDoNotHonorExclusionReasonDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfDoNotHonorExclusionReasonDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfDoNotHonorExclusionReasonDto>(<any>null);
    }

    /**
     * @return Success
     */
    getDoNotHonorExclusionReasonSources(): Observable<AjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetDoNotHonorExclusionReasonSources";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetDoNotHonorExclusionReasonSources(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDoNotHonorExclusionReasonSources(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDoNotHonorExclusionReasonSources(response: HttpResponseBase): Observable<AjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto>(<any>null);
    }

    /**
     * @return Success
     */
    getOrderStatusReasonTypes(): Observable<AjaxResponseOfIListOfOrderStatusReasonTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetOrderStatusReasonTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderStatusReasonTypes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderStatusReasonTypes(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfOrderStatusReasonTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfOrderStatusReasonTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderStatusReasonTypes(response: HttpResponseBase): Observable<AjaxResponseOfIListOfOrderStatusReasonTypeDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfOrderStatusReasonTypeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfOrderStatusReasonTypeDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMitigationOrderStatusReasonTypes(): Observable<AjaxResponseOfIListOfOrderStatusReasonTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetMitigationOrderStatusReasonTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetMitigationOrderStatusReasonTypes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMitigationOrderStatusReasonTypes(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfOrderStatusReasonTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfOrderStatusReasonTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMitigationOrderStatusReasonTypes(response: HttpResponseBase): Observable<AjaxResponseOfIListOfOrderStatusReasonTypeDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfOrderStatusReasonTypeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfOrderStatusReasonTypeDto>(<any>null);
    }

    /**
     * @return Success
     */
    getOrderStatuses(): Observable<AjaxResponseOfIListOfOrderStatusDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetOrderStatuses";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderStatuses(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderStatuses(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfOrderStatusDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfOrderStatusDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderStatuses(response: HttpResponseBase): Observable<AjaxResponseOfIListOfOrderStatusDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfOrderStatusDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfOrderStatusDto>(<any>null);
    }

    /**
     * @return Success
     */
    getAllCarriers(): Observable<AjaxResponseOfIListOfCarrierDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetAllCarriers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetAllCarriers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCarriers(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfCarrierDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfCarrierDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllCarriers(response: HttpResponseBase): Observable<AjaxResponseOfIListOfCarrierDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfCarrierDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfCarrierDto>(<any>null);
    }

    /**
     * @param carrierId (optional) 
     * @return Success
     */
    getCarrierServiceTypesByCarrierId(carrierId: string | null | undefined): Observable<AjaxResponseOfIListOfCarrierServiceTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetCarrierServiceTypesByCarrierId?";
        if (carrierId !== undefined)
            url_ += "carrierId=" + encodeURIComponent("" + carrierId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetCarrierServiceTypesByCarrierId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCarrierServiceTypesByCarrierId(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfCarrierServiceTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfCarrierServiceTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCarrierServiceTypesByCarrierId(response: HttpResponseBase): Observable<AjaxResponseOfIListOfCarrierServiceTypeDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfCarrierServiceTypeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfCarrierServiceTypeDto>(<any>null);
    }

    /**
     * @return Success
     */
    getAllCarrierServiceTypes(): Observable<AjaxResponseOfIListOfCarrierServiceTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetAllCarrierServiceTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetAllCarrierServiceTypes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCarrierServiceTypes(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfCarrierServiceTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfCarrierServiceTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllCarrierServiceTypes(response: HttpResponseBase): Observable<AjaxResponseOfIListOfCarrierServiceTypeDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfCarrierServiceTypeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfCarrierServiceTypeDto>(<any>null);
    }

    /**
     * @return Success
     */
    getCommunicationTypes(): Observable<AjaxResponseOfIListOfCommunicationTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetCommunicationTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetCommunicationTypes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCommunicationTypes(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfCommunicationTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfCommunicationTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCommunicationTypes(response: HttpResponseBase): Observable<AjaxResponseOfIListOfCommunicationTypeDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfCommunicationTypeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfCommunicationTypeDto>(<any>null);
    }

    /**
     * @return Success
     */
    getNormalizedReferenceData(): Observable<NormalizedReferenceDataDto[]> {
        let url_ = this.baseUrl + "/api/services/app/ReferenceData/GetNormalizedReferenceData";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetNormalizedReferenceData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNormalizedReferenceData(<any>response_);
                } catch (e) {
                    return <Observable<NormalizedReferenceDataDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<NormalizedReferenceDataDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetNormalizedReferenceData(response: HttpResponseBase): Observable<NormalizedReferenceDataDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(NormalizedReferenceDataDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<NormalizedReferenceDataDto[]>(<any>null);
    }
}

export class AjaxResponseOfProductTypeDto implements IAjaxResponseOfProductTypeDto {
    result: ProductTypeDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfProductTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ProductTypeDto.fromJS(data["result"]) : <any>undefined;
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfProductTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfProductTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfProductTypeDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfProductTypeDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfProductTypeDto {
    result: ProductTypeDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ProductTypeDto implements IProductTypeDto {
    productTypeCode: string | undefined;
    productTypeName: string | undefined;
    defaultAOCRequiredFlag: boolean | undefined;
    lotControlledFlag: boolean | undefined;
    genericNameVisibleFlag: boolean | undefined;
    genericNameRequiredFlag: boolean | undefined;
    nationalDrugCodeVisibleFlag: boolean | undefined;
    nationalDrugCodeRequiredFlag: boolean | undefined;
    productStrengthVisibleFlag: boolean | undefined;
    productStrengthRequiredFlag: boolean | undefined;
    deaScheduleVisibleFlag: boolean | undefined;
    deaScheduleRequiredFlag: boolean | undefined;
    opioidVisibleFlag: boolean | undefined;
    opioidRequiredFlag: boolean | undefined;
    antibioticVisibleFlag: boolean | undefined;
    antibioticRequiredFlag: boolean | undefined;
    hazardousVisibleFlag: boolean | undefined;
    hazardousRequiredFlag: boolean | undefined;
    temperatureControlledVisibleFlag: boolean | undefined;
    temperatureControlledRequiredFlag: boolean | undefined;
    animalHealthVisibleFlag: boolean | undefined;
    animalHealthRequiredFlag: boolean | undefined;
    activeFlag: boolean | undefined;
    priority: number | undefined;
    names: LocalizedValue[] | undefined;
    id: string | undefined;

    constructor(data?: IProductTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productTypeCode = data["productTypeCode"];
            this.productTypeName = data["productTypeName"];
            this.defaultAOCRequiredFlag = data["defaultAOCRequiredFlag"];
            this.lotControlledFlag = data["lotControlledFlag"];
            this.genericNameVisibleFlag = data["genericNameVisibleFlag"];
            this.genericNameRequiredFlag = data["genericNameRequiredFlag"];
            this.nationalDrugCodeVisibleFlag = data["nationalDrugCodeVisibleFlag"];
            this.nationalDrugCodeRequiredFlag = data["nationalDrugCodeRequiredFlag"];
            this.productStrengthVisibleFlag = data["productStrengthVisibleFlag"];
            this.productStrengthRequiredFlag = data["productStrengthRequiredFlag"];
            this.deaScheduleVisibleFlag = data["deaScheduleVisibleFlag"];
            this.deaScheduleRequiredFlag = data["deaScheduleRequiredFlag"];
            this.opioidVisibleFlag = data["opioidVisibleFlag"];
            this.opioidRequiredFlag = data["opioidRequiredFlag"];
            this.antibioticVisibleFlag = data["antibioticVisibleFlag"];
            this.antibioticRequiredFlag = data["antibioticRequiredFlag"];
            this.hazardousVisibleFlag = data["hazardousVisibleFlag"];
            this.hazardousRequiredFlag = data["hazardousRequiredFlag"];
            this.temperatureControlledVisibleFlag = data["temperatureControlledVisibleFlag"];
            this.temperatureControlledRequiredFlag = data["temperatureControlledRequiredFlag"];
            this.animalHealthVisibleFlag = data["animalHealthVisibleFlag"];
            this.animalHealthRequiredFlag = data["animalHealthRequiredFlag"];
            this.activeFlag = data["activeFlag"];
            this.priority = data["priority"];
            if (Array.isArray(data["names"])) {
                this.names = [] as any;
                for (let item of data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productTypeCode"] = this.productTypeCode;
        data["productTypeName"] = this.productTypeName;
        data["defaultAOCRequiredFlag"] = this.defaultAOCRequiredFlag;
        data["lotControlledFlag"] = this.lotControlledFlag;
        data["genericNameVisibleFlag"] = this.genericNameVisibleFlag;
        data["genericNameRequiredFlag"] = this.genericNameRequiredFlag;
        data["nationalDrugCodeVisibleFlag"] = this.nationalDrugCodeVisibleFlag;
        data["nationalDrugCodeRequiredFlag"] = this.nationalDrugCodeRequiredFlag;
        data["productStrengthVisibleFlag"] = this.productStrengthVisibleFlag;
        data["productStrengthRequiredFlag"] = this.productStrengthRequiredFlag;
        data["deaScheduleVisibleFlag"] = this.deaScheduleVisibleFlag;
        data["deaScheduleRequiredFlag"] = this.deaScheduleRequiredFlag;
        data["opioidVisibleFlag"] = this.opioidVisibleFlag;
        data["opioidRequiredFlag"] = this.opioidRequiredFlag;
        data["antibioticVisibleFlag"] = this.antibioticVisibleFlag;
        data["antibioticRequiredFlag"] = this.antibioticRequiredFlag;
        data["hazardousVisibleFlag"] = this.hazardousVisibleFlag;
        data["hazardousRequiredFlag"] = this.hazardousRequiredFlag;
        data["temperatureControlledVisibleFlag"] = this.temperatureControlledVisibleFlag;
        data["temperatureControlledRequiredFlag"] = this.temperatureControlledRequiredFlag;
        data["animalHealthVisibleFlag"] = this.animalHealthVisibleFlag;
        data["animalHealthRequiredFlag"] = this.animalHealthRequiredFlag;
        data["activeFlag"] = this.activeFlag;
        data["priority"] = this.priority;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): ProductTypeDto {
        const json = this.toJSON();
        let result = new ProductTypeDto();
        result.init(json);
        return result;
    }
}

export interface IProductTypeDto {
    productTypeCode: string | undefined;
    productTypeName: string | undefined;
    defaultAOCRequiredFlag: boolean | undefined;
    lotControlledFlag: boolean | undefined;
    genericNameVisibleFlag: boolean | undefined;
    genericNameRequiredFlag: boolean | undefined;
    nationalDrugCodeVisibleFlag: boolean | undefined;
    nationalDrugCodeRequiredFlag: boolean | undefined;
    productStrengthVisibleFlag: boolean | undefined;
    productStrengthRequiredFlag: boolean | undefined;
    deaScheduleVisibleFlag: boolean | undefined;
    deaScheduleRequiredFlag: boolean | undefined;
    opioidVisibleFlag: boolean | undefined;
    opioidRequiredFlag: boolean | undefined;
    antibioticVisibleFlag: boolean | undefined;
    antibioticRequiredFlag: boolean | undefined;
    hazardousVisibleFlag: boolean | undefined;
    hazardousRequiredFlag: boolean | undefined;
    temperatureControlledVisibleFlag: boolean | undefined;
    temperatureControlledRequiredFlag: boolean | undefined;
    animalHealthVisibleFlag: boolean | undefined;
    animalHealthRequiredFlag: boolean | undefined;
    activeFlag: boolean | undefined;
    priority: number | undefined;
    names: LocalizedValue[] | undefined;
    id: string | undefined;
}

export class ErrorInfo implements IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;

    constructor(data?: IErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.message = data["message"];
            this.details = data["details"];
            if (Array.isArray(data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of data["validationErrors"])
                    this.validationErrors.push(ValidationErrorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ErrorInfo {
        const json = this.toJSON();
        let result = new ErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;
}

export class LocalizedValue implements ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;

    constructor(data?: ILocalizedValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.language = data["language"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): LocalizedValue {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language;
        data["value"] = this.value;
        return data; 
    }

    clone(): LocalizedValue {
        const json = this.toJSON();
        let result = new LocalizedValue();
        result.init(json);
        return result;
    }
}

export interface ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;
}

export class ValidationErrorInfo implements IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;

    constructor(data?: IValidationErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.message = data["message"];
            if (Array.isArray(data["members"])) {
                this.members = [] as any;
                for (let item of data["members"])
                    this.members.push(item);
            }
        }
    }

    static fromJS(data: any): ValidationErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }

    clone(): ValidationErrorInfo {
        const json = this.toJSON();
        let result = new ValidationErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;
}

export class AjaxResponseOfIListOfProductTypeDto implements IAjaxResponseOfIListOfProductTypeDto {
    result: ProductTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfProductTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(ProductTypeDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfProductTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfProductTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfProductTypeDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfProductTypeDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfProductTypeDto {
    result: ProductTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfIListOfWmsProductTypeDto implements IAjaxResponseOfIListOfWmsProductTypeDto {
    result: WmsProductTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfWmsProductTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(WmsProductTypeDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfWmsProductTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfWmsProductTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfWmsProductTypeDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfWmsProductTypeDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfWmsProductTypeDto {
    result: WmsProductTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class WmsProductTypeDto implements IWmsProductTypeDto {
    productTypeDesc: string | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IWmsProductTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productTypeDesc = data["productTypeDesc"];
            if (Array.isArray(data["names"])) {
                this.names = [] as any;
                for (let item of data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WmsProductTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new WmsProductTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productTypeDesc"] = this.productTypeDesc;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): WmsProductTypeDto {
        const json = this.toJSON();
        let result = new WmsProductTypeDto();
        result.init(json);
        return result;
    }
}

export interface IWmsProductTypeDto {
    productTypeDesc: string | undefined;
    names: LocalizedValue[] | undefined;
}

export class AjaxResponseOfIListOfGlobalSettingDto implements IAjaxResponseOfIListOfGlobalSettingDto {
    result: GlobalSettingDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfGlobalSettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(GlobalSettingDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfGlobalSettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfGlobalSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfGlobalSettingDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfGlobalSettingDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfGlobalSettingDto {
    result: GlobalSettingDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class GlobalSettingDto implements IGlobalSettingDto {
    key: string | undefined;
    value: string | undefined;
    description: string | undefined;
    id: string | undefined;

    constructor(data?: IGlobalSettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.key = data["key"];
            this.value = data["value"];
            this.description = data["description"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GlobalSettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new GlobalSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        data["description"] = this.description;
        data["id"] = this.id;
        return data; 
    }

    clone(): GlobalSettingDto {
        const json = this.toJSON();
        let result = new GlobalSettingDto();
        result.init(json);
        return result;
    }
}

export interface IGlobalSettingDto {
    key: string | undefined;
    value: string | undefined;
    description: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfIListOfModuleDto implements IAjaxResponseOfIListOfModuleDto {
    result: ModuleDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfModuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(ModuleDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfModuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfModuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfModuleDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfModuleDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfModuleDto {
    result: ModuleDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ModuleDto implements IModuleDto {
    url: string | undefined;
    baseUrlFormat: string | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;

    constructor(data?: IModuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.url = data["url"];
            this.baseUrlFormat = data["baseUrlFormat"];
            this.name = data["name"];
            this.code = data["code"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ModuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["baseUrlFormat"] = this.baseUrlFormat;
        data["name"] = this.name;
        data["code"] = this.code;
        data["id"] = this.id;
        return data; 
    }

    clone(): ModuleDto {
        const json = this.toJSON();
        let result = new ModuleDto();
        result.init(json);
        return result;
    }
}

export interface IModuleDto {
    url: string | undefined;
    baseUrlFormat: string | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfIListOfContactMethodTypeDto implements IAjaxResponseOfIListOfContactMethodTypeDto {
    result: ContactMethodTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfContactMethodTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(ContactMethodTypeDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfContactMethodTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfContactMethodTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfContactMethodTypeDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfContactMethodTypeDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfContactMethodTypeDto {
    result: ContactMethodTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ContactMethodTypeDto implements IContactMethodTypeDto {
    phoneNbrFlag: boolean | undefined;
    emailFlag: boolean | undefined;
    faxFlag: boolean | undefined;
    extensionFlag: boolean | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;

    constructor(data?: IContactMethodTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.phoneNbrFlag = data["phoneNbrFlag"];
            this.emailFlag = data["emailFlag"];
            this.faxFlag = data["faxFlag"];
            this.extensionFlag = data["extensionFlag"];
            this.name = data["name"];
            this.code = data["code"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ContactMethodTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContactMethodTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNbrFlag"] = this.phoneNbrFlag;
        data["emailFlag"] = this.emailFlag;
        data["faxFlag"] = this.faxFlag;
        data["extensionFlag"] = this.extensionFlag;
        data["name"] = this.name;
        data["code"] = this.code;
        data["id"] = this.id;
        return data; 
    }

    clone(): ContactMethodTypeDto {
        const json = this.toJSON();
        let result = new ContactMethodTypeDto();
        result.init(json);
        return result;
    }
}

export interface IContactMethodTypeDto {
    phoneNbrFlag: boolean | undefined;
    emailFlag: boolean | undefined;
    faxFlag: boolean | undefined;
    extensionFlag: boolean | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfIListOfStateDto implements IAjaxResponseOfIListOfStateDto {
    result: StateDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfStateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(StateDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfStateDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfStateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfStateDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfStateDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfStateDto {
    result: StateDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class StateDto implements IStateDto {
    code: string | undefined;
    name: string | undefined;
    countryCode: string | undefined;

    constructor(data?: IStateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.countryCode = data["countryCode"];
        }
    }

    static fromJS(data: any): StateDto {
        data = typeof data === 'object' ? data : {};
        let result = new StateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["countryCode"] = this.countryCode;
        return data; 
    }

    clone(): StateDto {
        const json = this.toJSON();
        let result = new StateDto();
        result.init(json);
        return result;
    }
}

export interface IStateDto {
    code: string | undefined;
    name: string | undefined;
    countryCode: string | undefined;
}

export class AjaxResponseOfIListOfCountryDto implements IAjaxResponseOfIListOfCountryDto {
    result: CountryDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfCountryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(CountryDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfCountryDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfCountryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfCountryDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfCountryDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfCountryDto {
    result: CountryDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class CountryDto implements ICountryDto {
    code: string | undefined;
    name: string | undefined;

    constructor(data?: ICountryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CountryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CountryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }

    clone(): CountryDto {
        const json = this.toJSON();
        let result = new CountryDto();
        result.init(json);
        return result;
    }
}

export interface ICountryDto {
    code: string | undefined;
    name: string | undefined;
}

export class AjaxResponseOfIListOfProfessionalDesignationDto implements IAjaxResponseOfIListOfProfessionalDesignationDto {
    result: ProfessionalDesignationDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfProfessionalDesignationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(ProfessionalDesignationDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfProfessionalDesignationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfProfessionalDesignationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfProfessionalDesignationDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfProfessionalDesignationDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfProfessionalDesignationDto {
    result: ProfessionalDesignationDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ProfessionalDesignationDto implements IProfessionalDesignationDto {
    comments: string | undefined;
    groupingCode: string | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;

    constructor(data?: IProfessionalDesignationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.comments = data["comments"];
            this.groupingCode = data["groupingCode"];
            this.name = data["name"];
            this.code = data["code"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProfessionalDesignationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProfessionalDesignationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comments"] = this.comments;
        data["groupingCode"] = this.groupingCode;
        data["name"] = this.name;
        data["code"] = this.code;
        data["id"] = this.id;
        return data; 
    }

    clone(): ProfessionalDesignationDto {
        const json = this.toJSON();
        let result = new ProfessionalDesignationDto();
        result.init(json);
        return result;
    }
}

export interface IProfessionalDesignationDto {
    comments: string | undefined;
    groupingCode: string | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfIListOfOrderSourceDto implements IAjaxResponseOfIListOfOrderSourceDto {
    result: OrderSourceDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfOrderSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(OrderSourceDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfOrderSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfOrderSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfOrderSourceDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfOrderSourceDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfOrderSourceDto {
    result: OrderSourceDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class OrderSourceDto implements IOrderSourceDto {
    orderSourceCode: string | undefined;
    orderSourceName: string | undefined;
    commentsText: string | undefined;
    electronicFlag: boolean | undefined;
    paperFlag: boolean | undefined;
    displaySequenceNbr: number | undefined;
    names: LocalizedValue[] | undefined;
    id: string | undefined;

    constructor(data?: IOrderSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderSourceCode = data["orderSourceCode"];
            this.orderSourceName = data["orderSourceName"];
            this.commentsText = data["commentsText"];
            this.electronicFlag = data["electronicFlag"];
            this.paperFlag = data["paperFlag"];
            this.displaySequenceNbr = data["displaySequenceNbr"];
            if (Array.isArray(data["names"])) {
                this.names = [] as any;
                for (let item of data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrderSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderSourceCode"] = this.orderSourceCode;
        data["orderSourceName"] = this.orderSourceName;
        data["commentsText"] = this.commentsText;
        data["electronicFlag"] = this.electronicFlag;
        data["paperFlag"] = this.paperFlag;
        data["displaySequenceNbr"] = this.displaySequenceNbr;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): OrderSourceDto {
        const json = this.toJSON();
        let result = new OrderSourceDto();
        result.init(json);
        return result;
    }
}

export interface IOrderSourceDto {
    orderSourceCode: string | undefined;
    orderSourceName: string | undefined;
    commentsText: string | undefined;
    electronicFlag: boolean | undefined;
    paperFlag: boolean | undefined;
    displaySequenceNbr: number | undefined;
    names: LocalizedValue[] | undefined;
    id: string | undefined;
}

export class AjaxResponseOfIListOfOrderSourceExceptionActionDto implements IAjaxResponseOfIListOfOrderSourceExceptionActionDto {
    result: OrderSourceExceptionActionDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfOrderSourceExceptionActionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(OrderSourceExceptionActionDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfOrderSourceExceptionActionDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfOrderSourceExceptionActionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfOrderSourceExceptionActionDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfOrderSourceExceptionActionDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfOrderSourceExceptionActionDto {
    result: OrderSourceExceptionActionDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class OrderSourceExceptionActionDto implements IOrderSourceExceptionActionDto {
    orderSourceId: string | undefined;
    orderSourceClassificationValueId: string | undefined;
    id: string | undefined;

    constructor(data?: IOrderSourceExceptionActionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderSourceId = data["orderSourceId"];
            this.orderSourceClassificationValueId = data["orderSourceClassificationValueId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrderSourceExceptionActionDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderSourceExceptionActionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderSourceId"] = this.orderSourceId;
        data["orderSourceClassificationValueId"] = this.orderSourceClassificationValueId;
        data["id"] = this.id;
        return data; 
    }

    clone(): OrderSourceExceptionActionDto {
        const json = this.toJSON();
        let result = new OrderSourceExceptionActionDto();
        result.init(json);
        return result;
    }
}

export interface IOrderSourceExceptionActionDto {
    orderSourceId: string | undefined;
    orderSourceClassificationValueId: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfIListOfDoNotHonorExclusionReasonDto implements IAjaxResponseOfIListOfDoNotHonorExclusionReasonDto {
    result: DoNotHonorExclusionReasonDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfDoNotHonorExclusionReasonDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(DoNotHonorExclusionReasonDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfDoNotHonorExclusionReasonDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfDoNotHonorExclusionReasonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfDoNotHonorExclusionReasonDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfDoNotHonorExclusionReasonDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfDoNotHonorExclusionReasonDto {
    result: DoNotHonorExclusionReasonDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class DoNotHonorExclusionReasonDto implements IDoNotHonorExclusionReasonDto {
    doNotHonorExclusionReasonCode: string | undefined;
    doNotHonorExclusionReasonName: string | undefined;
    ableToDeleteFlag: boolean | undefined;
    programLevelFlag: boolean | undefined;
    brandLevelFlag: boolean | undefined;
    productLevelFlag: boolean | undefined;
    selectableFlag: boolean | undefined;
    id: string | undefined;

    constructor(data?: IDoNotHonorExclusionReasonDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.doNotHonorExclusionReasonCode = data["doNotHonorExclusionReasonCode"];
            this.doNotHonorExclusionReasonName = data["doNotHonorExclusionReasonName"];
            this.ableToDeleteFlag = data["ableToDeleteFlag"];
            this.programLevelFlag = data["programLevelFlag"];
            this.brandLevelFlag = data["brandLevelFlag"];
            this.productLevelFlag = data["productLevelFlag"];
            this.selectableFlag = data["selectableFlag"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DoNotHonorExclusionReasonDto {
        data = typeof data === 'object' ? data : {};
        let result = new DoNotHonorExclusionReasonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doNotHonorExclusionReasonCode"] = this.doNotHonorExclusionReasonCode;
        data["doNotHonorExclusionReasonName"] = this.doNotHonorExclusionReasonName;
        data["ableToDeleteFlag"] = this.ableToDeleteFlag;
        data["programLevelFlag"] = this.programLevelFlag;
        data["brandLevelFlag"] = this.brandLevelFlag;
        data["productLevelFlag"] = this.productLevelFlag;
        data["selectableFlag"] = this.selectableFlag;
        data["id"] = this.id;
        return data; 
    }

    clone(): DoNotHonorExclusionReasonDto {
        const json = this.toJSON();
        let result = new DoNotHonorExclusionReasonDto();
        result.init(json);
        return result;
    }
}

export interface IDoNotHonorExclusionReasonDto {
    doNotHonorExclusionReasonCode: string | undefined;
    doNotHonorExclusionReasonName: string | undefined;
    ableToDeleteFlag: boolean | undefined;
    programLevelFlag: boolean | undefined;
    brandLevelFlag: boolean | undefined;
    productLevelFlag: boolean | undefined;
    selectableFlag: boolean | undefined;
    id: string | undefined;
}

export class AjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto implements IAjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto {
    result: DoNotHonorExclusionReasonSourceDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(DoNotHonorExclusionReasonSourceDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfDoNotHonorExclusionReasonSourceDto {
    result: DoNotHonorExclusionReasonSourceDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class DoNotHonorExclusionReasonSourceDto implements IDoNotHonorExclusionReasonSourceDto {
    doNotHonorExclusionReasonId: string | undefined;
    sourceClassificationValueId: string | undefined;
    id: string | undefined;

    constructor(data?: IDoNotHonorExclusionReasonSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.doNotHonorExclusionReasonId = data["doNotHonorExclusionReasonId"];
            this.sourceClassificationValueId = data["sourceClassificationValueId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DoNotHonorExclusionReasonSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new DoNotHonorExclusionReasonSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doNotHonorExclusionReasonId"] = this.doNotHonorExclusionReasonId;
        data["sourceClassificationValueId"] = this.sourceClassificationValueId;
        data["id"] = this.id;
        return data; 
    }

    clone(): DoNotHonorExclusionReasonSourceDto {
        const json = this.toJSON();
        let result = new DoNotHonorExclusionReasonSourceDto();
        result.init(json);
        return result;
    }
}

export interface IDoNotHonorExclusionReasonSourceDto {
    doNotHonorExclusionReasonId: string | undefined;
    sourceClassificationValueId: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfIListOfOrderStatusReasonTypeDto implements IAjaxResponseOfIListOfOrderStatusReasonTypeDto {
    result: OrderStatusReasonTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfOrderStatusReasonTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(OrderStatusReasonTypeDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfOrderStatusReasonTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfOrderStatusReasonTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfOrderStatusReasonTypeDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfOrderStatusReasonTypeDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfOrderStatusReasonTypeDto {
    result: OrderStatusReasonTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class OrderStatusReasonTypeDto implements IOrderStatusReasonTypeDto {
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;

    constructor(data?: IOrderStatusReasonTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.code = data["code"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrderStatusReasonTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderStatusReasonTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["id"] = this.id;
        return data; 
    }

    clone(): OrderStatusReasonTypeDto {
        const json = this.toJSON();
        let result = new OrderStatusReasonTypeDto();
        result.init(json);
        return result;
    }
}

export interface IOrderStatusReasonTypeDto {
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfIListOfOrderStatusDto implements IAjaxResponseOfIListOfOrderStatusDto {
    result: OrderStatusDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfOrderStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(OrderStatusDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfOrderStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfOrderStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfOrderStatusDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfOrderStatusDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfOrderStatusDto {
    result: OrderStatusDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class OrderStatusDto implements IOrderStatusDto {
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;

    constructor(data?: IOrderStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.code = data["code"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrderStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["id"] = this.id;
        return data; 
    }

    clone(): OrderStatusDto {
        const json = this.toJSON();
        let result = new OrderStatusDto();
        result.init(json);
        return result;
    }
}

export interface IOrderStatusDto {
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfIListOfCarrierDto implements IAjaxResponseOfIListOfCarrierDto {
    result: CarrierDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfCarrierDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(CarrierDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfCarrierDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfCarrierDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfCarrierDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfCarrierDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfCarrierDto {
    result: CarrierDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class CarrierDto implements ICarrierDto {
    trackingUrlFormat: string | undefined;
    carrierServiceTypes: CarrierServiceTypeDto[] | undefined;
    names: LocalizedValue[] | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;

    constructor(data?: ICarrierDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.trackingUrlFormat = data["trackingUrlFormat"];
            if (Array.isArray(data["carrierServiceTypes"])) {
                this.carrierServiceTypes = [] as any;
                for (let item of data["carrierServiceTypes"])
                    this.carrierServiceTypes.push(CarrierServiceTypeDto.fromJS(item));
            }
            if (Array.isArray(data["names"])) {
                this.names = [] as any;
                for (let item of data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
            this.name = data["name"];
            this.code = data["code"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CarrierDto {
        data = typeof data === 'object' ? data : {};
        let result = new CarrierDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["trackingUrlFormat"] = this.trackingUrlFormat;
        if (Array.isArray(this.carrierServiceTypes)) {
            data["carrierServiceTypes"] = [];
            for (let item of this.carrierServiceTypes)
                data["carrierServiceTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        data["name"] = this.name;
        data["code"] = this.code;
        data["id"] = this.id;
        return data; 
    }

    clone(): CarrierDto {
        const json = this.toJSON();
        let result = new CarrierDto();
        result.init(json);
        return result;
    }
}

export interface ICarrierDto {
    trackingUrlFormat: string | undefined;
    carrierServiceTypes: CarrierServiceTypeDto[] | undefined;
    names: LocalizedValue[] | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;
}

export class CarrierServiceTypeDto implements ICarrierServiceTypeDto {
    carrierServiceTypeCode: string | undefined;
    carrierServiceTypeName: string | undefined;
    carrierId: string | undefined;
    maxDaysToDeliver: number | undefined;
    names: LocalizedValue[] | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;

    constructor(data?: ICarrierServiceTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.carrierServiceTypeCode = data["carrierServiceTypeCode"];
            this.carrierServiceTypeName = data["carrierServiceTypeName"];
            this.carrierId = data["carrierId"];
            this.maxDaysToDeliver = data["maxDaysToDeliver"];
            if (Array.isArray(data["names"])) {
                this.names = [] as any;
                for (let item of data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
            this.name = data["name"];
            this.code = data["code"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CarrierServiceTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CarrierServiceTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["carrierServiceTypeCode"] = this.carrierServiceTypeCode;
        data["carrierServiceTypeName"] = this.carrierServiceTypeName;
        data["carrierId"] = this.carrierId;
        data["maxDaysToDeliver"] = this.maxDaysToDeliver;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        data["name"] = this.name;
        data["code"] = this.code;
        data["id"] = this.id;
        return data; 
    }

    clone(): CarrierServiceTypeDto {
        const json = this.toJSON();
        let result = new CarrierServiceTypeDto();
        result.init(json);
        return result;
    }
}

export interface ICarrierServiceTypeDto {
    carrierServiceTypeCode: string | undefined;
    carrierServiceTypeName: string | undefined;
    carrierId: string | undefined;
    maxDaysToDeliver: number | undefined;
    names: LocalizedValue[] | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfIListOfCarrierServiceTypeDto implements IAjaxResponseOfIListOfCarrierServiceTypeDto {
    result: CarrierServiceTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfCarrierServiceTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(CarrierServiceTypeDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfCarrierServiceTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfCarrierServiceTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfCarrierServiceTypeDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfCarrierServiceTypeDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfCarrierServiceTypeDto {
    result: CarrierServiceTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfIListOfCommunicationTypeDto implements IAjaxResponseOfIListOfCommunicationTypeDto {
    result: CommunicationTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfCommunicationTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["result"])) {
                this.result = [] as any;
                for (let item of data["result"])
                    this.result.push(CommunicationTypeDto.fromJS(item));
            }
            this.targetUrl = data["targetUrl"];
            this.success = data["success"];
            this.error = data["error"] ? ErrorInfo.fromJS(data["error"]) : <any>undefined;
            this.unAuthorizedRequest = data["unAuthorizedRequest"];
            (<any>this).__abp = data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfCommunicationTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfCommunicationTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfCommunicationTypeDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfCommunicationTypeDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfCommunicationTypeDto {
    result: CommunicationTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class CommunicationTypeDto implements ICommunicationTypeDto {
    communicationTypeClassificationValueId: string | undefined;
    orderFlag: boolean | undefined;
    communicationCategoryClassificationValueId: string | undefined;
    comments: string | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;

    constructor(data?: ICommunicationTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.communicationTypeClassificationValueId = data["communicationTypeClassificationValueId"];
            this.orderFlag = data["orderFlag"];
            this.communicationCategoryClassificationValueId = data["communicationCategoryClassificationValueId"];
            this.comments = data["comments"];
            this.name = data["name"];
            this.code = data["code"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CommunicationTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CommunicationTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["communicationTypeClassificationValueId"] = this.communicationTypeClassificationValueId;
        data["orderFlag"] = this.orderFlag;
        data["communicationCategoryClassificationValueId"] = this.communicationCategoryClassificationValueId;
        data["comments"] = this.comments;
        data["name"] = this.name;
        data["code"] = this.code;
        data["id"] = this.id;
        return data; 
    }

    clone(): CommunicationTypeDto {
        const json = this.toJSON();
        let result = new CommunicationTypeDto();
        result.init(json);
        return result;
    }
}

export interface ICommunicationTypeDto {
    communicationTypeClassificationValueId: string | undefined;
    orderFlag: boolean | undefined;
    communicationCategoryClassificationValueId: string | undefined;
    comments: string | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;
}

export class NormalizedReferenceDataDto implements INormalizedReferenceDataDto {
    createdDateUtc: Date | undefined;
    lastModifiedUtc: Date | undefined;
    originatingSchema: string | undefined;
    originatingTable: string | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;

    constructor(data?: INormalizedReferenceDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createdDateUtc = data["createdDateUtc"] ? new Date(data["createdDateUtc"].toString()) : <any>undefined;
            this.lastModifiedUtc = data["lastModifiedUtc"] ? new Date(data["lastModifiedUtc"].toString()) : <any>undefined;
            this.originatingSchema = data["originatingSchema"];
            this.originatingTable = data["originatingTable"];
            this.name = data["name"];
            this.code = data["code"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): NormalizedReferenceDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new NormalizedReferenceDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        data["lastModifiedUtc"] = this.lastModifiedUtc ? this.lastModifiedUtc.toISOString() : <any>undefined;
        data["originatingSchema"] = this.originatingSchema;
        data["originatingTable"] = this.originatingTable;
        data["name"] = this.name;
        data["code"] = this.code;
        data["id"] = this.id;
        return data; 
    }

    clone(): NormalizedReferenceDataDto {
        const json = this.toJSON();
        let result = new NormalizedReferenceDataDto();
        result.init(json);
        return result;
    }
}

export interface INormalizedReferenceDataDto {
    createdDateUtc: Date | undefined;
    lastModifiedUtc: Date | undefined;
    originatingSchema: string | undefined;
    originatingTable: string | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;
}

export enum LocalizedValueLanguage {
    _0 = 0,
    _1 = 1,
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}
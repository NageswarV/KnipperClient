/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const OM_DASHBOARD_API_BASE_URL = new InjectionToken<string>('OM_DASHBOARD_API_BASE_URL');

export class ServiceBaseConfig {
  public key: string;
}

export class ServiceBase {
  private readonly apiKey: string;
  private readonly apimHeaderName: string = 'Ocp-Apim-Subscription-Key';
  private readonly tenantIdHeaderName: string = 'TenantId';
  private readonly tenantIdLocalStorageKey: string = 'samplicity-dtp-current-client';
  private readonly idTokenKey: string = 'samplicity-id-token';

  constructor(config: ServiceBaseConfig) {
    this.apiKey = config.key;
  }

  protected transformOptions(options: any) {
    let headers: HttpHeaders = options.headers;

    if (this.apiKey) {
      headers = headers.append(this.apimHeaderName, this.apiKey);
    }

    const tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
    if (tenantId) {
      headers = headers.append(this.tenantIdHeaderName, tenantId);
    }

    const token = localStorage.getItem(this.idTokenKey);
    if (token) {
      headers = headers.append('Authorization', 'Bearer ' + token);
    }

    options.headers = headers;

    return Promise.resolve(options);
  }
}

@Injectable()
export class OrderManagementDashboard extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(ServiceBaseConfig) configuration: ServiceBaseConfig, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(OM_DASHBOARD_API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    getOrdersByStatusByMonthData(request: GetOrdersByStatusByMonthDataRequestDto | null | undefined): Observable<AjaxResponseOfChartDataResponseDto> {
        let url_ = this.baseUrl + "/api/services/app/Dashboard/GetOrdersByStatusByMonthData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrdersByStatusByMonthData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrdersByStatusByMonthData(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfChartDataResponseDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfChartDataResponseDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrdersByStatusByMonthData(response: HttpResponseBase): Observable<AjaxResponseOfChartDataResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfChartDataResponseDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfChartDataResponseDto>(<any>null);
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    getBIWeeklyOrdersData(request: GetOrdersByStatusByMonthDataRequestDto | null | undefined): Observable<AjaxResponseOfListOfChartDataResponseDto> {
        let url_ = this.baseUrl + "/api/services/app/Dashboard/GetBIWeeklyOrdersData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetBIWeeklyOrdersData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBIWeeklyOrdersData(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfChartDataResponseDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfChartDataResponseDto>><any>Observable.throw(response_);
        });
    }

    protected processGetBIWeeklyOrdersData(response: HttpResponseBase): Observable<AjaxResponseOfListOfChartDataResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfChartDataResponseDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfChartDataResponseDto>(<any>null);
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    getOrdersPastStatusTimeThresholdData(request: GetOrdersPastStatusTimeThresholdDataRequestDto | null | undefined): Observable<AjaxResponseOfChartDataResponseDto> {
        let url_ = this.baseUrl + "/api/services/app/Dashboard/GetOrdersPastStatusTimeThresholdData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrdersPastStatusTimeThresholdData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrdersPastStatusTimeThresholdData(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfChartDataResponseDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfChartDataResponseDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrdersPastStatusTimeThresholdData(response: HttpResponseBase): Observable<AjaxResponseOfChartDataResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfChartDataResponseDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfChartDataResponseDto>(<any>null);
    }

    /**
     * @param programId (optional) 
     * @param orderStatusId (optional) 
     * @return Success
     */
    searchOrdersPastStatusTimeThresholdDateList(programId: string | null | undefined, orderStatusId: string | null | undefined): Observable<AjaxResponseOfListOfSimpleOrderDto> {
        let url_ = this.baseUrl + "/api/services/app/Dashboard/SearchOrdersPastStatusTimeThresholdDateList?";
        if (programId !== undefined && programId !== null)
            url_ += "programId=" + encodeURIComponent("" + programId) + "&";
        if (orderStatusId !== undefined && orderStatusId !== null)
            url_ += "orderStatusId=" + encodeURIComponent("" + orderStatusId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchOrdersPastStatusTimeThresholdDateList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchOrdersPastStatusTimeThresholdDateList(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSimpleOrderDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSimpleOrderDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchOrdersPastStatusTimeThresholdDateList(response: HttpResponseBase): Observable<AjaxResponseOfListOfSimpleOrderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSimpleOrderDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSimpleOrderDto>(<any>null);
    }
}

export class GetOrdersByStatusByMonthDataRequestDto implements IGetOrdersByStatusByMonthDataRequestDto {
    programId: string | undefined;
    month: number | undefined;
    year: number | undefined;
    periodicStartDate: Date | undefined;
    periodicEndDate: Date | undefined;

    constructor(data?: IGetOrdersByStatusByMonthDataRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.month = _data["month"];
            this.year = _data["year"];
            this.periodicStartDate = _data["periodicStartDate"] ? new Date(_data["periodicStartDate"].toString()) : <any>undefined;
            this.periodicEndDate = _data["periodicEndDate"] ? new Date(_data["periodicEndDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOrdersByStatusByMonthDataRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetOrdersByStatusByMonthDataRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["month"] = this.month;
        data["year"] = this.year;
        data["periodicStartDate"] = this.periodicStartDate ? this.periodicStartDate.toISOString() : <any>undefined;
        data["periodicEndDate"] = this.periodicEndDate ? this.periodicEndDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): GetOrdersByStatusByMonthDataRequestDto {
        const json = this.toJSON();
        let result = new GetOrdersByStatusByMonthDataRequestDto();
        result.init(json);
        return result;
    }
}

export interface IGetOrdersByStatusByMonthDataRequestDto {
    programId: string | undefined;
    month: number | undefined;
    year: number | undefined;
    periodicStartDate: Date | undefined;
    periodicEndDate: Date | undefined;
}

export class AjaxResponseOfChartDataResponseDto implements IAjaxResponseOfChartDataResponseDto {
    result: ChartDataResponseDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfChartDataResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ChartDataResponseDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfChartDataResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfChartDataResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfChartDataResponseDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfChartDataResponseDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfChartDataResponseDto {
    result: ChartDataResponseDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ChartDataResponseDto implements IChartDataResponseDto {
    data: ChartDataDtoOfInt32 | undefined;

    constructor(data?: IChartDataResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? ChartDataDtoOfInt32.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ChartDataResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartDataResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }

    clone(): ChartDataResponseDto {
        const json = this.toJSON();
        let result = new ChartDataResponseDto();
        result.init(json);
        return result;
    }
}

export interface IChartDataResponseDto {
    data: ChartDataDtoOfInt32 | undefined;
}

export class ErrorInfo implements IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;

    constructor(data?: IErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            this.details = _data["details"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors.push(ValidationErrorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ErrorInfo {
        const json = this.toJSON();
        let result = new ErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;
}

export class ChartDataDtoOfInt32 implements IChartDataDtoOfInt32 {
    labels: ChartLabelsDto | undefined;
    datasets: ChartDataSetDtoOfInt32[] | undefined;

    constructor(data?: IChartDataDtoOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.labels = _data["labels"] ? ChartLabelsDto.fromJS(_data["labels"]) : <any>undefined;
            if (Array.isArray(_data["datasets"])) {
                this.datasets = [] as any;
                for (let item of _data["datasets"])
                    this.datasets.push(ChartDataSetDtoOfInt32.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChartDataDtoOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new ChartDataDtoOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["labels"] = this.labels ? this.labels.toJSON() : <any>undefined;
        if (Array.isArray(this.datasets)) {
            data["datasets"] = [];
            for (let item of this.datasets)
                data["datasets"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ChartDataDtoOfInt32 {
        const json = this.toJSON();
        let result = new ChartDataDtoOfInt32();
        result.init(json);
        return result;
    }
}

export interface IChartDataDtoOfInt32 {
    labels: ChartLabelsDto | undefined;
    datasets: ChartDataSetDtoOfInt32[] | undefined;
}

export class ValidationErrorInfo implements IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;

    constructor(data?: IValidationErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members.push(item);
            }
        }
    }

    static fromJS(data: any): ValidationErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }

    clone(): ValidationErrorInfo {
        const json = this.toJSON();
        let result = new ValidationErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;
}

export class ChartLabelsDto implements IChartLabelsDto {
    labels: ChartLabelDto[] | undefined;
    readonly dataMode: string | undefined;

    constructor(data?: IChartLabelsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["labels"])) {
                this.labels = [] as any;
                for (let item of _data["labels"])
                    this.labels.push(ChartLabelDto.fromJS(item));
            }
            (<any>this).dataMode = _data["dataMode"];
        }
    }

    static fromJS(data: any): ChartLabelsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartLabelsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.labels)) {
            data["labels"] = [];
            for (let item of this.labels)
                data["labels"].push(item.toJSON());
        }
        data["dataMode"] = this.dataMode;
        return data; 
    }

    clone(): ChartLabelsDto {
        const json = this.toJSON();
        let result = new ChartLabelsDto();
        result.init(json);
        return result;
    }
}

export interface IChartLabelsDto {
    labels: ChartLabelDto[] | undefined;
    dataMode: string | undefined;
}

export class ChartDataSetDtoOfInt32 implements IChartDataSetDtoOfInt32 {
    label: string | undefined;
    data: number[] | undefined;
    stack: string | undefined;

    constructor(data?: IChartDataSetDtoOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data.push(item);
            }
            this.stack = _data["stack"];
        }
    }

    static fromJS(data: any): ChartDataSetDtoOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new ChartDataSetDtoOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        data["stack"] = this.stack;
        return data; 
    }

    clone(): ChartDataSetDtoOfInt32 {
        const json = this.toJSON();
        let result = new ChartDataSetDtoOfInt32();
        result.init(json);
        return result;
    }
}

export interface IChartDataSetDtoOfInt32 {
    label: string | undefined;
    data: number[] | undefined;
    stack: string | undefined;
}

export class ChartLabelDto implements IChartLabelDto {
    label: string | undefined;
    id: string | undefined;
    code: string | undefined;
    startDateTime: Date | undefined;
    endDateTime: Date | undefined;
    dateTime: Date | undefined;

    constructor(data?: IChartLabelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.id = _data["id"];
            this.code = _data["code"];
            this.startDateTime = _data["startDateTime"] ? new Date(_data["startDateTime"].toString()) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
            this.dateTime = _data["dateTime"] ? new Date(_data["dateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ChartLabelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartLabelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["id"] = this.id;
        data["code"] = this.code;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        return data; 
    }

    clone(): ChartLabelDto {
        const json = this.toJSON();
        let result = new ChartLabelDto();
        result.init(json);
        return result;
    }
}

export interface IChartLabelDto {
    label: string | undefined;
    id: string | undefined;
    code: string | undefined;
    startDateTime: Date | undefined;
    endDateTime: Date | undefined;
    dateTime: Date | undefined;
}

export class AjaxResponseOfListOfChartDataResponseDto implements IAjaxResponseOfListOfChartDataResponseDto {
    result: ChartDataResponseDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfListOfChartDataResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(ChartDataResponseDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfChartDataResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfChartDataResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfListOfChartDataResponseDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfListOfChartDataResponseDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfListOfChartDataResponseDto {
    result: ChartDataResponseDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class GetOrdersPastStatusTimeThresholdDataRequestDto implements IGetOrdersPastStatusTimeThresholdDataRequestDto {
    programId: string | undefined;

    constructor(data?: IGetOrdersPastStatusTimeThresholdDataRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
        }
    }

    static fromJS(data: any): GetOrdersPastStatusTimeThresholdDataRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetOrdersPastStatusTimeThresholdDataRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        return data; 
    }

    clone(): GetOrdersPastStatusTimeThresholdDataRequestDto {
        const json = this.toJSON();
        let result = new GetOrdersPastStatusTimeThresholdDataRequestDto();
        result.init(json);
        return result;
    }
}

export interface IGetOrdersPastStatusTimeThresholdDataRequestDto {
    programId: string | undefined;
}

export class AjaxResponseOfListOfSimpleOrderDto implements IAjaxResponseOfListOfSimpleOrderDto {
    result: SimpleOrderDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfListOfSimpleOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(SimpleOrderDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfSimpleOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfSimpleOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfListOfSimpleOrderDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfListOfSimpleOrderDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfListOfSimpleOrderDto {
    result: SimpleOrderDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class SimpleOrderDto implements ISimpleOrderDto {
    id: string | undefined;
    orderId: string | undefined;
    orderPassedThresholdDate: Date | undefined;

    constructor(data?: ISimpleOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderId = _data["orderId"];
            this.orderPassedThresholdDate = _data["orderPassedThresholdDate"] ? new Date(_data["orderPassedThresholdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SimpleOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderId"] = this.orderId;
        data["orderPassedThresholdDate"] = this.orderPassedThresholdDate ? this.orderPassedThresholdDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): SimpleOrderDto {
        const json = this.toJSON();
        let result = new SimpleOrderDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleOrderDto {
    id: string | undefined;
    orderId: string | undefined;
    orderPassedThresholdDate: Date | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
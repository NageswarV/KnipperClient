/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
import { __decorate, __extends, __metadata, __param, __values } from "tslib";
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';
import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
export var OM_CLIENT_API_BASE_URL = new InjectionToken('OM_CLIENT_API_BASE_URL');
var ServiceBaseConfig = /** @class */ (function () {
    function ServiceBaseConfig() {
    }
    return ServiceBaseConfig;
}());
export { ServiceBaseConfig };
var ServiceBase = /** @class */ (function () {
    function ServiceBase(config) {
        this.apimHeaderName = 'Ocp-Apim-Subscription-Key';
        this.tenantIdHeaderName = 'TenantId';
        this.tenantIdLocalStorageKey = 'samplicity-dtp-current-client';
        this.idTokenKey = 'samplicity-id-token';
        this.apiKey = config.key;
    }
    ServiceBase.prototype.transformOptions = function (options) {
        var headers = options.headers;
        if (this.apiKey) {
            headers = headers.append(this.apimHeaderName, this.apiKey);
        }
        var tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
        if (tenantId) {
            headers = headers.append(this.tenantIdHeaderName, tenantId);
        }
        var token = localStorage.getItem(this.idTokenKey);
        if (token) {
            headers = headers.append('Authorization', 'Bearer ' + token);
        }
        options.headers = headers;
        return Promise.resolve(options);
    };
    return ServiceBase;
}());
export { ServiceBase };
var OrderManagementClient = /** @class */ (function (_super) {
    __extends(OrderManagementClient, _super);
    function OrderManagementClient(configuration, http, baseUrl) {
        var _this = _super.call(this, configuration) || this;
        _this.jsonParseReviver = undefined;
        _this.http = http;
        _this.baseUrl = baseUrl ? baseUrl : "";
        return _this;
    }
    /**
     * @return Success
     */
    OrderManagementClient.prototype.getFilesByTenantId = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantFile/GetFilesByTenantId";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("get", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processGetFilesByTenantId(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetFilesByTenantId(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    OrderManagementClient.prototype.processGetFilesByTenantId = function (response) {
        var e_1, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfIEnumerableOfTenantFileDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    OrderManagementClient = __decorate([
        Injectable(),
        __param(0, Inject(ServiceBaseConfig)), __param(1, Inject(HttpClient)), __param(2, Optional()), __param(2, Inject(OM_CLIENT_API_BASE_URL)),
        __metadata("design:paramtypes", [ServiceBaseConfig, HttpClient, String])
    ], OrderManagementClient);
    return OrderManagementClient;
}(ServiceBase));
export { OrderManagementClient };
var AjaxResponseOfIEnumerableOfTenantFileDto = /** @class */ (function () {
    function AjaxResponseOfIEnumerableOfTenantFileDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AjaxResponseOfIEnumerableOfTenantFileDto.prototype.init = function (_data) {
        var e_2, _a;
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [];
                try {
                    for (var _b = __values(_data["result"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.result.push(TenantFileDto.fromJS(item));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            this.__abp = _data["__abp"];
        }
    };
    AjaxResponseOfIEnumerableOfTenantFileDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AjaxResponseOfIEnumerableOfTenantFileDto();
        result.init(data);
        return result;
    };
    AjaxResponseOfIEnumerableOfTenantFileDto.prototype.toJSON = function (data) {
        var e_3, _a;
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            try {
                for (var _b = __values(this.result), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["result"].push(item.toJSON());
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data;
    };
    AjaxResponseOfIEnumerableOfTenantFileDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AjaxResponseOfIEnumerableOfTenantFileDto();
        result.init(json);
        return result;
    };
    return AjaxResponseOfIEnumerableOfTenantFileDto;
}());
export { AjaxResponseOfIEnumerableOfTenantFileDto };
var TenantFileDto = /** @class */ (function () {
    function TenantFileDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantFileDto.prototype.init = function (_data) {
        if (_data) {
            this.fileTypeId = _data["fileTypeId"];
            this.hasErrors = _data["hasErrors"];
            this.hasMissingFile = _data["hasMissingFile"];
            this.fileName = _data["fileName"];
            this.fileLocation = _data["fileLocation"];
            this.lastUpdatedDateTime = _data["lastUpdatedDateTime"] ? new Date(_data["lastUpdatedDateTime"].toString()) : undefined;
        }
    };
    TenantFileDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantFileDto();
        result.init(data);
        return result;
    };
    TenantFileDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["fileTypeId"] = this.fileTypeId;
        data["hasErrors"] = this.hasErrors;
        data["hasMissingFile"] = this.hasMissingFile;
        data["fileName"] = this.fileName;
        data["fileLocation"] = this.fileLocation;
        data["lastUpdatedDateTime"] = this.lastUpdatedDateTime ? this.lastUpdatedDateTime.toISOString() : undefined;
        return data;
    };
    TenantFileDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantFileDto();
        result.init(json);
        return result;
    };
    return TenantFileDto;
}());
export { TenantFileDto };
var ErrorInfo = /** @class */ (function () {
    function ErrorInfo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ErrorInfo.prototype.init = function (_data) {
        var e_4, _a;
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            this.details = _data["details"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [];
                try {
                    for (var _b = __values(_data["validationErrors"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.validationErrors.push(ValidationErrorInfo.fromJS(item));
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
    };
    ErrorInfo.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ErrorInfo();
        result.init(data);
        return result;
    };
    ErrorInfo.prototype.toJSON = function (data) {
        var e_5, _a;
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            try {
                for (var _b = __values(this.validationErrors), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["validationErrors"].push(item.toJSON());
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        return data;
    };
    ErrorInfo.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ErrorInfo();
        result.init(json);
        return result;
    };
    return ErrorInfo;
}());
export { ErrorInfo };
var ValidationErrorInfo = /** @class */ (function () {
    function ValidationErrorInfo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ValidationErrorInfo.prototype.init = function (_data) {
        var e_6, _a;
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["members"])) {
                this.members = [];
                try {
                    for (var _b = __values(_data["members"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.members.push(item);
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
            }
        }
    };
    ValidationErrorInfo.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ValidationErrorInfo();
        result.init(data);
        return result;
    };
    ValidationErrorInfo.prototype.toJSON = function (data) {
        var e_7, _a;
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            try {
                for (var _b = __values(this.members), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["members"].push(item);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        return data;
    };
    ValidationErrorInfo.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ValidationErrorInfo();
        result.init(json);
        return result;
    };
    return ValidationErrorInfo;
}());
export { ValidationErrorInfo };
var SwaggerException = /** @class */ (function (_super) {
    __extends(SwaggerException, _super);
    function SwaggerException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isSwaggerException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    SwaggerException.isSwaggerException = function (obj) {
        return obj.isSwaggerException === true;
    };
    return SwaggerException;
}(Error));
export { SwaggerException };
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}
function blobToText(blob) {
    return new Observable(function (observer) {
        if (!blob) {
            observer.next("");
            observer.complete();
        }
        else {
            var reader = new FileReader();
            reader.onload = function (event) {
                observer.next(event.target.result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
//# sourceMappingURL=om-client.js.map
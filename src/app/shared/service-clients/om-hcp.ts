/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.5.0.0 (NJsonSchema v10.1.15.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const OM_HCP_API_BASE_URL = new InjectionToken<string>('OM_HCP_API_BASE_URL');

export class ServiceBaseConfig {
  public key: string;
}

export class ServiceBase {
  private readonly apiKey: string;
  private readonly apimHeaderName: string = 'Ocp-Apim-Subscription-Key';
  private readonly tenantIdHeaderName: string = 'TenantId';
  private readonly tenantIdLocalStorageKey: string = 'samplicity-dtp-current-client';
  private readonly idTokenKey: string = 'samplicity-id-token';

  constructor(config: ServiceBaseConfig) {
    this.apiKey = config.key;
  }

  protected transformOptions(options: any) {
    let headers: HttpHeaders = options.headers;

    if (this.apiKey) {
      headers = headers.append(this.apimHeaderName, this.apiKey);
    }

    const tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
    if (tenantId) {
      headers = headers.append(this.tenantIdHeaderName, tenantId);
    }

    const token = localStorage.getItem(this.idTokenKey);
    if (token) {
      headers = headers.append('Authorization', 'Bearer ' + token);
    }

    options.headers = headers;

    return Promise.resolve(options);
  }
}

@Injectable()
export class OrderManagementHcp extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(ServiceBaseConfig) configuration: ServiceBaseConfig, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(OM_HCP_API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getHcp(id: string | null | undefined): Observable<AjaxResponseOfHcpDto> {
        let url_ = this.baseUrl + "/api/services/app/Hcp/GetHcp?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetHcp(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHcp(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfHcpDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfHcpDto>><any>Observable.throw(response_);
        });
    }

    protected processGetHcp(response: HttpResponseBase): Observable<AjaxResponseOfHcpDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfHcpDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfHcpDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @param orderId (optional) 
     * @return Success
     */
    getHcpWithProgramConfigConditional(id: string | null | undefined, orderId: string | null | undefined): Observable<AjaxResponseOfHcpDto> {
        let url_ = this.baseUrl + "/api/services/app/Hcp/GetHcpWithProgramConfigConditional?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (orderId !== undefined && orderId !== null)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetHcpWithProgramConfigConditional(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHcpWithProgramConfigConditional(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfHcpDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfHcpDto>><any>Observable.throw(response_);
        });
    }

    protected processGetHcpWithProgramConfigConditional(response: HttpResponseBase): Observable<AjaxResponseOfHcpDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfHcpDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfHcpDto>(<any>null);
    }

    /**
     * @return Success
     */
    getNewHcp(): Observable<AjaxResponseOfHcpDto> {
        let url_ = this.baseUrl + "/api/services/app/Hcp/GetNewHcp";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetNewHcp(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNewHcp(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfHcpDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfHcpDto>><any>Observable.throw(response_);
        });
    }

    protected processGetNewHcp(response: HttpResponseBase): Observable<AjaxResponseOfHcpDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfHcpDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfHcpDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchHcps(filter: HcpSearchFilterDto | null | undefined): Observable<AjaxResponseOfPagedResultOfHcpSearchDto> {
        let url_ = this.baseUrl + "/api/services/app/Hcp/SearchHcps";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchHcps(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchHcps(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPagedResultOfHcpSearchDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPagedResultOfHcpSearchDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchHcps(response: HttpResponseBase): Observable<AjaxResponseOfPagedResultOfHcpSearchDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPagedResultOfHcpSearchDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPagedResultOfHcpSearchDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateHcp(src: HcpDto | null | undefined): Observable<AjaxResponseOfHcpDto> {
        let url_ = this.baseUrl + "/api/services/app/Hcp/UpdateHcp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateHcp(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateHcp(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfHcpDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfHcpDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateHcp(response: HttpResponseBase): Observable<AjaxResponseOfHcpDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfHcpDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfHcpDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchDoNotHonorExclusions(filter: HcpDNHExclusionsSearchFilterDto | null | undefined): Observable<AjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto> {
        let url_ = this.baseUrl + "/api/services/app/HcpDNHExclusions/SearchDoNotHonorExclusions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchDoNotHonorExclusions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchDoNotHonorExclusions(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchDoNotHonorExclusions(response: HttpResponseBase): Observable<AjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    deleteDoNotHonorExclusion(dto: HcpDNHExclusionsDeleteDto | null | undefined): Observable<AjaxResponse> {
        let url_ = this.baseUrl + "/api/services/app/HcpDNHExclusions/DeleteDoNotHonorExclusion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processDeleteDoNotHonorExclusion(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDoNotHonorExclusion(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponse>><any>Observable.throw(response_);
        });
    }

    protected processDeleteDoNotHonorExclusion(response: HttpResponseBase): Observable<AjaxResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponse.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponse>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    createDoNotHonorExclusion(dto: HcpDNHExclusionDto | null | undefined): Observable<AjaxResponseOfHcpDNHExclusionDto> {
        let url_ = this.baseUrl + "/api/services/app/HcpDNHExclusions/CreateDoNotHonorExclusion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processCreateDoNotHonorExclusion(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDoNotHonorExclusion(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfHcpDNHExclusionDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfHcpDNHExclusionDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateDoNotHonorExclusion(response: HttpResponseBase): Observable<AjaxResponseOfHcpDNHExclusionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfHcpDNHExclusionDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfHcpDNHExclusionDto>(<any>null);
    }
}

export class AjaxResponseOfHcpDto implements IAjaxResponseOfHcpDto {
    result: HcpDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfHcpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? HcpDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfHcpDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfHcpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfHcpDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfHcpDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfHcpDto {
    result: HcpDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class HcpDto implements IHcpDto {
    id: string | undefined;
    /** Classification ID for the HCP suffix */
    suffixClassificationValueId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    primarySpecialtyClassificationValueId: string | undefined;
    secondarySpecialtyClassificationValueId: string | undefined;
    userProfileId: string | undefined;
    clientHcpId: string | undefined;
    oldClientHcpId: string | undefined;
    knipperHcpId: string | undefined;
    oldKnipperHcpId: string | undefined;
    firstName: string | undefined;
    middleName: string | undefined;
    lastName: string | undefined;
    knipperHcpCreateFlag: boolean | undefined;
    npiNbr: string | undefined;
    variableField1Text: string | undefined;
    variableField2Text: string | undefined;
    variableField3Text: string | undefined;
    srfExpirationDateIncludeFlag: boolean | undefined;
    deaIncludeFlag: boolean | undefined;
    specialtyIncludeFlag: boolean | undefined;
    sanIncludeFlag: boolean | undefined;
    professionalDesignationMdIncludeFlag: boolean | undefined;
    professionalDesignationDoIncludeFlag: boolean | undefined;
    professionalDesignationNpIncludeFlag: boolean | undefined;
    professionalDesignationPaIncludeFlag: boolean | undefined;
    professionalDesignationOtherIncludeFlag: boolean | undefined;
    contactMethods: HcpContactMethodDto[] | undefined;
    addresses: HcpAddressDto[] | undefined;
    professionalDesignations: HcpProfessionalDesignationDto[] | undefined;
    licenses: HcpLicenseDto[] | undefined;
    salesReps: HcpSalesRepDto[] | undefined;
    sourceText: string | undefined;
    sourceNoteText: string | undefined;
    sourceUpdateDateTime: Date | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IHcpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.suffixClassificationValueId = _data["suffixClassificationValueId"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
            this.primarySpecialtyClassificationValueId = _data["primarySpecialtyClassificationValueId"];
            this.secondarySpecialtyClassificationValueId = _data["secondarySpecialtyClassificationValueId"];
            this.userProfileId = _data["userProfileId"];
            this.clientHcpId = _data["clientHcpId"];
            this.oldClientHcpId = _data["oldClientHcpId"];
            this.knipperHcpId = _data["knipperHcpId"];
            this.oldKnipperHcpId = _data["oldKnipperHcpId"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.knipperHcpCreateFlag = _data["knipperHcpCreateFlag"];
            this.npiNbr = _data["npiNbr"];
            this.variableField1Text = _data["variableField1Text"];
            this.variableField2Text = _data["variableField2Text"];
            this.variableField3Text = _data["variableField3Text"];
            this.srfExpirationDateIncludeFlag = _data["srfExpirationDateIncludeFlag"];
            this.deaIncludeFlag = _data["deaIncludeFlag"];
            this.specialtyIncludeFlag = _data["specialtyIncludeFlag"];
            this.sanIncludeFlag = _data["sanIncludeFlag"];
            this.professionalDesignationMdIncludeFlag = _data["professionalDesignationMdIncludeFlag"];
            this.professionalDesignationDoIncludeFlag = _data["professionalDesignationDoIncludeFlag"];
            this.professionalDesignationNpIncludeFlag = _data["professionalDesignationNpIncludeFlag"];
            this.professionalDesignationPaIncludeFlag = _data["professionalDesignationPaIncludeFlag"];
            this.professionalDesignationOtherIncludeFlag = _data["professionalDesignationOtherIncludeFlag"];
            if (Array.isArray(_data["contactMethods"])) {
                this.contactMethods = [] as any;
                for (let item of _data["contactMethods"])
                    this.contactMethods.push(HcpContactMethodDto.fromJS(item));
            }
            if (Array.isArray(_data["addresses"])) {
                this.addresses = [] as any;
                for (let item of _data["addresses"])
                    this.addresses.push(HcpAddressDto.fromJS(item));
            }
            if (Array.isArray(_data["professionalDesignations"])) {
                this.professionalDesignations = [] as any;
                for (let item of _data["professionalDesignations"])
                    this.professionalDesignations.push(HcpProfessionalDesignationDto.fromJS(item));
            }
            if (Array.isArray(_data["licenses"])) {
                this.licenses = [] as any;
                for (let item of _data["licenses"])
                    this.licenses.push(HcpLicenseDto.fromJS(item));
            }
            if (Array.isArray(_data["salesReps"])) {
                this.salesReps = [] as any;
                for (let item of _data["salesReps"])
                    this.salesReps.push(HcpSalesRepDto.fromJS(item));
            }
            this.sourceText = _data["sourceText"];
            this.sourceNoteText = _data["sourceNoteText"];
            this.sourceUpdateDateTime = _data["sourceUpdateDateTime"] ? new Date(_data["sourceUpdateDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HcpDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["suffixClassificationValueId"] = this.suffixClassificationValueId;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        data["primarySpecialtyClassificationValueId"] = this.primarySpecialtyClassificationValueId;
        data["secondarySpecialtyClassificationValueId"] = this.secondarySpecialtyClassificationValueId;
        data["userProfileId"] = this.userProfileId;
        data["clientHcpId"] = this.clientHcpId;
        data["oldClientHcpId"] = this.oldClientHcpId;
        data["knipperHcpId"] = this.knipperHcpId;
        data["oldKnipperHcpId"] = this.oldKnipperHcpId;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["knipperHcpCreateFlag"] = this.knipperHcpCreateFlag;
        data["npiNbr"] = this.npiNbr;
        data["variableField1Text"] = this.variableField1Text;
        data["variableField2Text"] = this.variableField2Text;
        data["variableField3Text"] = this.variableField3Text;
        data["srfExpirationDateIncludeFlag"] = this.srfExpirationDateIncludeFlag;
        data["deaIncludeFlag"] = this.deaIncludeFlag;
        data["specialtyIncludeFlag"] = this.specialtyIncludeFlag;
        data["sanIncludeFlag"] = this.sanIncludeFlag;
        data["professionalDesignationMdIncludeFlag"] = this.professionalDesignationMdIncludeFlag;
        data["professionalDesignationDoIncludeFlag"] = this.professionalDesignationDoIncludeFlag;
        data["professionalDesignationNpIncludeFlag"] = this.professionalDesignationNpIncludeFlag;
        data["professionalDesignationPaIncludeFlag"] = this.professionalDesignationPaIncludeFlag;
        data["professionalDesignationOtherIncludeFlag"] = this.professionalDesignationOtherIncludeFlag;
        if (Array.isArray(this.contactMethods)) {
            data["contactMethods"] = [];
            for (let item of this.contactMethods)
                data["contactMethods"].push(item.toJSON());
        }
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (Array.isArray(this.professionalDesignations)) {
            data["professionalDesignations"] = [];
            for (let item of this.professionalDesignations)
                data["professionalDesignations"].push(item.toJSON());
        }
        if (Array.isArray(this.licenses)) {
            data["licenses"] = [];
            for (let item of this.licenses)
                data["licenses"].push(item.toJSON());
        }
        if (Array.isArray(this.salesReps)) {
            data["salesReps"] = [];
            for (let item of this.salesReps)
                data["salesReps"].push(item.toJSON());
        }
        data["sourceText"] = this.sourceText;
        data["sourceNoteText"] = this.sourceNoteText;
        data["sourceUpdateDateTime"] = this.sourceUpdateDateTime ? this.sourceUpdateDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): HcpDto {
        const json = this.toJSON();
        let result = new HcpDto();
        result.init(json);
        return result;
    }
}

export interface IHcpDto {
    id: string | undefined;
    /** Classification ID for the HCP suffix */
    suffixClassificationValueId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    primarySpecialtyClassificationValueId: string | undefined;
    secondarySpecialtyClassificationValueId: string | undefined;
    userProfileId: string | undefined;
    clientHcpId: string | undefined;
    oldClientHcpId: string | undefined;
    knipperHcpId: string | undefined;
    oldKnipperHcpId: string | undefined;
    firstName: string | undefined;
    middleName: string | undefined;
    lastName: string | undefined;
    knipperHcpCreateFlag: boolean | undefined;
    npiNbr: string | undefined;
    variableField1Text: string | undefined;
    variableField2Text: string | undefined;
    variableField3Text: string | undefined;
    srfExpirationDateIncludeFlag: boolean | undefined;
    deaIncludeFlag: boolean | undefined;
    specialtyIncludeFlag: boolean | undefined;
    sanIncludeFlag: boolean | undefined;
    professionalDesignationMdIncludeFlag: boolean | undefined;
    professionalDesignationDoIncludeFlag: boolean | undefined;
    professionalDesignationNpIncludeFlag: boolean | undefined;
    professionalDesignationPaIncludeFlag: boolean | undefined;
    professionalDesignationOtherIncludeFlag: boolean | undefined;
    contactMethods: HcpContactMethodDto[] | undefined;
    addresses: HcpAddressDto[] | undefined;
    professionalDesignations: HcpProfessionalDesignationDto[] | undefined;
    licenses: HcpLicenseDto[] | undefined;
    salesReps: HcpSalesRepDto[] | undefined;
    sourceText: string | undefined;
    sourceNoteText: string | undefined;
    sourceUpdateDateTime: Date | undefined;
    names: LocalizedValue[] | undefined;
}

export class ErrorInfo implements IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;

    constructor(data?: IErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            this.details = _data["details"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors.push(ValidationErrorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ErrorInfo {
        const json = this.toJSON();
        let result = new ErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;
}

export class HcpContactMethodDto implements IHcpContactMethodDto {
    hcpId: string | undefined;
    hcpAddressId: string | undefined;
    contactMethodTypeId: string | undefined;
    contactDetailText: string | undefined;
    contactDetailExtensionText: string | undefined;
    knipperCreateFlag: boolean | undefined;
    primaryContactMethodFlag: boolean | undefined;
    id: string | undefined;

    constructor(data?: IHcpContactMethodDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hcpId = _data["hcpId"];
            this.hcpAddressId = _data["hcpAddressId"];
            this.contactMethodTypeId = _data["contactMethodTypeId"];
            this.contactDetailText = _data["contactDetailText"];
            this.contactDetailExtensionText = _data["contactDetailExtensionText"];
            this.knipperCreateFlag = _data["knipperCreateFlag"];
            this.primaryContactMethodFlag = _data["primaryContactMethodFlag"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): HcpContactMethodDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpContactMethodDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hcpId"] = this.hcpId;
        data["hcpAddressId"] = this.hcpAddressId;
        data["contactMethodTypeId"] = this.contactMethodTypeId;
        data["contactDetailText"] = this.contactDetailText;
        data["contactDetailExtensionText"] = this.contactDetailExtensionText;
        data["knipperCreateFlag"] = this.knipperCreateFlag;
        data["primaryContactMethodFlag"] = this.primaryContactMethodFlag;
        data["id"] = this.id;
        return data; 
    }

    clone(): HcpContactMethodDto {
        const json = this.toJSON();
        let result = new HcpContactMethodDto();
        result.init(json);
        return result;
    }
}

export interface IHcpContactMethodDto {
    hcpId: string | undefined;
    hcpAddressId: string | undefined;
    contactMethodTypeId: string | undefined;
    contactDetailText: string | undefined;
    contactDetailExtensionText: string | undefined;
    knipperCreateFlag: boolean | undefined;
    primaryContactMethodFlag: boolean | undefined;
    id: string | undefined;
}

export class HcpAddressDto implements IHcpAddressDto {
    hcpId: string | undefined;
    stateCode: string | undefined;
    countryCode: string | undefined;
    address1Text: string | undefined;
    address2Text: string | undefined;
    address3Text: string | undefined;
    address4Text: string | undefined;
    cityName: string | undefined;
    zipCode: string | undefined;
    institutionAddressFlag: boolean | undefined;
    primaryAddressFlag: boolean | undefined;
    badAddressFlag: boolean | undefined;
    clientAddressId: string | undefined;
    companyName: string | undefined;
    san: string | undefined;
    groupPracticeName: string | undefined;
    sanExpirationDate: Date | undefined;
    activeFlag: boolean | undefined;
    sourceText: string | undefined;
    sourceNoteText: string | undefined;
    fileName: string | undefined;
    sourceUpdateDateTime: Date | undefined;
    deletionSourceDataTime: Date | undefined;
    deaNbr: string | undefined;
    contactMethods: HcpContactMethodDto[] | undefined;
    id: string | undefined;

    constructor(data?: IHcpAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hcpId = _data["hcpId"];
            this.stateCode = _data["stateCode"];
            this.countryCode = _data["countryCode"];
            this.address1Text = _data["address1Text"];
            this.address2Text = _data["address2Text"];
            this.address3Text = _data["address3Text"];
            this.address4Text = _data["address4Text"];
            this.cityName = _data["cityName"];
            this.zipCode = _data["zipCode"];
            this.institutionAddressFlag = _data["institutionAddressFlag"];
            this.primaryAddressFlag = _data["primaryAddressFlag"];
            this.badAddressFlag = _data["badAddressFlag"];
            this.clientAddressId = _data["clientAddressId"];
            this.companyName = _data["companyName"];
            this.san = _data["san"];
            this.groupPracticeName = _data["groupPracticeName"];
            this.sanExpirationDate = _data["sanExpirationDate"] ? new Date(_data["sanExpirationDate"].toString()) : <any>undefined;
            this.activeFlag = _data["activeFlag"];
            this.sourceText = _data["sourceText"];
            this.sourceNoteText = _data["sourceNoteText"];
            this.fileName = _data["fileName"];
            this.sourceUpdateDateTime = _data["sourceUpdateDateTime"] ? new Date(_data["sourceUpdateDateTime"].toString()) : <any>undefined;
            this.deletionSourceDataTime = _data["deletionSourceDataTime"] ? new Date(_data["deletionSourceDataTime"].toString()) : <any>undefined;
            this.deaNbr = _data["deaNbr"];
            if (Array.isArray(_data["contactMethods"])) {
                this.contactMethods = [] as any;
                for (let item of _data["contactMethods"])
                    this.contactMethods.push(HcpContactMethodDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): HcpAddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpAddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hcpId"] = this.hcpId;
        data["stateCode"] = this.stateCode;
        data["countryCode"] = this.countryCode;
        data["address1Text"] = this.address1Text;
        data["address2Text"] = this.address2Text;
        data["address3Text"] = this.address3Text;
        data["address4Text"] = this.address4Text;
        data["cityName"] = this.cityName;
        data["zipCode"] = this.zipCode;
        data["institutionAddressFlag"] = this.institutionAddressFlag;
        data["primaryAddressFlag"] = this.primaryAddressFlag;
        data["badAddressFlag"] = this.badAddressFlag;
        data["clientAddressId"] = this.clientAddressId;
        data["companyName"] = this.companyName;
        data["san"] = this.san;
        data["groupPracticeName"] = this.groupPracticeName;
        data["sanExpirationDate"] = this.sanExpirationDate ? this.sanExpirationDate.toISOString() : <any>undefined;
        data["activeFlag"] = this.activeFlag;
        data["sourceText"] = this.sourceText;
        data["sourceNoteText"] = this.sourceNoteText;
        data["fileName"] = this.fileName;
        data["sourceUpdateDateTime"] = this.sourceUpdateDateTime ? this.sourceUpdateDateTime.toISOString() : <any>undefined;
        data["deletionSourceDataTime"] = this.deletionSourceDataTime ? this.deletionSourceDataTime.toISOString() : <any>undefined;
        data["deaNbr"] = this.deaNbr;
        if (Array.isArray(this.contactMethods)) {
            data["contactMethods"] = [];
            for (let item of this.contactMethods)
                data["contactMethods"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): HcpAddressDto {
        const json = this.toJSON();
        let result = new HcpAddressDto();
        result.init(json);
        return result;
    }
}

export interface IHcpAddressDto {
    hcpId: string | undefined;
    stateCode: string | undefined;
    countryCode: string | undefined;
    address1Text: string | undefined;
    address2Text: string | undefined;
    address3Text: string | undefined;
    address4Text: string | undefined;
    cityName: string | undefined;
    zipCode: string | undefined;
    institutionAddressFlag: boolean | undefined;
    primaryAddressFlag: boolean | undefined;
    badAddressFlag: boolean | undefined;
    clientAddressId: string | undefined;
    companyName: string | undefined;
    san: string | undefined;
    groupPracticeName: string | undefined;
    sanExpirationDate: Date | undefined;
    activeFlag: boolean | undefined;
    sourceText: string | undefined;
    sourceNoteText: string | undefined;
    fileName: string | undefined;
    sourceUpdateDateTime: Date | undefined;
    deletionSourceDataTime: Date | undefined;
    deaNbr: string | undefined;
    contactMethods: HcpContactMethodDto[] | undefined;
    id: string | undefined;
}

export class HcpProfessionalDesignationDto implements IHcpProfessionalDesignationDto {
    hcpId: string | undefined;
    professionalDesignationId: string | undefined;
    primaryFlag: boolean | undefined;
    id: string | undefined;

    constructor(data?: IHcpProfessionalDesignationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hcpId = _data["hcpId"];
            this.professionalDesignationId = _data["professionalDesignationId"];
            this.primaryFlag = _data["primaryFlag"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): HcpProfessionalDesignationDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpProfessionalDesignationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hcpId"] = this.hcpId;
        data["professionalDesignationId"] = this.professionalDesignationId;
        data["primaryFlag"] = this.primaryFlag;
        data["id"] = this.id;
        return data; 
    }

    clone(): HcpProfessionalDesignationDto {
        const json = this.toJSON();
        let result = new HcpProfessionalDesignationDto();
        result.init(json);
        return result;
    }
}

export interface IHcpProfessionalDesignationDto {
    hcpId: string | undefined;
    professionalDesignationId: string | undefined;
    primaryFlag: boolean | undefined;
    id: string | undefined;
}

export class HcpLicenseDto implements IHcpLicenseDto {
    hcpId: string | undefined;
    stateCode: string | undefined;
    stateLicenseNbr: string | undefined;
    sampleEligibilityFlag: boolean | undefined;
    id: string | undefined;

    constructor(data?: IHcpLicenseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hcpId = _data["hcpId"];
            this.stateCode = _data["stateCode"];
            this.stateLicenseNbr = _data["stateLicenseNbr"];
            this.sampleEligibilityFlag = _data["sampleEligibilityFlag"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): HcpLicenseDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpLicenseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hcpId"] = this.hcpId;
        data["stateCode"] = this.stateCode;
        data["stateLicenseNbr"] = this.stateLicenseNbr;
        data["sampleEligibilityFlag"] = this.sampleEligibilityFlag;
        data["id"] = this.id;
        return data; 
    }

    clone(): HcpLicenseDto {
        const json = this.toJSON();
        let result = new HcpLicenseDto();
        result.init(json);
        return result;
    }
}

export interface IHcpLicenseDto {
    hcpId: string | undefined;
    stateCode: string | undefined;
    stateLicenseNbr: string | undefined;
    sampleEligibilityFlag: boolean | undefined;
    id: string | undefined;
}

export class HcpSalesRepDto implements IHcpSalesRepDto {
    salesRepFirstName: string | undefined;
    salesRepLastName: string | undefined;
    salesRepId: string | undefined;
    territoryCode: string | undefined;
    salesRepEmailAddress: string | undefined;
    salesRepPhoneNumbers: HcpSalesRepPhoneDto | undefined;
    applicableProgramNames: string[] | undefined;
    id: string | undefined;

    constructor(data?: IHcpSalesRepDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.salesRepFirstName = _data["salesRepFirstName"];
            this.salesRepLastName = _data["salesRepLastName"];
            this.salesRepId = _data["salesRepId"];
            this.territoryCode = _data["territoryCode"];
            this.salesRepEmailAddress = _data["salesRepEmailAddress"];
            this.salesRepPhoneNumbers = _data["salesRepPhoneNumbers"] ? HcpSalesRepPhoneDto.fromJS(_data["salesRepPhoneNumbers"]) : <any>undefined;
            if (Array.isArray(_data["applicableProgramNames"])) {
                this.applicableProgramNames = [] as any;
                for (let item of _data["applicableProgramNames"])
                    this.applicableProgramNames.push(item);
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): HcpSalesRepDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpSalesRepDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["salesRepFirstName"] = this.salesRepFirstName;
        data["salesRepLastName"] = this.salesRepLastName;
        data["salesRepId"] = this.salesRepId;
        data["territoryCode"] = this.territoryCode;
        data["salesRepEmailAddress"] = this.salesRepEmailAddress;
        data["salesRepPhoneNumbers"] = this.salesRepPhoneNumbers ? this.salesRepPhoneNumbers.toJSON() : <any>undefined;
        if (Array.isArray(this.applicableProgramNames)) {
            data["applicableProgramNames"] = [];
            for (let item of this.applicableProgramNames)
                data["applicableProgramNames"].push(item);
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): HcpSalesRepDto {
        const json = this.toJSON();
        let result = new HcpSalesRepDto();
        result.init(json);
        return result;
    }
}

export interface IHcpSalesRepDto {
    salesRepFirstName: string | undefined;
    salesRepLastName: string | undefined;
    salesRepId: string | undefined;
    territoryCode: string | undefined;
    salesRepEmailAddress: string | undefined;
    salesRepPhoneNumbers: HcpSalesRepPhoneDto | undefined;
    applicableProgramNames: string[] | undefined;
    id: string | undefined;
}

export class LocalizedValue implements ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;

    constructor(data?: ILocalizedValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LocalizedValue {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language;
        data["value"] = this.value;
        return data; 
    }

    clone(): LocalizedValue {
        const json = this.toJSON();
        let result = new LocalizedValue();
        result.init(json);
        return result;
    }
}

export interface ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;
}

export class ValidationErrorInfo implements IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;

    constructor(data?: IValidationErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members.push(item);
            }
        }
    }

    static fromJS(data: any): ValidationErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }

    clone(): ValidationErrorInfo {
        const json = this.toJSON();
        let result = new ValidationErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;
}

export class HcpSalesRepPhoneDto implements IHcpSalesRepPhoneDto {
    phoneNbr: string | undefined;
    phoneExtensionNbr: string | undefined;
    faxNbr: string | undefined;
    mobilePhoneNbr: string | undefined;

    constructor(data?: IHcpSalesRepPhoneDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.phoneNbr = _data["phoneNbr"];
            this.phoneExtensionNbr = _data["phoneExtensionNbr"];
            this.faxNbr = _data["faxNbr"];
            this.mobilePhoneNbr = _data["mobilePhoneNbr"];
        }
    }

    static fromJS(data: any): HcpSalesRepPhoneDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpSalesRepPhoneDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNbr"] = this.phoneNbr;
        data["phoneExtensionNbr"] = this.phoneExtensionNbr;
        data["faxNbr"] = this.faxNbr;
        data["mobilePhoneNbr"] = this.mobilePhoneNbr;
        return data; 
    }

    clone(): HcpSalesRepPhoneDto {
        const json = this.toJSON();
        let result = new HcpSalesRepPhoneDto();
        result.init(json);
        return result;
    }
}

export interface IHcpSalesRepPhoneDto {
    phoneNbr: string | undefined;
    phoneExtensionNbr: string | undefined;
    faxNbr: string | undefined;
    mobilePhoneNbr: string | undefined;
}

export class HcpSearchFilterDto implements IHcpSearchFilterDto {
    hcpLastName: string | undefined;
    hcpFirstName: string | undefined;
    hcpKId: string | undefined;
    clientTargetId: string | undefined;
    stateCode: string | undefined;
    zipCode: string | undefined;
    emailAddress: string | undefined;
    stateLicenseNumber: string | undefined;
    deaNumber: string | undefined;
    san: string | undefined;
    currentStatusClassificationValueIds: string[] | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: IHcpSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hcpLastName = _data["hcpLastName"];
            this.hcpFirstName = _data["hcpFirstName"];
            this.hcpKId = _data["hcpKId"];
            this.clientTargetId = _data["clientTargetId"];
            this.stateCode = _data["stateCode"];
            this.zipCode = _data["zipCode"];
            this.emailAddress = _data["emailAddress"];
            this.stateLicenseNumber = _data["stateLicenseNumber"];
            this.deaNumber = _data["deaNumber"];
            this.san = _data["san"];
            if (Array.isArray(_data["currentStatusClassificationValueIds"])) {
                this.currentStatusClassificationValueIds = [] as any;
                for (let item of _data["currentStatusClassificationValueIds"])
                    this.currentStatusClassificationValueIds.push(item);
            }
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): HcpSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hcpLastName"] = this.hcpLastName;
        data["hcpFirstName"] = this.hcpFirstName;
        data["hcpKId"] = this.hcpKId;
        data["clientTargetId"] = this.clientTargetId;
        data["stateCode"] = this.stateCode;
        data["zipCode"] = this.zipCode;
        data["emailAddress"] = this.emailAddress;
        data["stateLicenseNumber"] = this.stateLicenseNumber;
        data["deaNumber"] = this.deaNumber;
        data["san"] = this.san;
        if (Array.isArray(this.currentStatusClassificationValueIds)) {
            data["currentStatusClassificationValueIds"] = [];
            for (let item of this.currentStatusClassificationValueIds)
                data["currentStatusClassificationValueIds"].push(item);
        }
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): HcpSearchFilterDto {
        const json = this.toJSON();
        let result = new HcpSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface IHcpSearchFilterDto {
    hcpLastName: string | undefined;
    hcpFirstName: string | undefined;
    hcpKId: string | undefined;
    clientTargetId: string | undefined;
    stateCode: string | undefined;
    zipCode: string | undefined;
    emailAddress: string | undefined;
    stateLicenseNumber: string | undefined;
    deaNumber: string | undefined;
    san: string | undefined;
    currentStatusClassificationValueIds: string[] | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPagedResultOfHcpSearchDto implements IAjaxResponseOfPagedResultOfHcpSearchDto {
    result: PagedResultOfHcpSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPagedResultOfHcpSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfHcpSearchDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultOfHcpSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultOfHcpSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPagedResultOfHcpSearchDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPagedResultOfHcpSearchDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPagedResultOfHcpSearchDto {
    result: PagedResultOfHcpSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PagedResultOfHcpSearchDto implements IPagedResultOfHcpSearchDto {
    totalCount: number | undefined;
    items: HcpSearchDto[] | undefined;

    constructor(data?: IPagedResultOfHcpSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(HcpSearchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfHcpSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfHcpSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultOfHcpSearchDto {
        const json = this.toJSON();
        let result = new PagedResultOfHcpSearchDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultOfHcpSearchDto {
    totalCount: number | undefined;
    items: HcpSearchDto[] | undefined;
}

export class HcpSearchDto implements IHcpSearchDto {
    id: string | undefined;
    hcpName: string | undefined;
    hcpKId: string | undefined;
    primaryAddress: HcpAddressDto | undefined;
    emailAddress: string | undefined;
    primaryStateLicenseNumber: string | undefined;
    primaryDeaNumber: string | undefined;
    primarySan: string | undefined;
    hcpStatus: string | undefined;
    primaryProfessionalDesignation: string | undefined;
    clientTargetId: string | undefined;
    primaryPhoneNumber: string | undefined;
    primaryFaxNumber: string | undefined;
    nonPrimaryAddressCount: number | undefined;
    nonPrimaryStateLicenseNumberCount: number | undefined;
    nonPrimaryDeaNumberCount: number | undefined;
    nonPrimarySanCount: number | undefined;
    nonPrimaryProfessionalDesignationCount: number | undefined;
    nonPrimaryPhoneNumberCount: number | undefined;
    nonPrimaryFaxNumberCount: number | undefined;
    hcpFirstName: string | undefined;
    hcpLastName: string | undefined;
    stateLicenses: string | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IHcpSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.hcpName = _data["hcpName"];
            this.hcpKId = _data["hcpKId"];
            this.primaryAddress = _data["primaryAddress"] ? HcpAddressDto.fromJS(_data["primaryAddress"]) : <any>undefined;
            this.emailAddress = _data["emailAddress"];
            this.primaryStateLicenseNumber = _data["primaryStateLicenseNumber"];
            this.primaryDeaNumber = _data["primaryDeaNumber"];
            this.primarySan = _data["primarySan"];
            this.hcpStatus = _data["hcpStatus"];
            this.primaryProfessionalDesignation = _data["primaryProfessionalDesignation"];
            this.clientTargetId = _data["clientTargetId"];
            this.primaryPhoneNumber = _data["primaryPhoneNumber"];
            this.primaryFaxNumber = _data["primaryFaxNumber"];
            this.nonPrimaryAddressCount = _data["nonPrimaryAddressCount"];
            this.nonPrimaryStateLicenseNumberCount = _data["nonPrimaryStateLicenseNumberCount"];
            this.nonPrimaryDeaNumberCount = _data["nonPrimaryDeaNumberCount"];
            this.nonPrimarySanCount = _data["nonPrimarySanCount"];
            this.nonPrimaryProfessionalDesignationCount = _data["nonPrimaryProfessionalDesignationCount"];
            this.nonPrimaryPhoneNumberCount = _data["nonPrimaryPhoneNumberCount"];
            this.nonPrimaryFaxNumberCount = _data["nonPrimaryFaxNumberCount"];
            this.hcpFirstName = _data["hcpFirstName"];
            this.hcpLastName = _data["hcpLastName"];
            this.stateLicenses = _data["stateLicenses"];
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HcpSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hcpName"] = this.hcpName;
        data["hcpKId"] = this.hcpKId;
        data["primaryAddress"] = this.primaryAddress ? this.primaryAddress.toJSON() : <any>undefined;
        data["emailAddress"] = this.emailAddress;
        data["primaryStateLicenseNumber"] = this.primaryStateLicenseNumber;
        data["primaryDeaNumber"] = this.primaryDeaNumber;
        data["primarySan"] = this.primarySan;
        data["hcpStatus"] = this.hcpStatus;
        data["primaryProfessionalDesignation"] = this.primaryProfessionalDesignation;
        data["clientTargetId"] = this.clientTargetId;
        data["primaryPhoneNumber"] = this.primaryPhoneNumber;
        data["primaryFaxNumber"] = this.primaryFaxNumber;
        data["nonPrimaryAddressCount"] = this.nonPrimaryAddressCount;
        data["nonPrimaryStateLicenseNumberCount"] = this.nonPrimaryStateLicenseNumberCount;
        data["nonPrimaryDeaNumberCount"] = this.nonPrimaryDeaNumberCount;
        data["nonPrimarySanCount"] = this.nonPrimarySanCount;
        data["nonPrimaryProfessionalDesignationCount"] = this.nonPrimaryProfessionalDesignationCount;
        data["nonPrimaryPhoneNumberCount"] = this.nonPrimaryPhoneNumberCount;
        data["nonPrimaryFaxNumberCount"] = this.nonPrimaryFaxNumberCount;
        data["hcpFirstName"] = this.hcpFirstName;
        data["hcpLastName"] = this.hcpLastName;
        data["stateLicenses"] = this.stateLicenses;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): HcpSearchDto {
        const json = this.toJSON();
        let result = new HcpSearchDto();
        result.init(json);
        return result;
    }
}

export interface IHcpSearchDto {
    id: string | undefined;
    hcpName: string | undefined;
    hcpKId: string | undefined;
    primaryAddress: HcpAddressDto | undefined;
    emailAddress: string | undefined;
    primaryStateLicenseNumber: string | undefined;
    primaryDeaNumber: string | undefined;
    primarySan: string | undefined;
    hcpStatus: string | undefined;
    primaryProfessionalDesignation: string | undefined;
    clientTargetId: string | undefined;
    primaryPhoneNumber: string | undefined;
    primaryFaxNumber: string | undefined;
    nonPrimaryAddressCount: number | undefined;
    nonPrimaryStateLicenseNumberCount: number | undefined;
    nonPrimaryDeaNumberCount: number | undefined;
    nonPrimarySanCount: number | undefined;
    nonPrimaryProfessionalDesignationCount: number | undefined;
    nonPrimaryPhoneNumberCount: number | undefined;
    nonPrimaryFaxNumberCount: number | undefined;
    hcpFirstName: string | undefined;
    hcpLastName: string | undefined;
    stateLicenses: string | undefined;
    names: LocalizedValue[] | undefined;
}

export class HcpDNHExclusionsSearchFilterDto implements IHcpDNHExclusionsSearchFilterDto {
    hcpFirstName: string | undefined;
    hcpLastName: string | undefined;
    hcpKidNumber: string | undefined;
    clientTargetId: string | undefined;
    doNotHonorExclusionReasonIds: string[] | undefined;
    programName: string | undefined;
    jobNumber: string | undefined;
    brandName: string | undefined;
    productName: string | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: IHcpDNHExclusionsSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hcpFirstName = _data["hcpFirstName"];
            this.hcpLastName = _data["hcpLastName"];
            this.hcpKidNumber = _data["hcpKidNumber"];
            this.clientTargetId = _data["clientTargetId"];
            if (Array.isArray(_data["doNotHonorExclusionReasonIds"])) {
                this.doNotHonorExclusionReasonIds = [] as any;
                for (let item of _data["doNotHonorExclusionReasonIds"])
                    this.doNotHonorExclusionReasonIds.push(item);
            }
            this.programName = _data["programName"];
            this.jobNumber = _data["jobNumber"];
            this.brandName = _data["brandName"];
            this.productName = _data["productName"];
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): HcpDNHExclusionsSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpDNHExclusionsSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hcpFirstName"] = this.hcpFirstName;
        data["hcpLastName"] = this.hcpLastName;
        data["hcpKidNumber"] = this.hcpKidNumber;
        data["clientTargetId"] = this.clientTargetId;
        if (Array.isArray(this.doNotHonorExclusionReasonIds)) {
            data["doNotHonorExclusionReasonIds"] = [];
            for (let item of this.doNotHonorExclusionReasonIds)
                data["doNotHonorExclusionReasonIds"].push(item);
        }
        data["programName"] = this.programName;
        data["jobNumber"] = this.jobNumber;
        data["brandName"] = this.brandName;
        data["productName"] = this.productName;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): HcpDNHExclusionsSearchFilterDto {
        const json = this.toJSON();
        let result = new HcpDNHExclusionsSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface IHcpDNHExclusionsSearchFilterDto {
    hcpFirstName: string | undefined;
    hcpLastName: string | undefined;
    hcpKidNumber: string | undefined;
    clientTargetId: string | undefined;
    doNotHonorExclusionReasonIds: string[] | undefined;
    programName: string | undefined;
    jobNumber: string | undefined;
    brandName: string | undefined;
    productName: string | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto implements IAjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto {
    result: PagedResultOfHcpDNHExclusionsSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfHcpDNHExclusionsSearchDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPagedResultOfHcpDNHExclusionsSearchDto {
    result: PagedResultOfHcpDNHExclusionsSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PagedResultOfHcpDNHExclusionsSearchDto implements IPagedResultOfHcpDNHExclusionsSearchDto {
    totalCount: number | undefined;
    items: HcpDNHExclusionsSearchDto[] | undefined;

    constructor(data?: IPagedResultOfHcpDNHExclusionsSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(HcpDNHExclusionsSearchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfHcpDNHExclusionsSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfHcpDNHExclusionsSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultOfHcpDNHExclusionsSearchDto {
        const json = this.toJSON();
        let result = new PagedResultOfHcpDNHExclusionsSearchDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultOfHcpDNHExclusionsSearchDto {
    totalCount: number | undefined;
    items: HcpDNHExclusionsSearchDto[] | undefined;
}

export class HcpDNHExclusionsSearchDto implements IHcpDNHExclusionsSearchDto {
    id: string | undefined;
    hcpName: string | undefined;
    hcpKId: string | undefined;
    clientTargetId: string | undefined;
    reasonId: string | undefined;
    brandName: string | undefined;
    program: string | undefined;
    product: string | undefined;
    dateAdded: Date | undefined;
    dateRequested: Date | undefined;
    source: string | undefined;
    comment: string | undefined;
    attachmentLocation: string | undefined;
    attachmentName: string | undefined;
    newFlag: boolean | undefined;

    constructor(data?: IHcpDNHExclusionsSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.hcpName = _data["hcpName"];
            this.hcpKId = _data["hcpKId"];
            this.clientTargetId = _data["clientTargetId"];
            this.reasonId = _data["reasonId"];
            this.brandName = _data["brandName"];
            this.program = _data["program"];
            this.product = _data["product"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.dateRequested = _data["dateRequested"] ? new Date(_data["dateRequested"].toString()) : <any>undefined;
            this.source = _data["source"];
            this.comment = _data["comment"];
            this.attachmentLocation = _data["attachmentLocation"];
            this.attachmentName = _data["attachmentName"];
            this.newFlag = _data["newFlag"];
        }
    }

    static fromJS(data: any): HcpDNHExclusionsSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpDNHExclusionsSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hcpName"] = this.hcpName;
        data["hcpKId"] = this.hcpKId;
        data["clientTargetId"] = this.clientTargetId;
        data["reasonId"] = this.reasonId;
        data["brandName"] = this.brandName;
        data["program"] = this.program;
        data["product"] = this.product;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["dateRequested"] = this.dateRequested ? this.dateRequested.toISOString() : <any>undefined;
        data["source"] = this.source;
        data["comment"] = this.comment;
        data["attachmentLocation"] = this.attachmentLocation;
        data["attachmentName"] = this.attachmentName;
        data["newFlag"] = this.newFlag;
        return data; 
    }

    clone(): HcpDNHExclusionsSearchDto {
        const json = this.toJSON();
        let result = new HcpDNHExclusionsSearchDto();
        result.init(json);
        return result;
    }
}

export interface IHcpDNHExclusionsSearchDto {
    id: string | undefined;
    hcpName: string | undefined;
    hcpKId: string | undefined;
    clientTargetId: string | undefined;
    reasonId: string | undefined;
    brandName: string | undefined;
    program: string | undefined;
    product: string | undefined;
    dateAdded: Date | undefined;
    dateRequested: Date | undefined;
    source: string | undefined;
    comment: string | undefined;
    attachmentLocation: string | undefined;
    attachmentName: string | undefined;
    newFlag: boolean | undefined;
}

export class HcpDNHExclusionsDeleteDto implements IHcpDNHExclusionsDeleteDto {
    id: string | undefined;
    reason: string | undefined;

    constructor(data?: IHcpDNHExclusionsDeleteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): HcpDNHExclusionsDeleteDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpDNHExclusionsDeleteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["reason"] = this.reason;
        return data; 
    }

    clone(): HcpDNHExclusionsDeleteDto {
        const json = this.toJSON();
        let result = new HcpDNHExclusionsDeleteDto();
        result.init(json);
        return result;
    }
}

export interface IHcpDNHExclusionsDeleteDto {
    id: string | undefined;
    reason: string | undefined;
}

export class AjaxResponse implements IAjaxResponse {
    result: any | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponse {
        const json = this.toJSON();
        let result = new AjaxResponse();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponse {
    result: any | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class HcpDNHExclusionDto implements IHcpDNHExclusionDto {
    id: string | undefined;
    hcpId: string | undefined;
    reasonId: string | undefined;
    productGroupId: string | undefined;
    programId: string | undefined;
    productId: string | undefined;
    dateAdded: Date | undefined;
    dateRequested: Date | undefined;
    source: string | undefined;
    comment: string | undefined;
    attachment: FileUpload | undefined;
    newFlag: boolean | undefined;

    constructor(data?: IHcpDNHExclusionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.hcpId = _data["hcpId"];
            this.reasonId = _data["reasonId"];
            this.productGroupId = _data["productGroupId"];
            this.programId = _data["programId"];
            this.productId = _data["productId"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.dateRequested = _data["dateRequested"] ? new Date(_data["dateRequested"].toString()) : <any>undefined;
            this.source = _data["source"];
            this.comment = _data["comment"];
            this.attachment = _data["attachment"] ? FileUpload.fromJS(_data["attachment"]) : <any>undefined;
            this.newFlag = _data["newFlag"];
        }
    }

    static fromJS(data: any): HcpDNHExclusionDto {
        data = typeof data === 'object' ? data : {};
        let result = new HcpDNHExclusionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hcpId"] = this.hcpId;
        data["reasonId"] = this.reasonId;
        data["productGroupId"] = this.productGroupId;
        data["programId"] = this.programId;
        data["productId"] = this.productId;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["dateRequested"] = this.dateRequested ? this.dateRequested.toISOString() : <any>undefined;
        data["source"] = this.source;
        data["comment"] = this.comment;
        data["attachment"] = this.attachment ? this.attachment.toJSON() : <any>undefined;
        data["newFlag"] = this.newFlag;
        return data; 
    }

    clone(): HcpDNHExclusionDto {
        const json = this.toJSON();
        let result = new HcpDNHExclusionDto();
        result.init(json);
        return result;
    }
}

export interface IHcpDNHExclusionDto {
    id: string | undefined;
    hcpId: string | undefined;
    reasonId: string | undefined;
    productGroupId: string | undefined;
    programId: string | undefined;
    productId: string | undefined;
    dateAdded: Date | undefined;
    dateRequested: Date | undefined;
    source: string | undefined;
    comment: string | undefined;
    attachment: FileUpload | undefined;
    newFlag: boolean | undefined;
}

export class FileUpload implements IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    duplicateFileName: boolean | undefined;

    constructor(data?: IFileUpload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileDescription = _data["fileDescription"];
            this.fileType = _data["fileType"];
            this.base64FileContent = _data["base64FileContent"];
            this.location = _data["location"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.newFlag = _data["newFlag"];
            this.duplicateFileName = _data["duplicateFileName"];
        }
    }

    static fromJS(data: any): FileUpload {
        data = typeof data === 'object' ? data : {};
        let result = new FileUpload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileDescription"] = this.fileDescription;
        data["fileType"] = this.fileType;
        data["base64FileContent"] = this.base64FileContent;
        data["location"] = this.location;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["newFlag"] = this.newFlag;
        data["duplicateFileName"] = this.duplicateFileName;
        return data; 
    }

    clone(): FileUpload {
        const json = this.toJSON();
        let result = new FileUpload();
        result.init(json);
        return result;
    }
}

export interface IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    duplicateFileName: boolean | undefined;
}

export class AjaxResponseOfHcpDNHExclusionDto implements IAjaxResponseOfHcpDNHExclusionDto {
    result: HcpDNHExclusionDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfHcpDNHExclusionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? HcpDNHExclusionDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfHcpDNHExclusionDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfHcpDNHExclusionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfHcpDNHExclusionDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfHcpDNHExclusionDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfHcpDNHExclusionDto {
    result: HcpDNHExclusionDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export enum LocalizedValueLanguage {
    _0 = 0,
    _1 = 1,
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const OM_PROGRAM_API_BASE_URL = new InjectionToken<string>('OM_PROGRAM_API_BASE_URL');

export class ServiceBaseConfig {
  public key: string;
}

export class ServiceBase {
  private readonly apiKey: string;
  private readonly apimHeaderName: string = 'Ocp-Apim-Subscription-Key';
  private readonly tenantIdHeaderName: string = 'TenantId';
  private readonly tenantIdLocalStorageKey: string = 'samplicity-dtp-current-client';
  private readonly idTokenKey: string = 'samplicity-id-token';

  constructor(config: ServiceBaseConfig) {
    this.apiKey = config.key;
  }

  protected transformOptions(options: any) {
    let headers: HttpHeaders = options.headers;

    if (this.apiKey) {
      headers = headers.append(this.apimHeaderName, this.apiKey);
    }

    const tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
    if (tenantId) {
      headers = headers.append(this.tenantIdHeaderName, tenantId);
    }

    const token = localStorage.getItem(this.idTokenKey);
    if (token) {
      headers = headers.append('Authorization', 'Bearer ' + token);
    }

    options.headers = headers;

    return Promise.resolve(options);
  }
}

@Injectable()
export class OrderManagementProgram extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(ServiceBaseConfig) configuration: ServiceBaseConfig, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(OM_PROGRAM_API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param allocationId (optional) 
     * @param allocationType (optional) 
     * @return Success
     */
    getActiveAllocationDetails(allocationId: string | null | undefined, allocationType: string | null | undefined): Observable<AjaxResponseOfIListOfAllocationDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetActiveAllocationDetails?";
        if (allocationId !== undefined && allocationId !== null)
            url_ += "allocationId=" + encodeURIComponent("" + allocationId) + "&";
        if (allocationType !== undefined && allocationType !== null)
            url_ += "allocationType=" + encodeURIComponent("" + allocationType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetActiveAllocationDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActiveAllocationDetails(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfAllocationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfAllocationDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActiveAllocationDetails(response: HttpResponseBase): Observable<AjaxResponseOfIListOfAllocationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfAllocationDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfAllocationDto>(<any>null);
    }

    /**
     * @param tenantId (optional) 
     * @return Success
     */
    hasActivePrograms(tenantId: string | null | undefined): Observable<AjaxResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/services/app/Program/HasActivePrograms?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processHasActivePrograms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHasActivePrograms(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(response_);
        });
    }

    protected processHasActivePrograms(response: HttpResponseBase): Observable<AjaxResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfBoolean.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfBoolean>(<any>null);
    }

    /**
     * @return Success
     */
    getAllPrograms(): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetAllPrograms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetAllPrograms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPrograms(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllPrograms(response: HttpResponseBase): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSimpleProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSimpleProgramDto>(<any>null);
    }

    /**
     * @return Success
     */
    getAllProgramsIncludingFlags(): Observable<AjaxResponseOfListOfSimpleProgramIncludeFlagDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetAllProgramsIncludingFlags";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetAllProgramsIncludingFlags(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllProgramsIncludingFlags(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSimpleProgramIncludeFlagDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSimpleProgramIncludeFlagDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllProgramsIncludingFlags(response: HttpResponseBase): Observable<AjaxResponseOfListOfSimpleProgramIncludeFlagDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSimpleProgramIncludeFlagDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSimpleProgramIncludeFlagDto>(<any>null);
    }

    /**
     * @return Success
     */
    getActivePrograms(): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetActivePrograms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetActivePrograms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActivePrograms(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActivePrograms(response: HttpResponseBase): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSimpleProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSimpleProgramDto>(<any>null);
    }

    /**
     * @param brandId (optional) 
     * @return Success
     */
    getActiveProgramsByBrandId(brandId: string | null | undefined): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetActiveProgramsByBrandId?";
        if (brandId !== undefined && brandId !== null)
            url_ += "brandId=" + encodeURIComponent("" + brandId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetActiveProgramsByBrandId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActiveProgramsByBrandId(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActiveProgramsByBrandId(response: HttpResponseBase): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSimpleProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSimpleProgramDto>(<any>null);
    }

    /**
     * @return Success
     */
    getActiveOrShuttingDownPrograms(): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetActiveOrShuttingDownPrograms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetActiveOrShuttingDownPrograms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActiveOrShuttingDownPrograms(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActiveOrShuttingDownPrograms(response: HttpResponseBase): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSimpleProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSimpleProgramDto>(<any>null);
    }

    /**
     * @return Success
     */
    getGenerateOfferPrograms(): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetGenerateOfferPrograms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetGenerateOfferPrograms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGenerateOfferPrograms(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processGetGenerateOfferPrograms(response: HttpResponseBase): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSimpleProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSimpleProgramDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUploadOfferPrograms(): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetUploadOfferPrograms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetUploadOfferPrograms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUploadOfferPrograms(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUploadOfferPrograms(response: HttpResponseBase): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSimpleProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSimpleProgramDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUploadOrderPrograms(): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetUploadOrderPrograms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetUploadOrderPrograms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUploadOrderPrograms(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSimpleProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUploadOrderPrograms(response: HttpResponseBase): Observable<AjaxResponseOfListOfSimpleProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSimpleProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSimpleProgramDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchPrograms(filter: ProgramSearchFilterDto | null | undefined): Observable<AjaxResponseOfPagedResultOfProgramSearchDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/SearchPrograms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchPrograms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchPrograms(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPagedResultOfProgramSearchDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPagedResultOfProgramSearchDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchPrograms(response: HttpResponseBase): Observable<AjaxResponseOfPagedResultOfProgramSearchDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPagedResultOfProgramSearchDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPagedResultOfProgramSearchDto>(<any>null);
    }

    /**
     * @return Success
     */
    getClientProjects(): Observable<AjaxResponseOfIListOfPmsProjectDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetClientProjects";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetClientProjects(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClientProjects(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfPmsProjectDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfPmsProjectDto>><any>Observable.throw(response_);
        });
    }

    protected processGetClientProjects(response: HttpResponseBase): Observable<AjaxResponseOfIListOfPmsProjectDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfPmsProjectDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfPmsProjectDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    createProgram(dto: ProgramSetupDto | null | undefined): Observable<AjaxResponseOfProgramSetupDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/CreateProgram";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processCreateProgram(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateProgram(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProgramSetupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProgramSetupDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateProgram(response: HttpResponseBase): Observable<AjaxResponseOfProgramSetupDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProgramSetupDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProgramSetupDto>(<any>null);
    }

    /**
     * @param programConfigId (optional) 
     * @return Success
     */
    checkProgramActivationScheduled(programConfigId: string | null | undefined): Observable<AjaxResponseOfProgramScheduledDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/CheckProgramActivationScheduled?";
        if (programConfigId !== undefined && programConfigId !== null)
            url_ += "programConfigId=" + encodeURIComponent("" + programConfigId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processCheckProgramActivationScheduled(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckProgramActivationScheduled(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProgramScheduledDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProgramScheduledDto>><any>Observable.throw(response_);
        });
    }

    protected processCheckProgramActivationScheduled(response: HttpResponseBase): Observable<AjaxResponseOfProgramScheduledDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProgramScheduledDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProgramScheduledDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @param programConfigId (optional) 
     * @return Success
     */
    getProgram(id: string | null | undefined, programConfigId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgram?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (programConfigId !== undefined && programConfigId !== null)
            url_ += "programConfigId=" + encodeURIComponent("" + programConfigId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgram(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgram(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgram(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getProgramReference(id: string | null | undefined): Observable<AjaxResponseOfProgramReferenceDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramReference?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramReference(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramReference(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProgramReferenceDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProgramReferenceDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramReference(response: HttpResponseBase): Observable<AjaxResponseOfProgramReferenceDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProgramReferenceDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProgramReferenceDto>(<any>null);
    }

    /**
     * @param programId (optional) 
     * @param numberOfSrfs (optional) 
     * @return Success
     */
    generateBlankSrfs(programId: string | null | undefined, numberOfSrfs: number | null | undefined): Observable<AjaxResponseOfBlankSrfGenerationResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GenerateBlankSrfs?";
        if (programId !== undefined && programId !== null)
            url_ += "programId=" + encodeURIComponent("" + programId) + "&";
        if (numberOfSrfs !== undefined && numberOfSrfs !== null)
            url_ += "numberOfSrfs=" + encodeURIComponent("" + numberOfSrfs) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGenerateBlankSrfs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateBlankSrfs(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfBlankSrfGenerationResultDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfBlankSrfGenerationResultDto>><any>Observable.throw(response_);
        });
    }

    protected processGenerateBlankSrfs(response: HttpResponseBase): Observable<AjaxResponseOfBlankSrfGenerationResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfBlankSrfGenerationResultDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfBlankSrfGenerationResultDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramProfile(src: ProgramDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramProfile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramProfile(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramProfile(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramConfigurationProfile(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramConfigurationProfileDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramConfigurationProfile?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramConfigurationProfile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramConfigurationProfile(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramConfigurationProfileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramConfigurationProfileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramConfigurationProfile(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramConfigurationProfileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramConfigurationProfileDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramConfigurationProfileDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramConfigurationProfile(src: ProgramConfigurationProfileDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramConfigurationProfileDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramConfigurationProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramConfigurationProfile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramConfigurationProfile(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramConfigurationProfileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramConfigurationProfileDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramConfigurationProfile(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramConfigurationProfileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramConfigurationProfileDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramConfigurationProfileDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    deleteProgramConfigurationProfile(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/DeleteProgramConfigurationProfile?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processDeleteProgramConfigurationProfile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteProgramConfigurationProfile(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processDeleteProgramConfigurationProfile(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramDto>(<any>null);
    }

    /**
     * @param programId (optional) 
     * @return Success
     */
    addNewDraftProgramConfiguration(programId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/AddNewDraftProgramConfiguration?";
        if (programId !== undefined && programId !== null)
            url_ += "programId=" + encodeURIComponent("" + programId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processAddNewDraftProgramConfiguration(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddNewDraftProgramConfiguration(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processAddNewDraftProgramConfiguration(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramProducts(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramProductsDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramProducts?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramProducts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramProducts(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramProductsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramProductsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramProducts(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramProductsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramProductsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramProductsDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramProducts(src: ProgramProductsDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramProductsDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramProducts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramProducts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramProducts(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramProductsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramProductsDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramProducts(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramProductsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramProductsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramProductsDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramOrderSources(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramOrderSourcesDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramOrderSources?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramOrderSources(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramOrderSources(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramOrderSourcesDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramOrderSourcesDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramOrderSources(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramOrderSourcesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramOrderSourcesDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramOrderSourcesDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramOrderSources(src: ProgramOrderSourcesDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramOrderSourcesDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramOrderSources";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramOrderSources(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramOrderSources(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramOrderSourcesDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramOrderSourcesDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramOrderSources(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramOrderSourcesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramOrderSourcesDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramOrderSourcesDto>(<any>null);
    }

    /**
     * @param configurationId (optional) 
     * @return Success
     */
    getOrderValidationMissingKidAndValuesRules(configurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetOrderValidationMissingKidAndValuesRules?";
        if (configurationId !== undefined && configurationId !== null)
            url_ += "configurationId=" + encodeURIComponent("" + configurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderValidationMissingKidAndValuesRules(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderValidationMissingKidAndValuesRules(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderValidationMissingKidAndValuesRules(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateOrderValidationMissingKidAndValuesRules(src: OrderValidationMissingKidAndValuesRulesDto | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateOrderValidationMissingKidAndValuesRules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateOrderValidationMissingKidAndValuesRules(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrderValidationMissingKidAndValuesRules(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrderValidationMissingKidAndValuesRules(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto>(<any>null);
    }

    /**
     * @param configurationId (optional) 
     * @return Success
     */
    getOrderValidationAssureHcpRules(configurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetOrderValidationAssureHcpRules?";
        if (configurationId !== undefined && configurationId !== null)
            url_ += "configurationId=" + encodeURIComponent("" + configurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderValidationAssureHcpRules(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderValidationAssureHcpRules(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderValidationAssureHcpRules(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateOrderValidationAssureHcpRules(src: OrderValidationAssureHcpRulesDto | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateOrderValidationAssureHcpRules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateOrderValidationAssureHcpRules(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrderValidationAssureHcpRules(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrderValidationAssureHcpRules(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto>(<any>null);
    }

    /**
     * @param configurationId (optional) 
     * @return Success
     */
    getOrderValidationRestrictiveConditionRules(configurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetOrderValidationRestrictiveConditionRules?";
        if (configurationId !== undefined && configurationId !== null)
            url_ += "configurationId=" + encodeURIComponent("" + configurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderValidationRestrictiveConditionRules(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderValidationRestrictiveConditionRules(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderValidationRestrictiveConditionRules(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateOrderValidationRestrictiveConditionRules(src: OrderValidationRestrictiveConditionRulesDto | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateOrderValidationRestrictiveConditionRules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateOrderValidationRestrictiveConditionRules(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrderValidationRestrictiveConditionRules(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrderValidationRestrictiveConditionRules(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramOrderProcessingPriorityAndPostValidation(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramOrderProcessingPriorityAndPostValidation?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramOrderProcessingPriorityAndPostValidation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramOrderProcessingPriorityAndPostValidation(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramOrderProcessingPriorityAndPostValidation(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramOrderProcessingPriorityAndPostValidation(src: ProgramOrderProcessingPriorityDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramOrderProcessingPriorityAndPostValidation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramOrderProcessingPriorityAndPostValidation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramOrderProcessingPriorityAndPostValidation(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramOrderProcessingPriorityAndPostValidation(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramOrderProcessingInventoryAndSelectDay(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramOrderProcessingInventoryAndSelectDay?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramOrderProcessingInventoryAndSelectDay(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramOrderProcessingInventoryAndSelectDay(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramOrderProcessingInventoryAndSelectDay(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramOrderProcessingInventoryAndSelectDay(src: ProgramOrderProcessingInventoryDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramOrderProcessingInventoryAndSelectDay";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramOrderProcessingInventoryAndSelectDay(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramOrderProcessingInventoryAndSelectDay(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramOrderProcessingInventoryAndSelectDay(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramOrderProcessingAutoInclude(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramOrderProcessingAutoInclude?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramOrderProcessingAutoInclude(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramOrderProcessingAutoInclude(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramOrderProcessingAutoInclude(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramOrderProcessingAutoInclude(src: ProgramOrderProcessingAutoIncludeDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramOrderProcessingAutoInclude";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramOrderProcessingAutoInclude(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramOrderProcessingAutoInclude(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramOrderProcessingAutoInclude(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramOrderFulfillment(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramOrderFulfillment?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramOrderFulfillment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramOrderFulfillment(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramOrderFulfillment(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramOrderFulfillment(src: ProgramOrderFulfillmentDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramOrderFulfillment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramOrderFulfillment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramOrderFulfillment(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramOrderFulfillment(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramAoc(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramAocDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramAoc?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramAoc(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramAoc(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramAocDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramAocDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramAoc(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramAocDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramAocDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramAocDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramAoc(src: ProgramAocDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramAocDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramAoc";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramAoc(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramAoc(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramAocDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramAocDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramAoc(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramAocDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramAocDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramAocDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramSvl(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramSvlDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramSvl?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramSvl(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramSvl(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramSvlDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramSvlDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramSvl(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramSvlDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramSvlDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramSvlDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramSvl(src: ProgramSvlDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramSvlDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramSvl";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramSvl(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramSvl(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramSvlDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramSvlDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramSvl(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramSvlDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramSvlDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramSvlDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramTemplates(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramTemplateDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramTemplates?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramTemplates(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramTemplates(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramTemplateDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramTemplateDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramTemplates(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramTemplateDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramTemplateDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramTemplates(src: ProgramTemplateDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramTemplateDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramTemplates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramTemplates(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramTemplates(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramTemplateDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramTemplateDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramTemplates(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramTemplateDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramTemplateDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramLetter(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramLetterDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramLetter?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramLetter(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramLetter(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramLetterDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramLetterDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramLetter(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramLetterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramLetterDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramLetterDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateProgramLetter(src: ProgramLetterDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramLetterDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramLetter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramLetter(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramLetter(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramLetterDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramLetterDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramLetter(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramLetterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramLetterDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramLetterDto>(<any>null);
    }

    /**
     * @param programId (optional) 
     * @param includeProgram (optional) 
     * @return Success
     */
    getProgramActivationValidation(programId: string | null | undefined, includeProgram: boolean | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramActivationValidation?";
        if (programId !== undefined && programId !== null)
            url_ += "programId=" + encodeURIComponent("" + programId) + "&";
        if (includeProgram !== undefined && includeProgram !== null)
            url_ += "includeProgram=" + encodeURIComponent("" + includeProgram) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramActivationValidation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramActivationValidation(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramActivationValidation(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    activateProgram(dto: ProgramActivationDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/ActivateProgram";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processActivateProgram(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processActivateProgram(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processActivateProgram(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramDto>(<any>null);
    }

    /**
     * @param programId (optional) 
     * @return Success
     */
    abortScheduledActivationProgram(programId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/AbortScheduledActivationProgram?";
        if (programId !== undefined && programId !== null)
            url_ += "programId=" + encodeURIComponent("" + programId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processAbortScheduledActivationProgram(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAbortScheduledActivationProgram(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processAbortScheduledActivationProgram(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    configureProgramShutdownDetails(dto: ProgramShutdownDetailsDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/ConfigureProgramShutdownDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processConfigureProgramShutdownDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConfigureProgramShutdownDetails(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processConfigureProgramShutdownDetails(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramDto>(<any>null);
    }

    /**
     * @param programId (optional) 
     * @return Success
     */
    abortProgramShutdown(programId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/AbortProgramShutdown?";
        if (programId !== undefined && programId !== null)
            url_ += "programId=" + encodeURIComponent("" + programId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processAbortProgramShutdown(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAbortProgramShutdown(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processAbortProgramShutdown(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @return Success
     */
    getProgramCommunications(dtpProgramConfigurationId: string | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramCommunicationsDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/GetProgramCommunications?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProgramCommunications(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProgramCommunications(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramCommunicationsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramCommunicationsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProgramCommunications(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramCommunicationsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramCommunicationsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramCommunicationsDto>(<any>null);
    }

    /**
     * @param inputDto (optional) 
     * @return Success
     */
    updateProgramCommunications(inputDto: ProgramCommunicationsDto | null | undefined): Observable<AjaxResponseOfPageValidationOfProgramCommunicationsDto> {
        let url_ = this.baseUrl + "/api/services/app/Program/UpdateProgramCommunications";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(inputDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProgramCommunications(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProgramCommunications(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfProgramCommunicationsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfProgramCommunicationsDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProgramCommunications(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfProgramCommunicationsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfProgramCommunicationsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfProgramCommunicationsDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @param typeId (optional) 
     * @param puertoRicoFlag (optional) 
     * @param mergeFieldFlag (optional) 
     * @return Success
     */
    previewAocFollowUpLetterDocumentGenerationRequest(dtpProgramConfigurationId: string | null | undefined, typeId: string | null | undefined, puertoRicoFlag: boolean | null | undefined, mergeFieldFlag: boolean | null | undefined): Observable<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/ProgramTemplate/PreviewAocFollowUpLetterDocumentGenerationRequest?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        if (typeId !== undefined && typeId !== null)
            url_ += "typeId=" + encodeURIComponent("" + typeId) + "&";
        if (puertoRicoFlag !== undefined && puertoRicoFlag !== null)
            url_ += "puertoRicoFlag=" + encodeURIComponent("" + puertoRicoFlag) + "&";
        if (mergeFieldFlag !== undefined && mergeFieldFlag !== null)
            url_ += "mergeFieldFlag=" + encodeURIComponent("" + mergeFieldFlag) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processPreviewAocFollowUpLetterDocumentGenerationRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPreviewAocFollowUpLetterDocumentGenerationRequest(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfString>><any>Observable.throw(response_);
        });
    }

    protected processPreviewAocFollowUpLetterDocumentGenerationRequest(response: HttpResponseBase): Observable<AjaxResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfString.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @param documentTemplateTypeId (optional) 
     * @param mergeFieldFlag (optional) 
     * @return Success
     */
    previewAocSvlDocumentGenerationRequest(dtpProgramConfigurationId: string | null | undefined, documentTemplateTypeId: string | null | undefined, mergeFieldFlag: boolean | null | undefined): Observable<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/ProgramTemplate/PreviewAocSvlDocumentGenerationRequest?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        if (documentTemplateTypeId !== undefined && documentTemplateTypeId !== null)
            url_ += "documentTemplateTypeId=" + encodeURIComponent("" + documentTemplateTypeId) + "&";
        if (mergeFieldFlag !== undefined && mergeFieldFlag !== null)
            url_ += "mergeFieldFlag=" + encodeURIComponent("" + mergeFieldFlag) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processPreviewAocSvlDocumentGenerationRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPreviewAocSvlDocumentGenerationRequest(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfString>><any>Observable.throw(response_);
        });
    }

    protected processPreviewAocSvlDocumentGenerationRequest(response: HttpResponseBase): Observable<AjaxResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfString.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @param documentTemplateTypeId (optional) 
     * @param mergeFieldFlag (optional) 
     * @return Success
     */
    previewOrderSvlDocumentGenerationRequest(dtpProgramConfigurationId: string | null | undefined, documentTemplateTypeId: string | null | undefined, mergeFieldFlag: boolean | null | undefined): Observable<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/ProgramTemplate/PreviewOrderSvlDocumentGenerationRequest?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        if (documentTemplateTypeId !== undefined && documentTemplateTypeId !== null)
            url_ += "documentTemplateTypeId=" + encodeURIComponent("" + documentTemplateTypeId) + "&";
        if (mergeFieldFlag !== undefined && mergeFieldFlag !== null)
            url_ += "mergeFieldFlag=" + encodeURIComponent("" + mergeFieldFlag) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processPreviewOrderSvlDocumentGenerationRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPreviewOrderSvlDocumentGenerationRequest(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfString>><any>Observable.throw(response_);
        });
    }

    protected processPreviewOrderSvlDocumentGenerationRequest(response: HttpResponseBase): Observable<AjaxResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfString.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @param mergeFieldFlag (optional) 
     * @return Success
     */
    previewOfferSrfDocumentGenerationRequest(dtpProgramConfigurationId: string | null | undefined, mergeFieldFlag: boolean | null | undefined): Observable<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/ProgramTemplate/PreviewOfferSrfDocumentGenerationRequest?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        if (mergeFieldFlag !== undefined && mergeFieldFlag !== null)
            url_ += "mergeFieldFlag=" + encodeURIComponent("" + mergeFieldFlag) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processPreviewOfferSrfDocumentGenerationRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPreviewOfferSrfDocumentGenerationRequest(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfString>><any>Observable.throw(response_);
        });
    }

    protected processPreviewOfferSrfDocumentGenerationRequest(response: HttpResponseBase): Observable<AjaxResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfString.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @param mergeFieldFlag (optional) 
     * @return Success
     */
    previewBlankSrfDocumentGenerationRequest(dtpProgramConfigurationId: string | null | undefined, mergeFieldFlag: boolean | null | undefined): Observable<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/ProgramTemplate/PreviewBlankSrfDocumentGenerationRequest?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        if (mergeFieldFlag !== undefined && mergeFieldFlag !== null)
            url_ += "mergeFieldFlag=" + encodeURIComponent("" + mergeFieldFlag) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processPreviewBlankSrfDocumentGenerationRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPreviewBlankSrfDocumentGenerationRequest(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfString>><any>Observable.throw(response_);
        });
    }

    protected processPreviewBlankSrfDocumentGenerationRequest(response: HttpResponseBase): Observable<AjaxResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfString.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @param mergeFieldFlag (optional) 
     * @return Success
     */
    previewExceptionLetterGenerationRequest(dtpProgramConfigurationId: string | null | undefined, mergeFieldFlag: boolean | null | undefined): Observable<AjaxResponseOfPreviewTemplateDto> {
        let url_ = this.baseUrl + "/api/services/app/ProgramTemplate/PreviewExceptionLetterGenerationRequest?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        if (mergeFieldFlag !== undefined && mergeFieldFlag !== null)
            url_ += "mergeFieldFlag=" + encodeURIComponent("" + mergeFieldFlag) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processPreviewExceptionLetterGenerationRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPreviewExceptionLetterGenerationRequest(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPreviewTemplateDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPreviewTemplateDto>><any>Observable.throw(response_);
        });
    }

    protected processPreviewExceptionLetterGenerationRequest(response: HttpResponseBase): Observable<AjaxResponseOfPreviewTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPreviewTemplateDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPreviewTemplateDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @param mergeFieldFlag (optional) 
     * @return Success
     */
    previewRejectionLetterGenerationRequest(dtpProgramConfigurationId: string | null | undefined, mergeFieldFlag: boolean | null | undefined): Observable<AjaxResponseOfPreviewTemplateDto> {
        let url_ = this.baseUrl + "/api/services/app/ProgramTemplate/PreviewRejectionLetterGenerationRequest?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        if (mergeFieldFlag !== undefined && mergeFieldFlag !== null)
            url_ += "mergeFieldFlag=" + encodeURIComponent("" + mergeFieldFlag) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processPreviewRejectionLetterGenerationRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPreviewRejectionLetterGenerationRequest(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPreviewTemplateDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPreviewTemplateDto>><any>Observable.throw(response_);
        });
    }

    protected processPreviewRejectionLetterGenerationRequest(response: HttpResponseBase): Observable<AjaxResponseOfPreviewTemplateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPreviewTemplateDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPreviewTemplateDto>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @param mergeFieldFlag (optional) 
     * @return Success
     */
    previewOrderDorDocumentGenerationRequest(dtpProgramConfigurationId: string | null | undefined, mergeFieldFlag: boolean | null | undefined): Observable<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/ProgramTemplate/PreviewOrderDorDocumentGenerationRequest?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        if (mergeFieldFlag !== undefined && mergeFieldFlag !== null)
            url_ += "mergeFieldFlag=" + encodeURIComponent("" + mergeFieldFlag) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processPreviewOrderDorDocumentGenerationRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPreviewOrderDorDocumentGenerationRequest(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfString>><any>Observable.throw(response_);
        });
    }

    protected processPreviewOrderDorDocumentGenerationRequest(response: HttpResponseBase): Observable<AjaxResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfString.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param dtpProgramConfigurationId (optional) 
     * @param puertoRicoFlag (optional) 
     * @param mergeFieldFlag (optional) 
     * @return Success
     */
    previewEAocDorDocumentGenerationRequest(dtpProgramConfigurationId: string | null | undefined, puertoRicoFlag: boolean | null | undefined, mergeFieldFlag: boolean | null | undefined): Observable<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/ProgramTemplate/PreviewEAocDorDocumentGenerationRequest?";
        if (dtpProgramConfigurationId !== undefined && dtpProgramConfigurationId !== null)
            url_ += "dtpProgramConfigurationId=" + encodeURIComponent("" + dtpProgramConfigurationId) + "&";
        if (puertoRicoFlag !== undefined && puertoRicoFlag !== null)
            url_ += "puertoRicoFlag=" + encodeURIComponent("" + puertoRicoFlag) + "&";
        if (mergeFieldFlag !== undefined && mergeFieldFlag !== null)
            url_ += "mergeFieldFlag=" + encodeURIComponent("" + mergeFieldFlag) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processPreviewEAocDorDocumentGenerationRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPreviewEAocDorDocumentGenerationRequest(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfString>><any>Observable.throw(response_);
        });
    }

    protected processPreviewEAocDorDocumentGenerationRequest(response: HttpResponseBase): Observable<AjaxResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfString.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfString>(<any>null);
    }
}

export class AjaxResponseOfIListOfAllocationDto implements IAjaxResponseOfIListOfAllocationDto {
    result: AllocationDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfAllocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(AllocationDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfAllocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfAllocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfAllocationDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfAllocationDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfAllocationDto {
    result: AllocationDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AllocationDto implements IAllocationDto {
    id: string | undefined;
    name: string | undefined;
    programTypeClassificationValueId: string | undefined;
    allocationMeasuresClassificationValueId: string | undefined;
    allocationStartDate: Date | undefined;
    allocationEndDate: Date | undefined;
    periodClassificationValueId: string | undefined;
    threshold: number | undefined;
    approvalRequired: boolean | undefined;
    isActive: boolean | undefined;
    isCurrent: boolean | undefined;
    hasAllocations: boolean | undefined;
    allocationTypeClassificationValueId: string | undefined;
    itemScopeClassificationValueId: string | undefined;
    hierarchyTypeClassificationValueId: string | undefined;
    allocationProductTypes: AllocationProductTypeDto[] | undefined;

    constructor(data?: IAllocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.programTypeClassificationValueId = _data["programTypeClassificationValueId"];
            this.allocationMeasuresClassificationValueId = _data["allocationMeasuresClassificationValueId"];
            this.allocationStartDate = _data["allocationStartDate"] ? new Date(_data["allocationStartDate"].toString()) : <any>undefined;
            this.allocationEndDate = _data["allocationEndDate"] ? new Date(_data["allocationEndDate"].toString()) : <any>undefined;
            this.periodClassificationValueId = _data["periodClassificationValueId"];
            this.threshold = _data["threshold"];
            this.approvalRequired = _data["approvalRequired"];
            this.isActive = _data["isActive"];
            this.isCurrent = _data["isCurrent"];
            this.hasAllocations = _data["hasAllocations"];
            this.allocationTypeClassificationValueId = _data["allocationTypeClassificationValueId"];
            this.itemScopeClassificationValueId = _data["itemScopeClassificationValueId"];
            this.hierarchyTypeClassificationValueId = _data["hierarchyTypeClassificationValueId"];
            if (Array.isArray(_data["allocationProductTypes"])) {
                this.allocationProductTypes = [] as any;
                for (let item of _data["allocationProductTypes"])
                    this.allocationProductTypes.push(AllocationProductTypeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AllocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AllocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["programTypeClassificationValueId"] = this.programTypeClassificationValueId;
        data["allocationMeasuresClassificationValueId"] = this.allocationMeasuresClassificationValueId;
        data["allocationStartDate"] = this.allocationStartDate ? this.allocationStartDate.toISOString() : <any>undefined;
        data["allocationEndDate"] = this.allocationEndDate ? this.allocationEndDate.toISOString() : <any>undefined;
        data["periodClassificationValueId"] = this.periodClassificationValueId;
        data["threshold"] = this.threshold;
        data["approvalRequired"] = this.approvalRequired;
        data["isActive"] = this.isActive;
        data["isCurrent"] = this.isCurrent;
        data["hasAllocations"] = this.hasAllocations;
        data["allocationTypeClassificationValueId"] = this.allocationTypeClassificationValueId;
        data["itemScopeClassificationValueId"] = this.itemScopeClassificationValueId;
        data["hierarchyTypeClassificationValueId"] = this.hierarchyTypeClassificationValueId;
        if (Array.isArray(this.allocationProductTypes)) {
            data["allocationProductTypes"] = [];
            for (let item of this.allocationProductTypes)
                data["allocationProductTypes"].push(item.toJSON());
        }
        return data; 
    }

    clone(): AllocationDto {
        const json = this.toJSON();
        let result = new AllocationDto();
        result.init(json);
        return result;
    }
}

export interface IAllocationDto {
    id: string | undefined;
    name: string | undefined;
    programTypeClassificationValueId: string | undefined;
    allocationMeasuresClassificationValueId: string | undefined;
    allocationStartDate: Date | undefined;
    allocationEndDate: Date | undefined;
    periodClassificationValueId: string | undefined;
    threshold: number | undefined;
    approvalRequired: boolean | undefined;
    isActive: boolean | undefined;
    isCurrent: boolean | undefined;
    hasAllocations: boolean | undefined;
    allocationTypeClassificationValueId: string | undefined;
    itemScopeClassificationValueId: string | undefined;
    hierarchyTypeClassificationValueId: string | undefined;
    allocationProductTypes: AllocationProductTypeDto[] | undefined;
}

export class ErrorInfo implements IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;

    constructor(data?: IErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            this.details = _data["details"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors.push(ValidationErrorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ErrorInfo {
        const json = this.toJSON();
        let result = new ErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;
}

export class AllocationProductTypeDto implements IAllocationProductTypeDto {
    id: string | undefined;
    allocationDefinationId: string | undefined;
    productTypeClassificationId: string | undefined;

    constructor(data?: IAllocationProductTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.allocationDefinationId = _data["allocationDefinationId"];
            this.productTypeClassificationId = _data["productTypeClassificationId"];
        }
    }

    static fromJS(data: any): AllocationProductTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AllocationProductTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["allocationDefinationId"] = this.allocationDefinationId;
        data["productTypeClassificationId"] = this.productTypeClassificationId;
        return data; 
    }

    clone(): AllocationProductTypeDto {
        const json = this.toJSON();
        let result = new AllocationProductTypeDto();
        result.init(json);
        return result;
    }
}

export interface IAllocationProductTypeDto {
    id: string | undefined;
    allocationDefinationId: string | undefined;
    productTypeClassificationId: string | undefined;
}

export class ValidationErrorInfo implements IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;

    constructor(data?: IValidationErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members.push(item);
            }
        }
    }

    static fromJS(data: any): ValidationErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }

    clone(): ValidationErrorInfo {
        const json = this.toJSON();
        let result = new ValidationErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;
}

export class AjaxResponseOfBoolean implements IAjaxResponseOfBoolean {
    result: boolean | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfBoolean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfBoolean {
        const json = this.toJSON();
        let result = new AjaxResponseOfBoolean();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfBoolean {
    result: boolean | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfListOfSimpleProgramDto implements IAjaxResponseOfListOfSimpleProgramDto {
    result: SimpleProgramDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfListOfSimpleProgramDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(SimpleProgramDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfSimpleProgramDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfSimpleProgramDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfListOfSimpleProgramDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfListOfSimpleProgramDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfListOfSimpleProgramDto {
    result: SimpleProgramDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class SimpleProgramDto implements ISimpleProgramDto {
    id: string | undefined;
    programName: string | undefined;
    jobId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    actualStartDate: Date | undefined;

    constructor(data?: ISimpleProgramDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.programName = _data["programName"];
            this.jobId = _data["jobId"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
            this.actualStartDate = _data["actualStartDate"] ? new Date(_data["actualStartDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SimpleProgramDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleProgramDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["programName"] = this.programName;
        data["jobId"] = this.jobId;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        data["actualStartDate"] = this.actualStartDate ? this.actualStartDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): SimpleProgramDto {
        const json = this.toJSON();
        let result = new SimpleProgramDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleProgramDto {
    id: string | undefined;
    programName: string | undefined;
    jobId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    actualStartDate: Date | undefined;
}

export class AjaxResponseOfListOfSimpleProgramIncludeFlagDto implements IAjaxResponseOfListOfSimpleProgramIncludeFlagDto {
    result: SimpleProgramIncludeFlagDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfListOfSimpleProgramIncludeFlagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(SimpleProgramIncludeFlagDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfSimpleProgramIncludeFlagDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfSimpleProgramIncludeFlagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfListOfSimpleProgramIncludeFlagDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfListOfSimpleProgramIncludeFlagDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfListOfSimpleProgramIncludeFlagDto {
    result: SimpleProgramIncludeFlagDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class SimpleProgramIncludeFlagDto implements ISimpleProgramIncludeFlagDto {
    id: string | undefined;
    programName: string | undefined;
    jobId: string | undefined;
    repDrivenFlag: boolean | undefined;
    institutionFlag: boolean | undefined;
    currentStatusClassificationValueId: string | undefined;

    constructor(data?: ISimpleProgramIncludeFlagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.programName = _data["programName"];
            this.jobId = _data["jobId"];
            this.repDrivenFlag = _data["repDrivenFlag"];
            this.institutionFlag = _data["institutionFlag"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
        }
    }

    static fromJS(data: any): SimpleProgramIncludeFlagDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleProgramIncludeFlagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["programName"] = this.programName;
        data["jobId"] = this.jobId;
        data["repDrivenFlag"] = this.repDrivenFlag;
        data["institutionFlag"] = this.institutionFlag;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        return data; 
    }

    clone(): SimpleProgramIncludeFlagDto {
        const json = this.toJSON();
        let result = new SimpleProgramIncludeFlagDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleProgramIncludeFlagDto {
    id: string | undefined;
    programName: string | undefined;
    jobId: string | undefined;
    repDrivenFlag: boolean | undefined;
    institutionFlag: boolean | undefined;
    currentStatusClassificationValueId: string | undefined;
}

export class ProgramSearchFilterDto implements IProgramSearchFilterDto {
    programName: string | undefined;
    jobNumber: string | undefined;
    currentStatusClassificationValueIds: string[] | undefined;
    repDrivenFlags: boolean[] | undefined;
    institutionFlags: boolean[] | undefined;
    latestConfigurationStatusClassificationValueIds: string[] | undefined;
    brandName: string | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: IProgramSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programName = _data["programName"];
            this.jobNumber = _data["jobNumber"];
            if (Array.isArray(_data["currentStatusClassificationValueIds"])) {
                this.currentStatusClassificationValueIds = [] as any;
                for (let item of _data["currentStatusClassificationValueIds"])
                    this.currentStatusClassificationValueIds.push(item);
            }
            if (Array.isArray(_data["repDrivenFlags"])) {
                this.repDrivenFlags = [] as any;
                for (let item of _data["repDrivenFlags"])
                    this.repDrivenFlags.push(item);
            }
            if (Array.isArray(_data["institutionFlags"])) {
                this.institutionFlags = [] as any;
                for (let item of _data["institutionFlags"])
                    this.institutionFlags.push(item);
            }
            if (Array.isArray(_data["latestConfigurationStatusClassificationValueIds"])) {
                this.latestConfigurationStatusClassificationValueIds = [] as any;
                for (let item of _data["latestConfigurationStatusClassificationValueIds"])
                    this.latestConfigurationStatusClassificationValueIds.push(item);
            }
            this.brandName = _data["brandName"];
            this.wmsProductName = _data["wmsProductName"];
            this.wmsProductId = _data["wmsProductId"];
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): ProgramSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programName"] = this.programName;
        data["jobNumber"] = this.jobNumber;
        if (Array.isArray(this.currentStatusClassificationValueIds)) {
            data["currentStatusClassificationValueIds"] = [];
            for (let item of this.currentStatusClassificationValueIds)
                data["currentStatusClassificationValueIds"].push(item);
        }
        if (Array.isArray(this.repDrivenFlags)) {
            data["repDrivenFlags"] = [];
            for (let item of this.repDrivenFlags)
                data["repDrivenFlags"].push(item);
        }
        if (Array.isArray(this.institutionFlags)) {
            data["institutionFlags"] = [];
            for (let item of this.institutionFlags)
                data["institutionFlags"].push(item);
        }
        if (Array.isArray(this.latestConfigurationStatusClassificationValueIds)) {
            data["latestConfigurationStatusClassificationValueIds"] = [];
            for (let item of this.latestConfigurationStatusClassificationValueIds)
                data["latestConfigurationStatusClassificationValueIds"].push(item);
        }
        data["brandName"] = this.brandName;
        data["wmsProductName"] = this.wmsProductName;
        data["wmsProductId"] = this.wmsProductId;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): ProgramSearchFilterDto {
        const json = this.toJSON();
        let result = new ProgramSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface IProgramSearchFilterDto {
    programName: string | undefined;
    jobNumber: string | undefined;
    currentStatusClassificationValueIds: string[] | undefined;
    repDrivenFlags: boolean[] | undefined;
    institutionFlags: boolean[] | undefined;
    latestConfigurationStatusClassificationValueIds: string[] | undefined;
    brandName: string | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPagedResultOfProgramSearchDto implements IAjaxResponseOfPagedResultOfProgramSearchDto {
    result: PagedResultOfProgramSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPagedResultOfProgramSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfProgramSearchDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultOfProgramSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultOfProgramSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPagedResultOfProgramSearchDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPagedResultOfProgramSearchDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPagedResultOfProgramSearchDto {
    result: PagedResultOfProgramSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PagedResultOfProgramSearchDto implements IPagedResultOfProgramSearchDto {
    totalCount: number | undefined;
    items: ProgramSearchDto[] | undefined;

    constructor(data?: IPagedResultOfProgramSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ProgramSearchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfProgramSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfProgramSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultOfProgramSearchDto {
        const json = this.toJSON();
        let result = new PagedResultOfProgramSearchDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultOfProgramSearchDto {
    totalCount: number | undefined;
    items: ProgramSearchDto[] | undefined;
}

export class ProgramSearchDto implements IProgramSearchDto {
    id: string | undefined;
    programName: string | undefined;
    jobNumber: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    latestConfigurationStatusClassificationValueId: string | undefined;
    repDrivenFlag: boolean | undefined;
    institutionFlag: boolean | undefined;
    actualStartDate: Date | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IProgramSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.programName = _data["programName"];
            this.jobNumber = _data["jobNumber"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
            this.latestConfigurationStatusClassificationValueId = _data["latestConfigurationStatusClassificationValueId"];
            this.repDrivenFlag = _data["repDrivenFlag"];
            this.institutionFlag = _data["institutionFlag"];
            this.actualStartDate = _data["actualStartDate"] ? new Date(_data["actualStartDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProgramSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["programName"] = this.programName;
        data["jobNumber"] = this.jobNumber;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        data["latestConfigurationStatusClassificationValueId"] = this.latestConfigurationStatusClassificationValueId;
        data["repDrivenFlag"] = this.repDrivenFlag;
        data["institutionFlag"] = this.institutionFlag;
        data["actualStartDate"] = this.actualStartDate ? this.actualStartDate.toISOString() : <any>undefined;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProgramSearchDto {
        const json = this.toJSON();
        let result = new ProgramSearchDto();
        result.init(json);
        return result;
    }
}

export interface IProgramSearchDto {
    id: string | undefined;
    programName: string | undefined;
    jobNumber: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    latestConfigurationStatusClassificationValueId: string | undefined;
    repDrivenFlag: boolean | undefined;
    institutionFlag: boolean | undefined;
    actualStartDate: Date | undefined;
    names: LocalizedValue[] | undefined;
}

export class LocalizedValue implements ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;

    constructor(data?: ILocalizedValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LocalizedValue {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language;
        data["value"] = this.value;
        return data; 
    }

    clone(): LocalizedValue {
        const json = this.toJSON();
        let result = new LocalizedValue();
        result.init(json);
        return result;
    }
}

export interface ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;
}

export class AjaxResponseOfIListOfPmsProjectDto implements IAjaxResponseOfIListOfPmsProjectDto {
    result: PmsProjectDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfPmsProjectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(PmsProjectDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfPmsProjectDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfPmsProjectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfPmsProjectDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfPmsProjectDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfPmsProjectDto {
    result: PmsProjectDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PmsProjectDto implements IPmsProjectDto {
    id: string | undefined;
    name: string | undefined;
    projectStatus: string | undefined;
    jobs: PmsJobDto[] | undefined;

    constructor(data?: IPmsProjectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.projectStatus = _data["projectStatus"];
            if (Array.isArray(_data["jobs"])) {
                this.jobs = [] as any;
                for (let item of _data["jobs"])
                    this.jobs.push(PmsJobDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PmsProjectDto {
        data = typeof data === 'object' ? data : {};
        let result = new PmsProjectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["projectStatus"] = this.projectStatus;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PmsProjectDto {
        const json = this.toJSON();
        let result = new PmsProjectDto();
        result.init(json);
        return result;
    }
}

export interface IPmsProjectDto {
    id: string | undefined;
    name: string | undefined;
    projectStatus: string | undefined;
    jobs: PmsJobDto[] | undefined;
}

export class PmsJobDto implements IPmsJobDto {
    id: string | undefined;
    name: string | undefined;

    constructor(data?: IPmsJobDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PmsJobDto {
        data = typeof data === 'object' ? data : {};
        let result = new PmsJobDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }

    clone(): PmsJobDto {
        const json = this.toJSON();
        let result = new PmsJobDto();
        result.init(json);
        return result;
    }
}

export interface IPmsJobDto {
    id: string | undefined;
    name: string | undefined;
}

export class ProgramSetupDto implements IProgramSetupDto {
    programId: string | undefined;
    projectId: string | undefined;
    projectDescription: string | undefined;
    jobId: string | undefined;
    jobName: string | undefined;
    isRepDriven: boolean | undefined;
    isInstitution: boolean | undefined;

    constructor(data?: IProgramSetupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.projectId = _data["projectId"];
            this.projectDescription = _data["projectDescription"];
            this.jobId = _data["jobId"];
            this.jobName = _data["jobName"];
            this.isRepDriven = _data["isRepDriven"];
            this.isInstitution = _data["isInstitution"];
        }
    }

    static fromJS(data: any): ProgramSetupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramSetupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["projectId"] = this.projectId;
        data["projectDescription"] = this.projectDescription;
        data["jobId"] = this.jobId;
        data["jobName"] = this.jobName;
        data["isRepDriven"] = this.isRepDriven;
        data["isInstitution"] = this.isInstitution;
        return data; 
    }

    clone(): ProgramSetupDto {
        const json = this.toJSON();
        let result = new ProgramSetupDto();
        result.init(json);
        return result;
    }
}

export interface IProgramSetupDto {
    programId: string | undefined;
    projectId: string | undefined;
    projectDescription: string | undefined;
    jobId: string | undefined;
    jobName: string | undefined;
    isRepDriven: boolean | undefined;
    isInstitution: boolean | undefined;
}

export class AjaxResponseOfProgramSetupDto implements IAjaxResponseOfProgramSetupDto {
    result: ProgramSetupDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfProgramSetupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ProgramSetupDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfProgramSetupDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfProgramSetupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfProgramSetupDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfProgramSetupDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfProgramSetupDto {
    result: ProgramSetupDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfProgramScheduledDto implements IAjaxResponseOfProgramScheduledDto {
    result: ProgramScheduledDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfProgramScheduledDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ProgramScheduledDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfProgramScheduledDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfProgramScheduledDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfProgramScheduledDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfProgramScheduledDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfProgramScheduledDto {
    result: ProgramScheduledDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ProgramScheduledDto implements IProgramScheduledDto {
    programId: string | undefined;
    scheduledActivationFlag: boolean | undefined;
    scheduledActivatedDate: Date | undefined;

    constructor(data?: IProgramScheduledDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.scheduledActivationFlag = _data["scheduledActivationFlag"];
            this.scheduledActivatedDate = _data["scheduledActivatedDate"] ? new Date(_data["scheduledActivatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ProgramScheduledDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramScheduledDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["scheduledActivationFlag"] = this.scheduledActivationFlag;
        data["scheduledActivatedDate"] = this.scheduledActivatedDate ? this.scheduledActivatedDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): ProgramScheduledDto {
        const json = this.toJSON();
        let result = new ProgramScheduledDto();
        result.init(json);
        return result;
    }
}

export interface IProgramScheduledDto {
    programId: string | undefined;
    scheduledActivationFlag: boolean | undefined;
    scheduledActivatedDate: Date | undefined;
}

export class AjaxResponseOfPageValidationOfProgramDto implements IAjaxResponseOfPageValidationOfProgramDto {
    result: PageValidationOfProgramDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramDto {
    result: PageValidationOfProgramDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramDto implements IPageValidationOfProgramDto {
    dataDto: ProgramDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramDto {
    dataDto: ProgramDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramDto implements IProgramDto {
    id: string | undefined;
    programName: string | undefined;
    programDesc: string | undefined;
    jobId: string | undefined;
    projectId: string | undefined;
    projectDesc: string | undefined;
    programTypeClassificationValueId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    latestConfigurationId: string | undefined;
    latestConfigurationStatusClassificationValueId: string | undefined;
    latestConfigurationStatusDate: Date | undefined;
    repDrivenFlag: boolean | undefined;
    institutionFlag: boolean | undefined;
    projectedStartDate: Date | undefined;
    projectedEndDate: Date | undefined;
    actualStartDate: Date | undefined;
    actualEndDate: Date | undefined;
    shutdownStartDate: Date | undefined;
    reactivationDate: Date | undefined;
    tenantId: number | undefined;
    allowActivation: boolean | undefined;
    scheduledActivationFlag: boolean | undefined;
    canGenerateBlankSrfFlag: boolean | undefined;
    numberOfBlankSrfSets: number | undefined;
    scheduledActivatedDate: Date | undefined;
    allowConfigurationDeletion: boolean | undefined;
    programContactMethods: ProgramContactMethodDto[] | undefined;
    programContacts: ProgramContactDto[] | undefined;
    programAttachments: ProgramAttachmentDto[] | undefined;
    dtpProgramConfigurationHistory: DtpProgramConfigDto[] | undefined;
    programFiles: TenantFileDto[] | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IProgramDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.programName = _data["programName"];
            this.programDesc = _data["programDesc"];
            this.jobId = _data["jobId"];
            this.projectId = _data["projectId"];
            this.projectDesc = _data["projectDesc"];
            this.programTypeClassificationValueId = _data["programTypeClassificationValueId"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
            this.latestConfigurationId = _data["latestConfigurationId"];
            this.latestConfigurationStatusClassificationValueId = _data["latestConfigurationStatusClassificationValueId"];
            this.latestConfigurationStatusDate = _data["latestConfigurationStatusDate"] ? new Date(_data["latestConfigurationStatusDate"].toString()) : <any>undefined;
            this.repDrivenFlag = _data["repDrivenFlag"];
            this.institutionFlag = _data["institutionFlag"];
            this.projectedStartDate = _data["projectedStartDate"] ? new Date(_data["projectedStartDate"].toString()) : <any>undefined;
            this.projectedEndDate = _data["projectedEndDate"] ? new Date(_data["projectedEndDate"].toString()) : <any>undefined;
            this.actualStartDate = _data["actualStartDate"] ? new Date(_data["actualStartDate"].toString()) : <any>undefined;
            this.actualEndDate = _data["actualEndDate"] ? new Date(_data["actualEndDate"].toString()) : <any>undefined;
            this.shutdownStartDate = _data["shutdownStartDate"] ? new Date(_data["shutdownStartDate"].toString()) : <any>undefined;
            this.reactivationDate = _data["reactivationDate"] ? new Date(_data["reactivationDate"].toString()) : <any>undefined;
            this.tenantId = _data["tenantId"];
            this.allowActivation = _data["allowActivation"];
            this.scheduledActivationFlag = _data["scheduledActivationFlag"];
            this.canGenerateBlankSrfFlag = _data["canGenerateBlankSrfFlag"];
            this.numberOfBlankSrfSets = _data["numberOfBlankSrfSets"];
            this.scheduledActivatedDate = _data["scheduledActivatedDate"] ? new Date(_data["scheduledActivatedDate"].toString()) : <any>undefined;
            this.allowConfigurationDeletion = _data["allowConfigurationDeletion"];
            if (Array.isArray(_data["programContactMethods"])) {
                this.programContactMethods = [] as any;
                for (let item of _data["programContactMethods"])
                    this.programContactMethods.push(ProgramContactMethodDto.fromJS(item));
            }
            if (Array.isArray(_data["programContacts"])) {
                this.programContacts = [] as any;
                for (let item of _data["programContacts"])
                    this.programContacts.push(ProgramContactDto.fromJS(item));
            }
            if (Array.isArray(_data["programAttachments"])) {
                this.programAttachments = [] as any;
                for (let item of _data["programAttachments"])
                    this.programAttachments.push(ProgramAttachmentDto.fromJS(item));
            }
            if (Array.isArray(_data["dtpProgramConfigurationHistory"])) {
                this.dtpProgramConfigurationHistory = [] as any;
                for (let item of _data["dtpProgramConfigurationHistory"])
                    this.dtpProgramConfigurationHistory.push(DtpProgramConfigDto.fromJS(item));
            }
            if (Array.isArray(_data["programFiles"])) {
                this.programFiles = [] as any;
                for (let item of _data["programFiles"])
                    this.programFiles.push(TenantFileDto.fromJS(item));
            }
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProgramDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["programName"] = this.programName;
        data["programDesc"] = this.programDesc;
        data["jobId"] = this.jobId;
        data["projectId"] = this.projectId;
        data["projectDesc"] = this.projectDesc;
        data["programTypeClassificationValueId"] = this.programTypeClassificationValueId;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        data["latestConfigurationId"] = this.latestConfigurationId;
        data["latestConfigurationStatusClassificationValueId"] = this.latestConfigurationStatusClassificationValueId;
        data["latestConfigurationStatusDate"] = this.latestConfigurationStatusDate ? this.latestConfigurationStatusDate.toISOString() : <any>undefined;
        data["repDrivenFlag"] = this.repDrivenFlag;
        data["institutionFlag"] = this.institutionFlag;
        data["projectedStartDate"] = this.projectedStartDate ? this.projectedStartDate.toISOString() : <any>undefined;
        data["projectedEndDate"] = this.projectedEndDate ? this.projectedEndDate.toISOString() : <any>undefined;
        data["actualStartDate"] = this.actualStartDate ? this.actualStartDate.toISOString() : <any>undefined;
        data["actualEndDate"] = this.actualEndDate ? this.actualEndDate.toISOString() : <any>undefined;
        data["shutdownStartDate"] = this.shutdownStartDate ? this.shutdownStartDate.toISOString() : <any>undefined;
        data["reactivationDate"] = this.reactivationDate ? this.reactivationDate.toISOString() : <any>undefined;
        data["tenantId"] = this.tenantId;
        data["allowActivation"] = this.allowActivation;
        data["scheduledActivationFlag"] = this.scheduledActivationFlag;
        data["canGenerateBlankSrfFlag"] = this.canGenerateBlankSrfFlag;
        data["numberOfBlankSrfSets"] = this.numberOfBlankSrfSets;
        data["scheduledActivatedDate"] = this.scheduledActivatedDate ? this.scheduledActivatedDate.toISOString() : <any>undefined;
        data["allowConfigurationDeletion"] = this.allowConfigurationDeletion;
        if (Array.isArray(this.programContactMethods)) {
            data["programContactMethods"] = [];
            for (let item of this.programContactMethods)
                data["programContactMethods"].push(item.toJSON());
        }
        if (Array.isArray(this.programContacts)) {
            data["programContacts"] = [];
            for (let item of this.programContacts)
                data["programContacts"].push(item.toJSON());
        }
        if (Array.isArray(this.programAttachments)) {
            data["programAttachments"] = [];
            for (let item of this.programAttachments)
                data["programAttachments"].push(item.toJSON());
        }
        if (Array.isArray(this.dtpProgramConfigurationHistory)) {
            data["dtpProgramConfigurationHistory"] = [];
            for (let item of this.dtpProgramConfigurationHistory)
                data["dtpProgramConfigurationHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.programFiles)) {
            data["programFiles"] = [];
            for (let item of this.programFiles)
                data["programFiles"].push(item.toJSON());
        }
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProgramDto {
        const json = this.toJSON();
        let result = new ProgramDto();
        result.init(json);
        return result;
    }
}

export interface IProgramDto {
    id: string | undefined;
    programName: string | undefined;
    programDesc: string | undefined;
    jobId: string | undefined;
    projectId: string | undefined;
    projectDesc: string | undefined;
    programTypeClassificationValueId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    latestConfigurationId: string | undefined;
    latestConfigurationStatusClassificationValueId: string | undefined;
    latestConfigurationStatusDate: Date | undefined;
    repDrivenFlag: boolean | undefined;
    institutionFlag: boolean | undefined;
    projectedStartDate: Date | undefined;
    projectedEndDate: Date | undefined;
    actualStartDate: Date | undefined;
    actualEndDate: Date | undefined;
    shutdownStartDate: Date | undefined;
    reactivationDate: Date | undefined;
    tenantId: number | undefined;
    allowActivation: boolean | undefined;
    scheduledActivationFlag: boolean | undefined;
    canGenerateBlankSrfFlag: boolean | undefined;
    numberOfBlankSrfSets: number | undefined;
    scheduledActivatedDate: Date | undefined;
    allowConfigurationDeletion: boolean | undefined;
    programContactMethods: ProgramContactMethodDto[] | undefined;
    programContacts: ProgramContactDto[] | undefined;
    programAttachments: ProgramAttachmentDto[] | undefined;
    dtpProgramConfigurationHistory: DtpProgramConfigDto[] | undefined;
    programFiles: TenantFileDto[] | undefined;
    names: LocalizedValue[] | undefined;
}

export class SectionValidation implements ISectionValidation {
    parent: SectionValidation | undefined;
    state: string | undefined;
    name: string | undefined;
    selectedFlag: boolean | undefined;
    crossPageError: boolean | undefined;
    omitValidation: boolean | undefined;

    constructor(data?: ISectionValidation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parent = _data["parent"] ? SectionValidation.fromJS(_data["parent"]) : <any>undefined;
            this.state = _data["state"];
            this.name = _data["name"];
            this.selectedFlag = _data["selectedFlag"];
            this.crossPageError = _data["crossPageError"];
            this.omitValidation = _data["omitValidation"];
        }
    }

    static fromJS(data: any): SectionValidation {
        data = typeof data === 'object' ? data : {};
        let result = new SectionValidation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        data["state"] = this.state;
        data["name"] = this.name;
        data["selectedFlag"] = this.selectedFlag;
        data["crossPageError"] = this.crossPageError;
        data["omitValidation"] = this.omitValidation;
        return data; 
    }

    clone(): SectionValidation {
        const json = this.toJSON();
        let result = new SectionValidation();
        result.init(json);
        return result;
    }
}

export interface ISectionValidation {
    parent: SectionValidation | undefined;
    state: string | undefined;
    name: string | undefined;
    selectedFlag: boolean | undefined;
    crossPageError: boolean | undefined;
    omitValidation: boolean | undefined;
}

export class ProgramContactMethodDto implements IProgramContactMethodDto {
    programId: string | undefined;
    contactMethodTypeId: string | undefined;
    contactDetailText: string | undefined;
    contactDetailExtensionText: string | undefined;
    primaryFlag: boolean | undefined;
    id: string | undefined;

    constructor(data?: IProgramContactMethodDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.contactMethodTypeId = _data["contactMethodTypeId"];
            this.contactDetailText = _data["contactDetailText"];
            this.contactDetailExtensionText = _data["contactDetailExtensionText"];
            this.primaryFlag = _data["primaryFlag"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProgramContactMethodDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramContactMethodDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["contactMethodTypeId"] = this.contactMethodTypeId;
        data["contactDetailText"] = this.contactDetailText;
        data["contactDetailExtensionText"] = this.contactDetailExtensionText;
        data["primaryFlag"] = this.primaryFlag;
        data["id"] = this.id;
        return data; 
    }

    clone(): ProgramContactMethodDto {
        const json = this.toJSON();
        let result = new ProgramContactMethodDto();
        result.init(json);
        return result;
    }
}

export interface IProgramContactMethodDto {
    programId: string | undefined;
    contactMethodTypeId: string | undefined;
    contactDetailText: string | undefined;
    contactDetailExtensionText: string | undefined;
    primaryFlag: boolean | undefined;
    id: string | undefined;
}

export class ProgramContactDto implements IProgramContactDto {
    programId: string | undefined;
    roleClassificationValueId: string | undefined;
    userProfileId: string | undefined;
    newFlag: boolean | undefined;
    id: string | undefined;

    constructor(data?: IProgramContactDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.roleClassificationValueId = _data["roleClassificationValueId"];
            this.userProfileId = _data["userProfileId"];
            this.newFlag = _data["newFlag"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProgramContactDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramContactDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["roleClassificationValueId"] = this.roleClassificationValueId;
        data["userProfileId"] = this.userProfileId;
        data["newFlag"] = this.newFlag;
        data["id"] = this.id;
        return data; 
    }

    clone(): ProgramContactDto {
        const json = this.toJSON();
        let result = new ProgramContactDto();
        result.init(json);
        return result;
    }
}

export interface IProgramContactDto {
    programId: string | undefined;
    roleClassificationValueId: string | undefined;
    userProfileId: string | undefined;
    newFlag: boolean | undefined;
    id: string | undefined;
}

export class ProgramAttachmentDto implements IProgramAttachmentDto {
    programId: string | undefined;
    location: string | undefined;
    comments: string | undefined;
    attachmentTypeClassificationValueId: string | undefined;
    sequenceNumber: number | undefined;
    newFlag: boolean | undefined;
    fileUpload: FileUpload | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    id: string | undefined;

    constructor(data?: IProgramAttachmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.location = _data["location"];
            this.comments = _data["comments"];
            this.attachmentTypeClassificationValueId = _data["attachmentTypeClassificationValueId"];
            this.sequenceNumber = _data["sequenceNumber"];
            this.newFlag = _data["newFlag"];
            this.fileUpload = _data["fileUpload"] ? FileUpload.fromJS(_data["fileUpload"]) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProgramAttachmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramAttachmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["location"] = this.location;
        data["comments"] = this.comments;
        data["attachmentTypeClassificationValueId"] = this.attachmentTypeClassificationValueId;
        data["sequenceNumber"] = this.sequenceNumber;
        data["newFlag"] = this.newFlag;
        data["fileUpload"] = this.fileUpload ? this.fileUpload.toJSON() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): ProgramAttachmentDto {
        const json = this.toJSON();
        let result = new ProgramAttachmentDto();
        result.init(json);
        return result;
    }
}

export interface IProgramAttachmentDto {
    programId: string | undefined;
    location: string | undefined;
    comments: string | undefined;
    attachmentTypeClassificationValueId: string | undefined;
    sequenceNumber: number | undefined;
    newFlag: boolean | undefined;
    fileUpload: FileUpload | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    id: string | undefined;
}

export class DtpProgramConfigDto implements IDtpProgramConfigDto {
    dtpProgramConfigurationId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    allowPushToLive: boolean | undefined;
    activationDate: Date | undefined;
    id: string | undefined;

    constructor(data?: IDtpProgramConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.allowPushToLive = _data["allowPushToLive"];
            this.activationDate = _data["activationDate"] ? new Date(_data["activationDate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtpProgramConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["allowPushToLive"] = this.allowPushToLive;
        data["activationDate"] = this.activationDate ? this.activationDate.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): DtpProgramConfigDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigDto {
    dtpProgramConfigurationId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    allowPushToLive: boolean | undefined;
    activationDate: Date | undefined;
    id: string | undefined;
}

export class TenantFileDto implements ITenantFileDto {
    fileTypeId: string | undefined;
    hasErrors: boolean | undefined;
    hasMissingFile: boolean | undefined;
    fileName: string | undefined;
    fileLocation: string | undefined;
    lastUpdatedDateTime: Date | undefined;

    constructor(data?: ITenantFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileTypeId = _data["fileTypeId"];
            this.hasErrors = _data["hasErrors"];
            this.hasMissingFile = _data["hasMissingFile"];
            this.fileName = _data["fileName"];
            this.fileLocation = _data["fileLocation"];
            this.lastUpdatedDateTime = _data["lastUpdatedDateTime"] ? new Date(_data["lastUpdatedDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TenantFileDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileTypeId"] = this.fileTypeId;
        data["hasErrors"] = this.hasErrors;
        data["hasMissingFile"] = this.hasMissingFile;
        data["fileName"] = this.fileName;
        data["fileLocation"] = this.fileLocation;
        data["lastUpdatedDateTime"] = this.lastUpdatedDateTime ? this.lastUpdatedDateTime.toISOString() : <any>undefined;
        return data; 
    }

    clone(): TenantFileDto {
        const json = this.toJSON();
        let result = new TenantFileDto();
        result.init(json);
        return result;
    }
}

export interface ITenantFileDto {
    fileTypeId: string | undefined;
    hasErrors: boolean | undefined;
    hasMissingFile: boolean | undefined;
    fileName: string | undefined;
    fileLocation: string | undefined;
    lastUpdatedDateTime: Date | undefined;
}

export class FileUpload implements IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    duplicateFileName: boolean | undefined;

    constructor(data?: IFileUpload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileDescription = _data["fileDescription"];
            this.fileType = _data["fileType"];
            this.base64FileContent = _data["base64FileContent"];
            this.location = _data["location"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.newFlag = _data["newFlag"];
            this.duplicateFileName = _data["duplicateFileName"];
        }
    }

    static fromJS(data: any): FileUpload {
        data = typeof data === 'object' ? data : {};
        let result = new FileUpload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileDescription"] = this.fileDescription;
        data["fileType"] = this.fileType;
        data["base64FileContent"] = this.base64FileContent;
        data["location"] = this.location;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["newFlag"] = this.newFlag;
        data["duplicateFileName"] = this.duplicateFileName;
        return data; 
    }

    clone(): FileUpload {
        const json = this.toJSON();
        let result = new FileUpload();
        result.init(json);
        return result;
    }
}

export interface IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    duplicateFileName: boolean | undefined;
}

export class AjaxResponseOfProgramReferenceDto implements IAjaxResponseOfProgramReferenceDto {
    result: ProgramReferenceDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfProgramReferenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ProgramReferenceDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfProgramReferenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfProgramReferenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfProgramReferenceDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfProgramReferenceDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfProgramReferenceDto {
    result: ProgramReferenceDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ProgramReferenceDto implements IProgramReferenceDto {
    programId: string | undefined;
    repDrivenFlag: boolean | undefined;
    institutionFlag: boolean | undefined;
    sourceTypes: string[] | undefined;

    constructor(data?: IProgramReferenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.repDrivenFlag = _data["repDrivenFlag"];
            this.institutionFlag = _data["institutionFlag"];
            if (Array.isArray(_data["sourceTypes"])) {
                this.sourceTypes = [] as any;
                for (let item of _data["sourceTypes"])
                    this.sourceTypes.push(item);
            }
        }
    }

    static fromJS(data: any): ProgramReferenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramReferenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["repDrivenFlag"] = this.repDrivenFlag;
        data["institutionFlag"] = this.institutionFlag;
        if (Array.isArray(this.sourceTypes)) {
            data["sourceTypes"] = [];
            for (let item of this.sourceTypes)
                data["sourceTypes"].push(item);
        }
        return data; 
    }

    clone(): ProgramReferenceDto {
        const json = this.toJSON();
        let result = new ProgramReferenceDto();
        result.init(json);
        return result;
    }
}

export interface IProgramReferenceDto {
    programId: string | undefined;
    repDrivenFlag: boolean | undefined;
    institutionFlag: boolean | undefined;
    sourceTypes: string[] | undefined;
}

export class AjaxResponseOfBlankSrfGenerationResultDto implements IAjaxResponseOfBlankSrfGenerationResultDto {
    result: BlankSrfGenerationResultDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfBlankSrfGenerationResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? BlankSrfGenerationResultDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfBlankSrfGenerationResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfBlankSrfGenerationResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfBlankSrfGenerationResultDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfBlankSrfGenerationResultDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfBlankSrfGenerationResultDto {
    result: BlankSrfGenerationResultDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class BlankSrfGenerationResultDto implements IBlankSrfGenerationResultDto {
    numberOfSetsToBeGenerated: number | undefined;
    numberOfPagesConfigured: number | undefined;
    numberOfGenerationFailures: number | undefined;
    numberOfGenerationSuccesses: number | undefined;
    message: string | undefined;

    constructor(data?: IBlankSrfGenerationResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numberOfSetsToBeGenerated = _data["numberOfSetsToBeGenerated"];
            this.numberOfPagesConfigured = _data["numberOfPagesConfigured"];
            this.numberOfGenerationFailures = _data["numberOfGenerationFailures"];
            this.numberOfGenerationSuccesses = _data["numberOfGenerationSuccesses"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): BlankSrfGenerationResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new BlankSrfGenerationResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numberOfSetsToBeGenerated"] = this.numberOfSetsToBeGenerated;
        data["numberOfPagesConfigured"] = this.numberOfPagesConfigured;
        data["numberOfGenerationFailures"] = this.numberOfGenerationFailures;
        data["numberOfGenerationSuccesses"] = this.numberOfGenerationSuccesses;
        data["message"] = this.message;
        return data; 
    }

    clone(): BlankSrfGenerationResultDto {
        const json = this.toJSON();
        let result = new BlankSrfGenerationResultDto();
        result.init(json);
        return result;
    }
}

export interface IBlankSrfGenerationResultDto {
    numberOfSetsToBeGenerated: number | undefined;
    numberOfPagesConfigured: number | undefined;
    numberOfGenerationFailures: number | undefined;
    numberOfGenerationSuccesses: number | undefined;
    message: string | undefined;
}

export class AjaxResponseOfPageValidationOfProgramConfigurationProfileDto implements IAjaxResponseOfPageValidationOfProgramConfigurationProfileDto {
    result: PageValidationOfProgramConfigurationProfileDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramConfigurationProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramConfigurationProfileDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramConfigurationProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramConfigurationProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramConfigurationProfileDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramConfigurationProfileDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramConfigurationProfileDto {
    result: PageValidationOfProgramConfigurationProfileDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramConfigurationProfileDto implements IPageValidationOfProgramConfigurationProfileDto {
    dataDto: ProgramConfigurationProfileDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramConfigurationProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramConfigurationProfileDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramConfigurationProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramConfigurationProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramConfigurationProfileDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramConfigurationProfileDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramConfigurationProfileDto {
    dataDto: ProgramConfigurationProfileDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramConfigurationProfileDto implements IProgramConfigurationProfileDto {
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    copiedFromConfigurationDate: Date | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    lastModifiedUserId: number | undefined;
    lastModifiedTime: Date | undefined;
    newComment: string | undefined;
    dtpProgramConfigurationComments: DtpProgramConfigCommentDto[] | undefined;
    dtpProgramConfigurationAttachments: DtpProgramConfigAttachmentDto[] | undefined;
    id: string | undefined;

    constructor(data?: IProgramConfigurationProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
            this.copiedFromConfigurationDate = _data["copiedFromConfigurationDate"] ? new Date(_data["copiedFromConfigurationDate"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifiedUserId = _data["lastModifiedUserId"];
            this.lastModifiedTime = _data["lastModifiedTime"] ? new Date(_data["lastModifiedTime"].toString()) : <any>undefined;
            this.newComment = _data["newComment"];
            if (Array.isArray(_data["dtpProgramConfigurationComments"])) {
                this.dtpProgramConfigurationComments = [] as any;
                for (let item of _data["dtpProgramConfigurationComments"])
                    this.dtpProgramConfigurationComments.push(DtpProgramConfigCommentDto.fromJS(item));
            }
            if (Array.isArray(_data["dtpProgramConfigurationAttachments"])) {
                this.dtpProgramConfigurationAttachments = [] as any;
                for (let item of _data["dtpProgramConfigurationAttachments"])
                    this.dtpProgramConfigurationAttachments.push(DtpProgramConfigAttachmentDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProgramConfigurationProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramConfigurationProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        data["copiedFromConfigurationDate"] = this.copiedFromConfigurationDate ? this.copiedFromConfigurationDate.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifiedUserId"] = this.lastModifiedUserId;
        data["lastModifiedTime"] = this.lastModifiedTime ? this.lastModifiedTime.toISOString() : <any>undefined;
        data["newComment"] = this.newComment;
        if (Array.isArray(this.dtpProgramConfigurationComments)) {
            data["dtpProgramConfigurationComments"] = [];
            for (let item of this.dtpProgramConfigurationComments)
                data["dtpProgramConfigurationComments"].push(item.toJSON());
        }
        if (Array.isArray(this.dtpProgramConfigurationAttachments)) {
            data["dtpProgramConfigurationAttachments"] = [];
            for (let item of this.dtpProgramConfigurationAttachments)
                data["dtpProgramConfigurationAttachments"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): ProgramConfigurationProfileDto {
        const json = this.toJSON();
        let result = new ProgramConfigurationProfileDto();
        result.init(json);
        return result;
    }
}

export interface IProgramConfigurationProfileDto {
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    copiedFromConfigurationDate: Date | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    lastModifiedUserId: number | undefined;
    lastModifiedTime: Date | undefined;
    newComment: string | undefined;
    dtpProgramConfigurationComments: DtpProgramConfigCommentDto[] | undefined;
    dtpProgramConfigurationAttachments: DtpProgramConfigAttachmentDto[] | undefined;
    id: string | undefined;
}

export class DtpProgramConfigCommentDto implements IDtpProgramConfigCommentDto {
    dtpProgramConfigurationId: string | undefined;
    commentsText: string | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    id: string | undefined;

    constructor(data?: IDtpProgramConfigCommentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.commentsText = _data["commentsText"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtpProgramConfigCommentDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigCommentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["commentsText"] = this.commentsText;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): DtpProgramConfigCommentDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigCommentDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigCommentDto {
    dtpProgramConfigurationId: string | undefined;
    commentsText: string | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    id: string | undefined;
}

export class DtpProgramConfigAttachmentDto implements IDtpProgramConfigAttachmentDto {
    dtpProgramConfigurationId: string | undefined;
    dtpProgramConfigurationSrfId: string | undefined;
    attachmentTypeClassificationValueId: string | undefined;
    commentsText: string | undefined;
    sequenceNbr: number | undefined;
    newFlag: boolean | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    fileUpload: FileUpload | undefined;
    id: string | undefined;

    constructor(data?: IDtpProgramConfigAttachmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.dtpProgramConfigurationSrfId = _data["dtpProgramConfigurationSrfId"];
            this.attachmentTypeClassificationValueId = _data["attachmentTypeClassificationValueId"];
            this.commentsText = _data["commentsText"];
            this.sequenceNbr = _data["sequenceNbr"];
            this.newFlag = _data["newFlag"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.fileUpload = _data["fileUpload"] ? FileUpload.fromJS(_data["fileUpload"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtpProgramConfigAttachmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigAttachmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["dtpProgramConfigurationSrfId"] = this.dtpProgramConfigurationSrfId;
        data["attachmentTypeClassificationValueId"] = this.attachmentTypeClassificationValueId;
        data["commentsText"] = this.commentsText;
        data["sequenceNbr"] = this.sequenceNbr;
        data["newFlag"] = this.newFlag;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["fileUpload"] = this.fileUpload ? this.fileUpload.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): DtpProgramConfigAttachmentDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigAttachmentDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigAttachmentDto {
    dtpProgramConfigurationId: string | undefined;
    dtpProgramConfigurationSrfId: string | undefined;
    attachmentTypeClassificationValueId: string | undefined;
    commentsText: string | undefined;
    sequenceNbr: number | undefined;
    newFlag: boolean | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    fileUpload: FileUpload | undefined;
    id: string | undefined;
}

export class AjaxResponseOfPageValidationOfProgramProductsDto implements IAjaxResponseOfPageValidationOfProgramProductsDto {
    result: PageValidationOfProgramProductsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramProductsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramProductsDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramProductsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramProductsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramProductsDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramProductsDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramProductsDto {
    result: PageValidationOfProgramProductsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramProductsDto implements IPageValidationOfProgramProductsDto {
    dataDto: ProgramProductsDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramProductsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramProductsDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramProductsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramProductsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramProductsDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramProductsDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramProductsDto {
    dataDto: ProgramProductsDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramProductsDto implements IProgramProductsDto {
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    dtpProgramConfigurationProducts: DtpProgramConfigurationProductDto[] | undefined;

    constructor(data?: IProgramProductsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            if (Array.isArray(_data["dtpProgramConfigurationProducts"])) {
                this.dtpProgramConfigurationProducts = [] as any;
                for (let item of _data["dtpProgramConfigurationProducts"])
                    this.dtpProgramConfigurationProducts.push(DtpProgramConfigurationProductDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProgramProductsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramProductsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        if (Array.isArray(this.dtpProgramConfigurationProducts)) {
            data["dtpProgramConfigurationProducts"] = [];
            for (let item of this.dtpProgramConfigurationProducts)
                data["dtpProgramConfigurationProducts"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProgramProductsDto {
        const json = this.toJSON();
        let result = new ProgramProductsDto();
        result.init(json);
        return result;
    }
}

export interface IProgramProductsDto {
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    dtpProgramConfigurationProducts: DtpProgramConfigurationProductDto[] | undefined;
}

export class DtpProgramConfigurationProductDto implements IDtpProgramConfigurationProductDto {
    dtpProgramConfigurationId: string | undefined;
    productId: string | undefined;
    productTypeId: string | undefined;
    handwrittenQtyFlag: boolean | undefined;
    offeredQty: number | undefined;
    pageNbr: number | undefined;
    displayOrderNbr: number | undefined;
    srfIncludeFlag: boolean | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    brandName: string | undefined;
    dtpProgramConfigurationProductDeciles: DtpProgramConfigurationProductDecileDto[] | undefined;
    id: string | undefined;

    constructor(data?: IDtpProgramConfigurationProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.productId = _data["productId"];
            this.productTypeId = _data["productTypeId"];
            this.handwrittenQtyFlag = _data["handwrittenQtyFlag"];
            this.offeredQty = _data["offeredQty"];
            this.pageNbr = _data["pageNbr"];
            this.displayOrderNbr = _data["displayOrderNbr"];
            this.srfIncludeFlag = _data["srfIncludeFlag"];
            this.wmsProductName = _data["wmsProductName"];
            this.wmsProductId = _data["wmsProductId"];
            this.brandName = _data["brandName"];
            if (Array.isArray(_data["dtpProgramConfigurationProductDeciles"])) {
                this.dtpProgramConfigurationProductDeciles = [] as any;
                for (let item of _data["dtpProgramConfigurationProductDeciles"])
                    this.dtpProgramConfigurationProductDeciles.push(DtpProgramConfigurationProductDecileDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtpProgramConfigurationProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigurationProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["productId"] = this.productId;
        data["productTypeId"] = this.productTypeId;
        data["handwrittenQtyFlag"] = this.handwrittenQtyFlag;
        data["offeredQty"] = this.offeredQty;
        data["pageNbr"] = this.pageNbr;
        data["displayOrderNbr"] = this.displayOrderNbr;
        data["srfIncludeFlag"] = this.srfIncludeFlag;
        data["wmsProductName"] = this.wmsProductName;
        data["wmsProductId"] = this.wmsProductId;
        data["brandName"] = this.brandName;
        if (Array.isArray(this.dtpProgramConfigurationProductDeciles)) {
            data["dtpProgramConfigurationProductDeciles"] = [];
            for (let item of this.dtpProgramConfigurationProductDeciles)
                data["dtpProgramConfigurationProductDeciles"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): DtpProgramConfigurationProductDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigurationProductDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigurationProductDto {
    dtpProgramConfigurationId: string | undefined;
    productId: string | undefined;
    productTypeId: string | undefined;
    handwrittenQtyFlag: boolean | undefined;
    offeredQty: number | undefined;
    pageNbr: number | undefined;
    displayOrderNbr: number | undefined;
    srfIncludeFlag: boolean | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    brandName: string | undefined;
    dtpProgramConfigurationProductDeciles: DtpProgramConfigurationProductDecileDto[] | undefined;
    id: string | undefined;
}

export class DtpProgramConfigurationProductDecileDto implements IDtpProgramConfigurationProductDecileDto {
    dtpProgramConfigurationProductId: string | undefined;
    decileClassificationValueId: string | undefined;
    offeredQty: number | undefined;
    id: string | undefined;

    constructor(data?: IDtpProgramConfigurationProductDecileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationProductId = _data["dtpProgramConfigurationProductId"];
            this.decileClassificationValueId = _data["decileClassificationValueId"];
            this.offeredQty = _data["offeredQty"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtpProgramConfigurationProductDecileDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigurationProductDecileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationProductId"] = this.dtpProgramConfigurationProductId;
        data["decileClassificationValueId"] = this.decileClassificationValueId;
        data["offeredQty"] = this.offeredQty;
        data["id"] = this.id;
        return data; 
    }

    clone(): DtpProgramConfigurationProductDecileDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigurationProductDecileDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigurationProductDecileDto {
    dtpProgramConfigurationProductId: string | undefined;
    decileClassificationValueId: string | undefined;
    offeredQty: number | undefined;
    id: string | undefined;
}

export class AjaxResponseOfPageValidationOfProgramOrderSourcesDto implements IAjaxResponseOfPageValidationOfProgramOrderSourcesDto {
    result: PageValidationOfProgramOrderSourcesDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramOrderSourcesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramOrderSourcesDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramOrderSourcesDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramOrderSourcesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramOrderSourcesDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramOrderSourcesDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramOrderSourcesDto {
    result: PageValidationOfProgramOrderSourcesDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramOrderSourcesDto implements IPageValidationOfProgramOrderSourcesDto {
    dataDto: ProgramOrderSourcesDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramOrderSourcesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramOrderSourcesDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramOrderSourcesDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramOrderSourcesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramOrderSourcesDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramOrderSourcesDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramOrderSourcesDto {
    dataDto: ProgramOrderSourcesDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramOrderSourcesDto implements IProgramOrderSourcesDto {
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    orderSourceTypeIds: string[] | undefined;
    srfs: DtpProgramConfigSrfDto[] | undefined;
    dtpProgramConfigurationProducts: DtpProgramConfigurationProductDto[] | undefined;

    constructor(data?: IProgramOrderSourcesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            if (Array.isArray(_data["orderSourceTypeIds"])) {
                this.orderSourceTypeIds = [] as any;
                for (let item of _data["orderSourceTypeIds"])
                    this.orderSourceTypeIds.push(item);
            }
            if (Array.isArray(_data["srfs"])) {
                this.srfs = [] as any;
                for (let item of _data["srfs"])
                    this.srfs.push(DtpProgramConfigSrfDto.fromJS(item));
            }
            if (Array.isArray(_data["dtpProgramConfigurationProducts"])) {
                this.dtpProgramConfigurationProducts = [] as any;
                for (let item of _data["dtpProgramConfigurationProducts"])
                    this.dtpProgramConfigurationProducts.push(DtpProgramConfigurationProductDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProgramOrderSourcesDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramOrderSourcesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        if (Array.isArray(this.orderSourceTypeIds)) {
            data["orderSourceTypeIds"] = [];
            for (let item of this.orderSourceTypeIds)
                data["orderSourceTypeIds"].push(item);
        }
        if (Array.isArray(this.srfs)) {
            data["srfs"] = [];
            for (let item of this.srfs)
                data["srfs"].push(item.toJSON());
        }
        if (Array.isArray(this.dtpProgramConfigurationProducts)) {
            data["dtpProgramConfigurationProducts"] = [];
            for (let item of this.dtpProgramConfigurationProducts)
                data["dtpProgramConfigurationProducts"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProgramOrderSourcesDto {
        const json = this.toJSON();
        let result = new ProgramOrderSourcesDto();
        result.init(json);
        return result;
    }
}

export interface IProgramOrderSourcesDto {
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    orderSourceTypeIds: string[] | undefined;
    srfs: DtpProgramConfigSrfDto[] | undefined;
    dtpProgramConfigurationProducts: DtpProgramConfigurationProductDto[] | undefined;
}

export class DtpProgramConfigSrfDto implements IDtpProgramConfigSrfDto {
    paperSourceNbr: number | undefined;
    receiveOfferDataFlag: boolean | undefined;
    paperSourceName: string | undefined;
    generatorClassificationValueId: string | undefined;
    srfTypeClassificationValueId: string | undefined;
    sourceClassificationValueId: string | undefined;
    offerTypeClassificationValueId: string | undefined;
    id: string | undefined;

    constructor(data?: IDtpProgramConfigSrfDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paperSourceNbr = _data["paperSourceNbr"];
            this.receiveOfferDataFlag = _data["receiveOfferDataFlag"];
            this.paperSourceName = _data["paperSourceName"];
            this.generatorClassificationValueId = _data["generatorClassificationValueId"];
            this.srfTypeClassificationValueId = _data["srfTypeClassificationValueId"];
            this.sourceClassificationValueId = _data["sourceClassificationValueId"];
            this.offerTypeClassificationValueId = _data["offerTypeClassificationValueId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtpProgramConfigSrfDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigSrfDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paperSourceNbr"] = this.paperSourceNbr;
        data["receiveOfferDataFlag"] = this.receiveOfferDataFlag;
        data["paperSourceName"] = this.paperSourceName;
        data["generatorClassificationValueId"] = this.generatorClassificationValueId;
        data["srfTypeClassificationValueId"] = this.srfTypeClassificationValueId;
        data["sourceClassificationValueId"] = this.sourceClassificationValueId;
        data["offerTypeClassificationValueId"] = this.offerTypeClassificationValueId;
        data["id"] = this.id;
        return data; 
    }

    clone(): DtpProgramConfigSrfDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigSrfDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigSrfDto {
    paperSourceNbr: number | undefined;
    receiveOfferDataFlag: boolean | undefined;
    paperSourceName: string | undefined;
    generatorClassificationValueId: string | undefined;
    srfTypeClassificationValueId: string | undefined;
    sourceClassificationValueId: string | undefined;
    offerTypeClassificationValueId: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto implements IAjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto {
    result: PageValidationOfOrderValidationMissingKidAndValuesRulesDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfOrderValidationMissingKidAndValuesRulesDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfOrderValidationMissingKidAndValuesRulesDto {
    result: PageValidationOfOrderValidationMissingKidAndValuesRulesDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfOrderValidationMissingKidAndValuesRulesDto implements IPageValidationOfOrderValidationMissingKidAndValuesRulesDto {
    dataDto: OrderValidationMissingKidAndValuesRulesDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfOrderValidationMissingKidAndValuesRulesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? OrderValidationMissingKidAndValuesRulesDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfOrderValidationMissingKidAndValuesRulesDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfOrderValidationMissingKidAndValuesRulesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfOrderValidationMissingKidAndValuesRulesDto {
        const json = this.toJSON();
        let result = new PageValidationOfOrderValidationMissingKidAndValuesRulesDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfOrderValidationMissingKidAndValuesRulesDto {
    dataDto: OrderValidationMissingKidAndValuesRulesDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class OrderValidationMissingKidAndValuesRulesDto implements IOrderValidationMissingKidAndValuesRulesDto {
    ruleCards: MissingRuleCardDto[] | undefined;
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    isAvailableForConfig: boolean | undefined;
    hasBeenModified: boolean | undefined;

    constructor(data?: IOrderValidationMissingKidAndValuesRulesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ruleCards"])) {
                this.ruleCards = [] as any;
                for (let item of _data["ruleCards"])
                    this.ruleCards.push(MissingRuleCardDto.fromJS(item));
            }
            this.programId = _data["programId"];
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.isAvailableForConfig = _data["isAvailableForConfig"];
            this.hasBeenModified = _data["hasBeenModified"];
        }
    }

    static fromJS(data: any): OrderValidationMissingKidAndValuesRulesDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderValidationMissingKidAndValuesRulesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ruleCards)) {
            data["ruleCards"] = [];
            for (let item of this.ruleCards)
                data["ruleCards"].push(item.toJSON());
        }
        data["programId"] = this.programId;
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["isAvailableForConfig"] = this.isAvailableForConfig;
        data["hasBeenModified"] = this.hasBeenModified;
        return data; 
    }

    clone(): OrderValidationMissingKidAndValuesRulesDto {
        const json = this.toJSON();
        let result = new OrderValidationMissingKidAndValuesRulesDto();
        result.init(json);
        return result;
    }
}

export interface IOrderValidationMissingKidAndValuesRulesDto {
    ruleCards: MissingRuleCardDto[] | undefined;
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    isAvailableForConfig: boolean | undefined;
    hasBeenModified: boolean | undefined;
}

export class MissingRuleCardDto implements IMissingRuleCardDto {
    rules: RuleDto[] | undefined;
    ruleGroupCode: string | undefined;
    ruleGroupName: string | undefined;

    constructor(data?: IMissingRuleCardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rules"])) {
                this.rules = [] as any;
                for (let item of _data["rules"])
                    this.rules.push(RuleDto.fromJS(item));
            }
            this.ruleGroupCode = _data["ruleGroupCode"];
            this.ruleGroupName = _data["ruleGroupName"];
        }
    }

    static fromJS(data: any): MissingRuleCardDto {
        data = typeof data === 'object' ? data : {};
        let result = new MissingRuleCardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rules)) {
            data["rules"] = [];
            for (let item of this.rules)
                data["rules"].push(item.toJSON());
        }
        data["ruleGroupCode"] = this.ruleGroupCode;
        data["ruleGroupName"] = this.ruleGroupName;
        return data; 
    }

    clone(): MissingRuleCardDto {
        const json = this.toJSON();
        let result = new MissingRuleCardDto();
        result.init(json);
        return result;
    }
}

export interface IMissingRuleCardDto {
    rules: RuleDto[] | undefined;
    ruleGroupCode: string | undefined;
    ruleGroupName: string | undefined;
}

export class RuleDto implements IRuleDto {
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: IRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): RuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): RuleDto {
        const json = this.toJSON();
        let result = new RuleDto();
        result.init(json);
        return result;
    }
}

export interface IRuleDto {
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto implements IAjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto {
    result: PageValidationOfOrderValidationAssureHcpRulesDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfOrderValidationAssureHcpRulesDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfOrderValidationAssureHcpRulesDto {
    result: PageValidationOfOrderValidationAssureHcpRulesDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfOrderValidationAssureHcpRulesDto implements IPageValidationOfOrderValidationAssureHcpRulesDto {
    dataDto: OrderValidationAssureHcpRulesDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfOrderValidationAssureHcpRulesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? OrderValidationAssureHcpRulesDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfOrderValidationAssureHcpRulesDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfOrderValidationAssureHcpRulesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfOrderValidationAssureHcpRulesDto {
        const json = this.toJSON();
        let result = new PageValidationOfOrderValidationAssureHcpRulesDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfOrderValidationAssureHcpRulesDto {
    dataDto: OrderValidationAssureHcpRulesDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class OrderValidationAssureHcpRulesDto implements IOrderValidationAssureHcpRulesDto {
    ruleCards: AssureHcpRuleCardDto[] | undefined;
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    isAvailableForConfig: boolean | undefined;
    hasBeenModified: boolean | undefined;

    constructor(data?: IOrderValidationAssureHcpRulesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ruleCards"])) {
                this.ruleCards = [] as any;
                for (let item of _data["ruleCards"])
                    this.ruleCards.push(AssureHcpRuleCardDto.fromJS(item));
            }
            this.programId = _data["programId"];
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.isAvailableForConfig = _data["isAvailableForConfig"];
            this.hasBeenModified = _data["hasBeenModified"];
        }
    }

    static fromJS(data: any): OrderValidationAssureHcpRulesDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderValidationAssureHcpRulesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ruleCards)) {
            data["ruleCards"] = [];
            for (let item of this.ruleCards)
                data["ruleCards"].push(item.toJSON());
        }
        data["programId"] = this.programId;
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["isAvailableForConfig"] = this.isAvailableForConfig;
        data["hasBeenModified"] = this.hasBeenModified;
        return data; 
    }

    clone(): OrderValidationAssureHcpRulesDto {
        const json = this.toJSON();
        let result = new OrderValidationAssureHcpRulesDto();
        result.init(json);
        return result;
    }
}

export interface IOrderValidationAssureHcpRulesDto {
    ruleCards: AssureHcpRuleCardDto[] | undefined;
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    isAvailableForConfig: boolean | undefined;
    hasBeenModified: boolean | undefined;
}

export class AssureHcpRuleCardDto implements IAssureHcpRuleCardDto {
    rules: AssureHcpRuleDto[] | undefined;
    ruleGroupCode: string | undefined;
    ruleGroupName: string | undefined;

    constructor(data?: IAssureHcpRuleCardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rules"])) {
                this.rules = [] as any;
                for (let item of _data["rules"])
                    this.rules.push(AssureHcpRuleDto.fromJS(item));
            }
            this.ruleGroupCode = _data["ruleGroupCode"];
            this.ruleGroupName = _data["ruleGroupName"];
        }
    }

    static fromJS(data: any): AssureHcpRuleCardDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssureHcpRuleCardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rules)) {
            data["rules"] = [];
            for (let item of this.rules)
                data["rules"].push(item.toJSON());
        }
        data["ruleGroupCode"] = this.ruleGroupCode;
        data["ruleGroupName"] = this.ruleGroupName;
        return data; 
    }

    clone(): AssureHcpRuleCardDto {
        const json = this.toJSON();
        let result = new AssureHcpRuleCardDto();
        result.init(json);
        return result;
    }
}

export interface IAssureHcpRuleCardDto {
    rules: AssureHcpRuleDto[] | undefined;
    ruleGroupCode: string | undefined;
    ruleGroupName: string | undefined;
}

export class AssureHcpRuleDto implements IAssureHcpRuleDto {
    gracePeriodConfigFlag: boolean | undefined;
    days: number | undefined;
    isGracePeriodModeSelectable: boolean | undefined;
    gracePeriodModeId: string | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: IAssureHcpRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gracePeriodConfigFlag = _data["gracePeriodConfigFlag"];
            this.days = _data["days"];
            this.isGracePeriodModeSelectable = _data["isGracePeriodModeSelectable"];
            this.gracePeriodModeId = _data["gracePeriodModeId"];
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): AssureHcpRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssureHcpRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gracePeriodConfigFlag"] = this.gracePeriodConfigFlag;
        data["days"] = this.days;
        data["isGracePeriodModeSelectable"] = this.isGracePeriodModeSelectable;
        data["gracePeriodModeId"] = this.gracePeriodModeId;
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): AssureHcpRuleDto {
        const json = this.toJSON();
        let result = new AssureHcpRuleDto();
        result.init(json);
        return result;
    }
}

export interface IAssureHcpRuleDto {
    gracePeriodConfigFlag: boolean | undefined;
    days: number | undefined;
    isGracePeriodModeSelectable: boolean | undefined;
    gracePeriodModeId: string | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto implements IAjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto {
    result: PageValidationOfOrderValidationRestrictiveConditionRulesDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfOrderValidationRestrictiveConditionRulesDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfOrderValidationRestrictiveConditionRulesDto {
    result: PageValidationOfOrderValidationRestrictiveConditionRulesDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfOrderValidationRestrictiveConditionRulesDto implements IPageValidationOfOrderValidationRestrictiveConditionRulesDto {
    dataDto: OrderValidationRestrictiveConditionRulesDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfOrderValidationRestrictiveConditionRulesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? OrderValidationRestrictiveConditionRulesDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfOrderValidationRestrictiveConditionRulesDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfOrderValidationRestrictiveConditionRulesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfOrderValidationRestrictiveConditionRulesDto {
        const json = this.toJSON();
        let result = new PageValidationOfOrderValidationRestrictiveConditionRulesDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfOrderValidationRestrictiveConditionRulesDto {
    dataDto: OrderValidationRestrictiveConditionRulesDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class OrderValidationRestrictiveConditionRulesDto implements IOrderValidationRestrictiveConditionRulesDto {
    ruleCards: RestrictiveConditionRuleCardDto[] | undefined;
    programProducts: ProductDetailsDto[] | undefined;
    programProductTypes: ProductTypeDto[] | undefined;
    programOrderSourceIds: string[] | undefined;
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    isAvailableForConfig: boolean | undefined;
    hasBeenModified: boolean | undefined;

    constructor(data?: IOrderValidationRestrictiveConditionRulesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ruleCards"])) {
                this.ruleCards = [] as any;
                for (let item of _data["ruleCards"])
                    this.ruleCards.push(RestrictiveConditionRuleCardDto.fromJS(item));
            }
            if (Array.isArray(_data["programProducts"])) {
                this.programProducts = [] as any;
                for (let item of _data["programProducts"])
                    this.programProducts.push(ProductDetailsDto.fromJS(item));
            }
            if (Array.isArray(_data["programProductTypes"])) {
                this.programProductTypes = [] as any;
                for (let item of _data["programProductTypes"])
                    this.programProductTypes.push(ProductTypeDto.fromJS(item));
            }
            if (Array.isArray(_data["programOrderSourceIds"])) {
                this.programOrderSourceIds = [] as any;
                for (let item of _data["programOrderSourceIds"])
                    this.programOrderSourceIds.push(item);
            }
            this.programId = _data["programId"];
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.isAvailableForConfig = _data["isAvailableForConfig"];
            this.hasBeenModified = _data["hasBeenModified"];
        }
    }

    static fromJS(data: any): OrderValidationRestrictiveConditionRulesDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderValidationRestrictiveConditionRulesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ruleCards)) {
            data["ruleCards"] = [];
            for (let item of this.ruleCards)
                data["ruleCards"].push(item.toJSON());
        }
        if (Array.isArray(this.programProducts)) {
            data["programProducts"] = [];
            for (let item of this.programProducts)
                data["programProducts"].push(item.toJSON());
        }
        if (Array.isArray(this.programProductTypes)) {
            data["programProductTypes"] = [];
            for (let item of this.programProductTypes)
                data["programProductTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.programOrderSourceIds)) {
            data["programOrderSourceIds"] = [];
            for (let item of this.programOrderSourceIds)
                data["programOrderSourceIds"].push(item);
        }
        data["programId"] = this.programId;
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["isAvailableForConfig"] = this.isAvailableForConfig;
        data["hasBeenModified"] = this.hasBeenModified;
        return data; 
    }

    clone(): OrderValidationRestrictiveConditionRulesDto {
        const json = this.toJSON();
        let result = new OrderValidationRestrictiveConditionRulesDto();
        result.init(json);
        return result;
    }
}

export interface IOrderValidationRestrictiveConditionRulesDto {
    ruleCards: RestrictiveConditionRuleCardDto[] | undefined;
    programProducts: ProductDetailsDto[] | undefined;
    programProductTypes: ProductTypeDto[] | undefined;
    programOrderSourceIds: string[] | undefined;
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    isAvailableForConfig: boolean | undefined;
    hasBeenModified: boolean | undefined;
}

export class RestrictiveConditionRuleCardDto implements IRestrictiveConditionRuleCardDto {
    simpleRules: RuleDto[] | undefined;
    cannotSampleToTheProfessionalDesignationRuleDto: CannotSampleToTheProfessionalDesignationRuleDto | undefined;
    cannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto: CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto | undefined;
    cannotSampleToTheRecipientStateForAnAssociatedProductRuleDto: CannotSampleToTheRecipientStateForAnAssociatedProductRuleDto | undefined;
    exceededQuantityOfProductPerOrderRuleDto: ExceededQuantityOfProductPerOrderRuleDto | undefined;
    recipientAddressContainsPoBoxRuleDto: RecipientAddressContainsPoBoxRuleDto | undefined;
    exceededOrderLimitRuleDto: ExceededOrderLimitRuleDto | undefined;
    exceededOrderAocLimitRuleDto: ExceededOrderAocLimitRuleDto | undefined;
    orderExpiredRuleDto: OrderExpiredRuleDto | undefined;
    unauthorizedSrfFormChangeRuleDto: UnauthorizedSrfFormChangeRuleDto | undefined;
    exceededPractitionerAllocationQuantityRuleDto: ExceededPractitionerAllocationQuantityRuleDto | undefined;
    exceededTerritoryAllocationRuleDto: ExceededTerritoryAllocationRuleDto | undefined;
    ruleGroupCode: string | undefined;
    ruleGroupName: string | undefined;

    constructor(data?: IRestrictiveConditionRuleCardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["simpleRules"])) {
                this.simpleRules = [] as any;
                for (let item of _data["simpleRules"])
                    this.simpleRules.push(RuleDto.fromJS(item));
            }
            this.cannotSampleToTheProfessionalDesignationRuleDto = _data["cannotSampleToTheProfessionalDesignationRuleDto"] ? CannotSampleToTheProfessionalDesignationRuleDto.fromJS(_data["cannotSampleToTheProfessionalDesignationRuleDto"]) : <any>undefined;
            this.cannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto = _data["cannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto"] ? CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto.fromJS(_data["cannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto"]) : <any>undefined;
            this.cannotSampleToTheRecipientStateForAnAssociatedProductRuleDto = _data["cannotSampleToTheRecipientStateForAnAssociatedProductRuleDto"] ? CannotSampleToTheRecipientStateForAnAssociatedProductRuleDto.fromJS(_data["cannotSampleToTheRecipientStateForAnAssociatedProductRuleDto"]) : <any>undefined;
            this.exceededQuantityOfProductPerOrderRuleDto = _data["exceededQuantityOfProductPerOrderRuleDto"] ? ExceededQuantityOfProductPerOrderRuleDto.fromJS(_data["exceededQuantityOfProductPerOrderRuleDto"]) : <any>undefined;
            this.recipientAddressContainsPoBoxRuleDto = _data["recipientAddressContainsPoBoxRuleDto"] ? RecipientAddressContainsPoBoxRuleDto.fromJS(_data["recipientAddressContainsPoBoxRuleDto"]) : <any>undefined;
            this.exceededOrderLimitRuleDto = _data["exceededOrderLimitRuleDto"] ? ExceededOrderLimitRuleDto.fromJS(_data["exceededOrderLimitRuleDto"]) : <any>undefined;
            this.exceededOrderAocLimitRuleDto = _data["exceededOrderAocLimitRuleDto"] ? ExceededOrderAocLimitRuleDto.fromJS(_data["exceededOrderAocLimitRuleDto"]) : <any>undefined;
            this.orderExpiredRuleDto = _data["orderExpiredRuleDto"] ? OrderExpiredRuleDto.fromJS(_data["orderExpiredRuleDto"]) : <any>undefined;
            this.unauthorizedSrfFormChangeRuleDto = _data["unauthorizedSrfFormChangeRuleDto"] ? UnauthorizedSrfFormChangeRuleDto.fromJS(_data["unauthorizedSrfFormChangeRuleDto"]) : <any>undefined;
            this.exceededPractitionerAllocationQuantityRuleDto = _data["exceededPractitionerAllocationQuantityRuleDto"] ? ExceededPractitionerAllocationQuantityRuleDto.fromJS(_data["exceededPractitionerAllocationQuantityRuleDto"]) : <any>undefined;
            this.exceededTerritoryAllocationRuleDto = _data["exceededTerritoryAllocationRuleDto"] ? ExceededTerritoryAllocationRuleDto.fromJS(_data["exceededTerritoryAllocationRuleDto"]) : <any>undefined;
            this.ruleGroupCode = _data["ruleGroupCode"];
            this.ruleGroupName = _data["ruleGroupName"];
        }
    }

    static fromJS(data: any): RestrictiveConditionRuleCardDto {
        data = typeof data === 'object' ? data : {};
        let result = new RestrictiveConditionRuleCardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.simpleRules)) {
            data["simpleRules"] = [];
            for (let item of this.simpleRules)
                data["simpleRules"].push(item.toJSON());
        }
        data["cannotSampleToTheProfessionalDesignationRuleDto"] = this.cannotSampleToTheProfessionalDesignationRuleDto ? this.cannotSampleToTheProfessionalDesignationRuleDto.toJSON() : <any>undefined;
        data["cannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto"] = this.cannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto ? this.cannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto.toJSON() : <any>undefined;
        data["cannotSampleToTheRecipientStateForAnAssociatedProductRuleDto"] = this.cannotSampleToTheRecipientStateForAnAssociatedProductRuleDto ? this.cannotSampleToTheRecipientStateForAnAssociatedProductRuleDto.toJSON() : <any>undefined;
        data["exceededQuantityOfProductPerOrderRuleDto"] = this.exceededQuantityOfProductPerOrderRuleDto ? this.exceededQuantityOfProductPerOrderRuleDto.toJSON() : <any>undefined;
        data["recipientAddressContainsPoBoxRuleDto"] = this.recipientAddressContainsPoBoxRuleDto ? this.recipientAddressContainsPoBoxRuleDto.toJSON() : <any>undefined;
        data["exceededOrderLimitRuleDto"] = this.exceededOrderLimitRuleDto ? this.exceededOrderLimitRuleDto.toJSON() : <any>undefined;
        data["exceededOrderAocLimitRuleDto"] = this.exceededOrderAocLimitRuleDto ? this.exceededOrderAocLimitRuleDto.toJSON() : <any>undefined;
        data["orderExpiredRuleDto"] = this.orderExpiredRuleDto ? this.orderExpiredRuleDto.toJSON() : <any>undefined;
        data["unauthorizedSrfFormChangeRuleDto"] = this.unauthorizedSrfFormChangeRuleDto ? this.unauthorizedSrfFormChangeRuleDto.toJSON() : <any>undefined;
        data["exceededPractitionerAllocationQuantityRuleDto"] = this.exceededPractitionerAllocationQuantityRuleDto ? this.exceededPractitionerAllocationQuantityRuleDto.toJSON() : <any>undefined;
        data["exceededTerritoryAllocationRuleDto"] = this.exceededTerritoryAllocationRuleDto ? this.exceededTerritoryAllocationRuleDto.toJSON() : <any>undefined;
        data["ruleGroupCode"] = this.ruleGroupCode;
        data["ruleGroupName"] = this.ruleGroupName;
        return data; 
    }

    clone(): RestrictiveConditionRuleCardDto {
        const json = this.toJSON();
        let result = new RestrictiveConditionRuleCardDto();
        result.init(json);
        return result;
    }
}

export interface IRestrictiveConditionRuleCardDto {
    simpleRules: RuleDto[] | undefined;
    cannotSampleToTheProfessionalDesignationRuleDto: CannotSampleToTheProfessionalDesignationRuleDto | undefined;
    cannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto: CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto | undefined;
    cannotSampleToTheRecipientStateForAnAssociatedProductRuleDto: CannotSampleToTheRecipientStateForAnAssociatedProductRuleDto | undefined;
    exceededQuantityOfProductPerOrderRuleDto: ExceededQuantityOfProductPerOrderRuleDto | undefined;
    recipientAddressContainsPoBoxRuleDto: RecipientAddressContainsPoBoxRuleDto | undefined;
    exceededOrderLimitRuleDto: ExceededOrderLimitRuleDto | undefined;
    exceededOrderAocLimitRuleDto: ExceededOrderAocLimitRuleDto | undefined;
    orderExpiredRuleDto: OrderExpiredRuleDto | undefined;
    unauthorizedSrfFormChangeRuleDto: UnauthorizedSrfFormChangeRuleDto | undefined;
    exceededPractitionerAllocationQuantityRuleDto: ExceededPractitionerAllocationQuantityRuleDto | undefined;
    exceededTerritoryAllocationRuleDto: ExceededTerritoryAllocationRuleDto | undefined;
    ruleGroupCode: string | undefined;
    ruleGroupName: string | undefined;
}

export class ProductDetailsDto implements IProductDetailsDto {
    id: string | undefined;
    knipperProductFlag: boolean | undefined;
    wmsProductId: string | undefined;
    productTypeId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    clientName: string | undefined;
    productGroupId: string | undefined;
    distributedBy: string | undefined;
    clientProductName: string | undefined;
    clientProductId: string | undefined;
    genericProductName: string | undefined;
    nationalDrugCode: string | undefined;
    dosageStrength: string | undefined;
    productShortDescription: string | undefined;
    productLongDescription: string | undefined;
    distributionUnitOfMeasure: string | undefined;
    multiplyingFactorNbr: number | undefined;
    displayQtyText: string | undefined;
    productCostAmt: number | undefined;
    deaScheduleName: string | undefined;
    opioidFlag: boolean | undefined;
    antibioticFlag: boolean | undefined;
    hazardousFlag: boolean | undefined;
    temperatureControlledFlag: boolean | undefined;
    orderableFlag: boolean | undefined;
    autoIncludedFlag: boolean | undefined;
    smallOrderDepartmentFlag: boolean | undefined;
    selectDayShippingFlag: boolean | undefined;
    orderSplitFlag: boolean | undefined;
    lotControlledFlag: boolean | undefined;
    serialTrackedFlag: boolean | undefined;
    signatureRequiredFlag: boolean | undefined;
    aocRequiredFlag: boolean | undefined;
    animalHealthFlag: boolean | undefined;
    initialClientName: string | undefined;
    refreshWarningFlag: boolean | undefined;
    refreshConfirmationFlag: boolean | undefined;
    refreshResultType: number | undefined;
    invalidDataErrors: string[] | undefined;
    invalidData: InvalidDataDto[] | undefined;
    missingData: ValidationResult[] | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IProductDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.knipperProductFlag = _data["knipperProductFlag"];
            this.wmsProductId = _data["wmsProductId"];
            this.productTypeId = _data["productTypeId"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
            this.clientName = _data["clientName"];
            this.productGroupId = _data["productGroupId"];
            this.distributedBy = _data["distributedBy"];
            this.clientProductName = _data["clientProductName"];
            this.clientProductId = _data["clientProductId"];
            this.genericProductName = _data["genericProductName"];
            this.nationalDrugCode = _data["nationalDrugCode"];
            this.dosageStrength = _data["dosageStrength"];
            this.productShortDescription = _data["productShortDescription"];
            this.productLongDescription = _data["productLongDescription"];
            this.distributionUnitOfMeasure = _data["distributionUnitOfMeasure"];
            this.multiplyingFactorNbr = _data["multiplyingFactorNbr"];
            this.displayQtyText = _data["displayQtyText"];
            this.productCostAmt = _data["productCostAmt"];
            this.deaScheduleName = _data["deaScheduleName"];
            this.opioidFlag = _data["opioidFlag"];
            this.antibioticFlag = _data["antibioticFlag"];
            this.hazardousFlag = _data["hazardousFlag"];
            this.temperatureControlledFlag = _data["temperatureControlledFlag"];
            this.orderableFlag = _data["orderableFlag"];
            this.autoIncludedFlag = _data["autoIncludedFlag"];
            this.smallOrderDepartmentFlag = _data["smallOrderDepartmentFlag"];
            this.selectDayShippingFlag = _data["selectDayShippingFlag"];
            this.orderSplitFlag = _data["orderSplitFlag"];
            this.lotControlledFlag = _data["lotControlledFlag"];
            this.serialTrackedFlag = _data["serialTrackedFlag"];
            this.signatureRequiredFlag = _data["signatureRequiredFlag"];
            this.aocRequiredFlag = _data["aocRequiredFlag"];
            this.animalHealthFlag = _data["animalHealthFlag"];
            this.initialClientName = _data["initialClientName"];
            this.refreshWarningFlag = _data["refreshWarningFlag"];
            this.refreshConfirmationFlag = _data["refreshConfirmationFlag"];
            this.refreshResultType = _data["refreshResultType"];
            if (Array.isArray(_data["invalidDataErrors"])) {
                this.invalidDataErrors = [] as any;
                for (let item of _data["invalidDataErrors"])
                    this.invalidDataErrors.push(item);
            }
            if (Array.isArray(_data["invalidData"])) {
                this.invalidData = [] as any;
                for (let item of _data["invalidData"])
                    this.invalidData.push(InvalidDataDto.fromJS(item));
            }
            if (Array.isArray(_data["missingData"])) {
                this.missingData = [] as any;
                for (let item of _data["missingData"])
                    this.missingData.push(ValidationResult.fromJS(item));
            }
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["knipperProductFlag"] = this.knipperProductFlag;
        data["wmsProductId"] = this.wmsProductId;
        data["productTypeId"] = this.productTypeId;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        data["clientName"] = this.clientName;
        data["productGroupId"] = this.productGroupId;
        data["distributedBy"] = this.distributedBy;
        data["clientProductName"] = this.clientProductName;
        data["clientProductId"] = this.clientProductId;
        data["genericProductName"] = this.genericProductName;
        data["nationalDrugCode"] = this.nationalDrugCode;
        data["dosageStrength"] = this.dosageStrength;
        data["productShortDescription"] = this.productShortDescription;
        data["productLongDescription"] = this.productLongDescription;
        data["distributionUnitOfMeasure"] = this.distributionUnitOfMeasure;
        data["multiplyingFactorNbr"] = this.multiplyingFactorNbr;
        data["displayQtyText"] = this.displayQtyText;
        data["productCostAmt"] = this.productCostAmt;
        data["deaScheduleName"] = this.deaScheduleName;
        data["opioidFlag"] = this.opioidFlag;
        data["antibioticFlag"] = this.antibioticFlag;
        data["hazardousFlag"] = this.hazardousFlag;
        data["temperatureControlledFlag"] = this.temperatureControlledFlag;
        data["orderableFlag"] = this.orderableFlag;
        data["autoIncludedFlag"] = this.autoIncludedFlag;
        data["smallOrderDepartmentFlag"] = this.smallOrderDepartmentFlag;
        data["selectDayShippingFlag"] = this.selectDayShippingFlag;
        data["orderSplitFlag"] = this.orderSplitFlag;
        data["lotControlledFlag"] = this.lotControlledFlag;
        data["serialTrackedFlag"] = this.serialTrackedFlag;
        data["signatureRequiredFlag"] = this.signatureRequiredFlag;
        data["aocRequiredFlag"] = this.aocRequiredFlag;
        data["animalHealthFlag"] = this.animalHealthFlag;
        data["initialClientName"] = this.initialClientName;
        data["refreshWarningFlag"] = this.refreshWarningFlag;
        data["refreshConfirmationFlag"] = this.refreshConfirmationFlag;
        data["refreshResultType"] = this.refreshResultType;
        if (Array.isArray(this.invalidDataErrors)) {
            data["invalidDataErrors"] = [];
            for (let item of this.invalidDataErrors)
                data["invalidDataErrors"].push(item);
        }
        if (Array.isArray(this.invalidData)) {
            data["invalidData"] = [];
            for (let item of this.invalidData)
                data["invalidData"].push(item.toJSON());
        }
        if (Array.isArray(this.missingData)) {
            data["missingData"] = [];
            for (let item of this.missingData)
                data["missingData"].push(item.toJSON());
        }
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProductDetailsDto {
        const json = this.toJSON();
        let result = new ProductDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IProductDetailsDto {
    id: string | undefined;
    knipperProductFlag: boolean | undefined;
    wmsProductId: string | undefined;
    productTypeId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    clientName: string | undefined;
    productGroupId: string | undefined;
    distributedBy: string | undefined;
    clientProductName: string | undefined;
    clientProductId: string | undefined;
    genericProductName: string | undefined;
    nationalDrugCode: string | undefined;
    dosageStrength: string | undefined;
    productShortDescription: string | undefined;
    productLongDescription: string | undefined;
    distributionUnitOfMeasure: string | undefined;
    multiplyingFactorNbr: number | undefined;
    displayQtyText: string | undefined;
    productCostAmt: number | undefined;
    deaScheduleName: string | undefined;
    opioidFlag: boolean | undefined;
    antibioticFlag: boolean | undefined;
    hazardousFlag: boolean | undefined;
    temperatureControlledFlag: boolean | undefined;
    orderableFlag: boolean | undefined;
    autoIncludedFlag: boolean | undefined;
    smallOrderDepartmentFlag: boolean | undefined;
    selectDayShippingFlag: boolean | undefined;
    orderSplitFlag: boolean | undefined;
    lotControlledFlag: boolean | undefined;
    serialTrackedFlag: boolean | undefined;
    signatureRequiredFlag: boolean | undefined;
    aocRequiredFlag: boolean | undefined;
    animalHealthFlag: boolean | undefined;
    initialClientName: string | undefined;
    refreshWarningFlag: boolean | undefined;
    refreshConfirmationFlag: boolean | undefined;
    refreshResultType: number | undefined;
    invalidDataErrors: string[] | undefined;
    invalidData: InvalidDataDto[] | undefined;
    missingData: ValidationResult[] | undefined;
    names: LocalizedValue[] | undefined;
}

export class ProductTypeDto implements IProductTypeDto {
    productTypeCode: string | undefined;
    productTypeName: string | undefined;
    defaultAOCRequiredFlag: boolean | undefined;
    lotControlledFlag: boolean | undefined;
    genericNameVisibleFlag: boolean | undefined;
    genericNameRequiredFlag: boolean | undefined;
    nationalDrugCodeVisibleFlag: boolean | undefined;
    nationalDrugCodeRequiredFlag: boolean | undefined;
    productStrengthVisibleFlag: boolean | undefined;
    productStrengthRequiredFlag: boolean | undefined;
    deaScheduleVisibleFlag: boolean | undefined;
    deaScheduleRequiredFlag: boolean | undefined;
    opioidVisibleFlag: boolean | undefined;
    opioidRequiredFlag: boolean | undefined;
    antibioticVisibleFlag: boolean | undefined;
    antibioticRequiredFlag: boolean | undefined;
    hazardousVisibleFlag: boolean | undefined;
    hazardousRequiredFlag: boolean | undefined;
    temperatureControlledVisibleFlag: boolean | undefined;
    temperatureControlledRequiredFlag: boolean | undefined;
    animalHealthVisibleFlag: boolean | undefined;
    animalHealthRequiredFlag: boolean | undefined;
    activeFlag: boolean | undefined;
    priority: number | undefined;
    names: LocalizedValue[] | undefined;
    id: string | undefined;

    constructor(data?: IProductTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productTypeCode = _data["productTypeCode"];
            this.productTypeName = _data["productTypeName"];
            this.defaultAOCRequiredFlag = _data["defaultAOCRequiredFlag"];
            this.lotControlledFlag = _data["lotControlledFlag"];
            this.genericNameVisibleFlag = _data["genericNameVisibleFlag"];
            this.genericNameRequiredFlag = _data["genericNameRequiredFlag"];
            this.nationalDrugCodeVisibleFlag = _data["nationalDrugCodeVisibleFlag"];
            this.nationalDrugCodeRequiredFlag = _data["nationalDrugCodeRequiredFlag"];
            this.productStrengthVisibleFlag = _data["productStrengthVisibleFlag"];
            this.productStrengthRequiredFlag = _data["productStrengthRequiredFlag"];
            this.deaScheduleVisibleFlag = _data["deaScheduleVisibleFlag"];
            this.deaScheduleRequiredFlag = _data["deaScheduleRequiredFlag"];
            this.opioidVisibleFlag = _data["opioidVisibleFlag"];
            this.opioidRequiredFlag = _data["opioidRequiredFlag"];
            this.antibioticVisibleFlag = _data["antibioticVisibleFlag"];
            this.antibioticRequiredFlag = _data["antibioticRequiredFlag"];
            this.hazardousVisibleFlag = _data["hazardousVisibleFlag"];
            this.hazardousRequiredFlag = _data["hazardousRequiredFlag"];
            this.temperatureControlledVisibleFlag = _data["temperatureControlledVisibleFlag"];
            this.temperatureControlledRequiredFlag = _data["temperatureControlledRequiredFlag"];
            this.animalHealthVisibleFlag = _data["animalHealthVisibleFlag"];
            this.animalHealthRequiredFlag = _data["animalHealthRequiredFlag"];
            this.activeFlag = _data["activeFlag"];
            this.priority = _data["priority"];
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProductTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productTypeCode"] = this.productTypeCode;
        data["productTypeName"] = this.productTypeName;
        data["defaultAOCRequiredFlag"] = this.defaultAOCRequiredFlag;
        data["lotControlledFlag"] = this.lotControlledFlag;
        data["genericNameVisibleFlag"] = this.genericNameVisibleFlag;
        data["genericNameRequiredFlag"] = this.genericNameRequiredFlag;
        data["nationalDrugCodeVisibleFlag"] = this.nationalDrugCodeVisibleFlag;
        data["nationalDrugCodeRequiredFlag"] = this.nationalDrugCodeRequiredFlag;
        data["productStrengthVisibleFlag"] = this.productStrengthVisibleFlag;
        data["productStrengthRequiredFlag"] = this.productStrengthRequiredFlag;
        data["deaScheduleVisibleFlag"] = this.deaScheduleVisibleFlag;
        data["deaScheduleRequiredFlag"] = this.deaScheduleRequiredFlag;
        data["opioidVisibleFlag"] = this.opioidVisibleFlag;
        data["opioidRequiredFlag"] = this.opioidRequiredFlag;
        data["antibioticVisibleFlag"] = this.antibioticVisibleFlag;
        data["antibioticRequiredFlag"] = this.antibioticRequiredFlag;
        data["hazardousVisibleFlag"] = this.hazardousVisibleFlag;
        data["hazardousRequiredFlag"] = this.hazardousRequiredFlag;
        data["temperatureControlledVisibleFlag"] = this.temperatureControlledVisibleFlag;
        data["temperatureControlledRequiredFlag"] = this.temperatureControlledRequiredFlag;
        data["animalHealthVisibleFlag"] = this.animalHealthVisibleFlag;
        data["animalHealthRequiredFlag"] = this.animalHealthRequiredFlag;
        data["activeFlag"] = this.activeFlag;
        data["priority"] = this.priority;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): ProductTypeDto {
        const json = this.toJSON();
        let result = new ProductTypeDto();
        result.init(json);
        return result;
    }
}

export interface IProductTypeDto {
    productTypeCode: string | undefined;
    productTypeName: string | undefined;
    defaultAOCRequiredFlag: boolean | undefined;
    lotControlledFlag: boolean | undefined;
    genericNameVisibleFlag: boolean | undefined;
    genericNameRequiredFlag: boolean | undefined;
    nationalDrugCodeVisibleFlag: boolean | undefined;
    nationalDrugCodeRequiredFlag: boolean | undefined;
    productStrengthVisibleFlag: boolean | undefined;
    productStrengthRequiredFlag: boolean | undefined;
    deaScheduleVisibleFlag: boolean | undefined;
    deaScheduleRequiredFlag: boolean | undefined;
    opioidVisibleFlag: boolean | undefined;
    opioidRequiredFlag: boolean | undefined;
    antibioticVisibleFlag: boolean | undefined;
    antibioticRequiredFlag: boolean | undefined;
    hazardousVisibleFlag: boolean | undefined;
    hazardousRequiredFlag: boolean | undefined;
    temperatureControlledVisibleFlag: boolean | undefined;
    temperatureControlledRequiredFlag: boolean | undefined;
    animalHealthVisibleFlag: boolean | undefined;
    animalHealthRequiredFlag: boolean | undefined;
    activeFlag: boolean | undefined;
    priority: number | undefined;
    names: LocalizedValue[] | undefined;
    id: string | undefined;
}

export class CannotSampleToTheProfessionalDesignationRuleDto implements ICannotSampleToTheProfessionalDesignationRuleDto {
    mapping: CannotSampleToTheProfessionalDesignationRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: ICannotSampleToTheProfessionalDesignationRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["mapping"])) {
                this.mapping = [] as any;
                for (let item of _data["mapping"])
                    this.mapping.push(CannotSampleToTheProfessionalDesignationRuleMappingDto.fromJS(item));
            }
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): CannotSampleToTheProfessionalDesignationRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new CannotSampleToTheProfessionalDesignationRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mapping)) {
            data["mapping"] = [];
            for (let item of this.mapping)
                data["mapping"].push(item.toJSON());
        }
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): CannotSampleToTheProfessionalDesignationRuleDto {
        const json = this.toJSON();
        let result = new CannotSampleToTheProfessionalDesignationRuleDto();
        result.init(json);
        return result;
    }
}

export interface ICannotSampleToTheProfessionalDesignationRuleDto {
    mapping: CannotSampleToTheProfessionalDesignationRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto implements ICannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto {
    mapping: CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: ICannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["mapping"])) {
                this.mapping = [] as any;
                for (let item of _data["mapping"])
                    this.mapping.push(CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleMappingDto.fromJS(item));
            }
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mapping)) {
            data["mapping"] = [];
            for (let item of this.mapping)
                data["mapping"].push(item.toJSON());
        }
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto {
        const json = this.toJSON();
        let result = new CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto();
        result.init(json);
        return result;
    }
}

export interface ICannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleDto {
    mapping: CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class CannotSampleToTheRecipientStateForAnAssociatedProductRuleDto implements ICannotSampleToTheRecipientStateForAnAssociatedProductRuleDto {
    mapping: CannotSampleToTheRecipientStateForAnAssociatedProductRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: ICannotSampleToTheRecipientStateForAnAssociatedProductRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["mapping"])) {
                this.mapping = [] as any;
                for (let item of _data["mapping"])
                    this.mapping.push(CannotSampleToTheRecipientStateForAnAssociatedProductRuleMappingDto.fromJS(item));
            }
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): CannotSampleToTheRecipientStateForAnAssociatedProductRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new CannotSampleToTheRecipientStateForAnAssociatedProductRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mapping)) {
            data["mapping"] = [];
            for (let item of this.mapping)
                data["mapping"].push(item.toJSON());
        }
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): CannotSampleToTheRecipientStateForAnAssociatedProductRuleDto {
        const json = this.toJSON();
        let result = new CannotSampleToTheRecipientStateForAnAssociatedProductRuleDto();
        result.init(json);
        return result;
    }
}

export interface ICannotSampleToTheRecipientStateForAnAssociatedProductRuleDto {
    mapping: CannotSampleToTheRecipientStateForAnAssociatedProductRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class ExceededQuantityOfProductPerOrderRuleDto implements IExceededQuantityOfProductPerOrderRuleDto {
    mapping: ExceededQuantityOfProductPerOrderRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: IExceededQuantityOfProductPerOrderRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["mapping"])) {
                this.mapping = [] as any;
                for (let item of _data["mapping"])
                    this.mapping.push(ExceededQuantityOfProductPerOrderRuleMappingDto.fromJS(item));
            }
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): ExceededQuantityOfProductPerOrderRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExceededQuantityOfProductPerOrderRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mapping)) {
            data["mapping"] = [];
            for (let item of this.mapping)
                data["mapping"].push(item.toJSON());
        }
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): ExceededQuantityOfProductPerOrderRuleDto {
        const json = this.toJSON();
        let result = new ExceededQuantityOfProductPerOrderRuleDto();
        result.init(json);
        return result;
    }
}

export interface IExceededQuantityOfProductPerOrderRuleDto {
    mapping: ExceededQuantityOfProductPerOrderRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class RecipientAddressContainsPoBoxRuleDto implements IRecipientAddressContainsPoBoxRuleDto {
    mapping: RecipientAddressContainsPoBoxRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: IRecipientAddressContainsPoBoxRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["mapping"])) {
                this.mapping = [] as any;
                for (let item of _data["mapping"])
                    this.mapping.push(RecipientAddressContainsPoBoxRuleMappingDto.fromJS(item));
            }
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): RecipientAddressContainsPoBoxRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipientAddressContainsPoBoxRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mapping)) {
            data["mapping"] = [];
            for (let item of this.mapping)
                data["mapping"].push(item.toJSON());
        }
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): RecipientAddressContainsPoBoxRuleDto {
        const json = this.toJSON();
        let result = new RecipientAddressContainsPoBoxRuleDto();
        result.init(json);
        return result;
    }
}

export interface IRecipientAddressContainsPoBoxRuleDto {
    mapping: RecipientAddressContainsPoBoxRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class ExceededOrderLimitRuleDto implements IExceededOrderLimitRuleDto {
    mapping: ExceededOrderLimitRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: IExceededOrderLimitRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["mapping"])) {
                this.mapping = [] as any;
                for (let item of _data["mapping"])
                    this.mapping.push(ExceededOrderLimitRuleMappingDto.fromJS(item));
            }
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): ExceededOrderLimitRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExceededOrderLimitRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mapping)) {
            data["mapping"] = [];
            for (let item of this.mapping)
                data["mapping"].push(item.toJSON());
        }
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): ExceededOrderLimitRuleDto {
        const json = this.toJSON();
        let result = new ExceededOrderLimitRuleDto();
        result.init(json);
        return result;
    }
}

export interface IExceededOrderLimitRuleDto {
    mapping: ExceededOrderLimitRuleMappingDto[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class ExceededOrderAocLimitRuleDto implements IExceededOrderAocLimitRuleDto {
    maxOpenAocs: number | undefined;
    scopeOfAocLimitId: string | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: IExceededOrderAocLimitRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxOpenAocs = _data["maxOpenAocs"];
            this.scopeOfAocLimitId = _data["scopeOfAocLimitId"];
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): ExceededOrderAocLimitRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExceededOrderAocLimitRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxOpenAocs"] = this.maxOpenAocs;
        data["scopeOfAocLimitId"] = this.scopeOfAocLimitId;
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): ExceededOrderAocLimitRuleDto {
        const json = this.toJSON();
        let result = new ExceededOrderAocLimitRuleDto();
        result.init(json);
        return result;
    }
}

export interface IExceededOrderAocLimitRuleDto {
    maxOpenAocs: number | undefined;
    scopeOfAocLimitId: string | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class OrderExpiredRuleDto implements IOrderExpiredRuleDto {
    calendarDays: number | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: IOrderExpiredRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.calendarDays = _data["calendarDays"];
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): OrderExpiredRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderExpiredRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["calendarDays"] = this.calendarDays;
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): OrderExpiredRuleDto {
        const json = this.toJSON();
        let result = new OrderExpiredRuleDto();
        result.init(json);
        return result;
    }
}

export interface IOrderExpiredRuleDto {
    calendarDays: number | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class UnauthorizedSrfFormChangeRuleDto implements IUnauthorizedSrfFormChangeRuleDto {
    prohibitedModifiedFieldIds: string[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: IUnauthorizedSrfFormChangeRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["prohibitedModifiedFieldIds"])) {
                this.prohibitedModifiedFieldIds = [] as any;
                for (let item of _data["prohibitedModifiedFieldIds"])
                    this.prohibitedModifiedFieldIds.push(item);
            }
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): UnauthorizedSrfFormChangeRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UnauthorizedSrfFormChangeRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.prohibitedModifiedFieldIds)) {
            data["prohibitedModifiedFieldIds"] = [];
            for (let item of this.prohibitedModifiedFieldIds)
                data["prohibitedModifiedFieldIds"].push(item);
        }
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): UnauthorizedSrfFormChangeRuleDto {
        const json = this.toJSON();
        let result = new UnauthorizedSrfFormChangeRuleDto();
        result.init(json);
        return result;
    }
}

export interface IUnauthorizedSrfFormChangeRuleDto {
    prohibitedModifiedFieldIds: string[] | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class ExceededPractitionerAllocationQuantityRuleDto implements IExceededPractitionerAllocationQuantityRuleDto {
    ruleScope: string | undefined;
    allocationDefinitionName: string | undefined;
    allocationRequestType: string | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: IExceededPractitionerAllocationQuantityRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ruleScope = _data["ruleScope"];
            this.allocationDefinitionName = _data["allocationDefinitionName"];
            this.allocationRequestType = _data["allocationRequestType"];
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): ExceededPractitionerAllocationQuantityRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExceededPractitionerAllocationQuantityRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ruleScope"] = this.ruleScope;
        data["allocationDefinitionName"] = this.allocationDefinitionName;
        data["allocationRequestType"] = this.allocationRequestType;
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): ExceededPractitionerAllocationQuantityRuleDto {
        const json = this.toJSON();
        let result = new ExceededPractitionerAllocationQuantityRuleDto();
        result.init(json);
        return result;
    }
}

export interface IExceededPractitionerAllocationQuantityRuleDto {
    ruleScope: string | undefined;
    allocationDefinitionName: string | undefined;
    allocationRequestType: string | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class ExceededTerritoryAllocationRuleDto implements IExceededTerritoryAllocationRuleDto {
    ruleScope: string | undefined;
    allocationDefinitionName: string | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;

    constructor(data?: IExceededTerritoryAllocationRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ruleScope = _data["ruleScope"];
            this.allocationDefinitionName = _data["allocationDefinitionName"];
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.includeRule = _data["includeRule"];
            this.mandatoryFlag = _data["mandatoryFlag"];
            this.ruleSortOrder = _data["ruleSortOrder"];
            this.isShowing = _data["isShowing"];
            this.printReasonForLettersRequiredFlag = _data["printReasonForLettersRequiredFlag"];
            this.printReasonForLettersText = _data["printReasonForLettersText"];
        }
    }

    static fromJS(data: any): ExceededTerritoryAllocationRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExceededTerritoryAllocationRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ruleScope"] = this.ruleScope;
        data["allocationDefinitionName"] = this.allocationDefinitionName;
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["includeRule"] = this.includeRule;
        data["mandatoryFlag"] = this.mandatoryFlag;
        data["ruleSortOrder"] = this.ruleSortOrder;
        data["isShowing"] = this.isShowing;
        data["printReasonForLettersRequiredFlag"] = this.printReasonForLettersRequiredFlag;
        data["printReasonForLettersText"] = this.printReasonForLettersText;
        return data; 
    }

    clone(): ExceededTerritoryAllocationRuleDto {
        const json = this.toJSON();
        let result = new ExceededTerritoryAllocationRuleDto();
        result.init(json);
        return result;
    }
}

export interface IExceededTerritoryAllocationRuleDto {
    ruleScope: string | undefined;
    allocationDefinitionName: string | undefined;
    ruleCode: string | undefined;
    ruleName: string | undefined;
    includeRule: boolean | undefined;
    mandatoryFlag: boolean | undefined;
    ruleSortOrder: number | undefined;
    isShowing: boolean | undefined;
    printReasonForLettersRequiredFlag: boolean | undefined;
    printReasonForLettersText: string | undefined;
}

export class InvalidDataDto implements IInvalidDataDto {
    fieldName: string | undefined;
    value: string | undefined;

    constructor(data?: IInvalidDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fieldName = _data["fieldName"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): InvalidDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldName"] = this.fieldName;
        data["value"] = this.value;
        return data; 
    }

    clone(): InvalidDataDto {
        const json = this.toJSON();
        let result = new InvalidDataDto();
        result.init(json);
        return result;
    }
}

export interface IInvalidDataDto {
    fieldName: string | undefined;
    value: string | undefined;
}

export class ValidationResult implements IValidationResult {
    readonly memberNames: string[] | undefined;
    errorMessage: string | undefined;

    constructor(data?: IValidationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["memberNames"])) {
                (<any>this).memberNames = [] as any;
                for (let item of _data["memberNames"])
                    (<any>this).memberNames.push(item);
            }
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ValidationResult {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.memberNames)) {
            data["memberNames"] = [];
            for (let item of this.memberNames)
                data["memberNames"].push(item);
        }
        data["errorMessage"] = this.errorMessage;
        return data; 
    }

    clone(): ValidationResult {
        const json = this.toJSON();
        let result = new ValidationResult();
        result.init(json);
        return result;
    }
}

export interface IValidationResult {
    memberNames: string[] | undefined;
    errorMessage: string | undefined;
}

export class CannotSampleToTheProfessionalDesignationRuleMappingDto implements ICannotSampleToTheProfessionalDesignationRuleMappingDto {
    professionalDesignationId: string | undefined;

    constructor(data?: ICannotSampleToTheProfessionalDesignationRuleMappingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.professionalDesignationId = _data["professionalDesignationId"];
        }
    }

    static fromJS(data: any): CannotSampleToTheProfessionalDesignationRuleMappingDto {
        data = typeof data === 'object' ? data : {};
        let result = new CannotSampleToTheProfessionalDesignationRuleMappingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["professionalDesignationId"] = this.professionalDesignationId;
        return data; 
    }

    clone(): CannotSampleToTheProfessionalDesignationRuleMappingDto {
        const json = this.toJSON();
        let result = new CannotSampleToTheProfessionalDesignationRuleMappingDto();
        result.init(json);
        return result;
    }
}

export interface ICannotSampleToTheProfessionalDesignationRuleMappingDto {
    professionalDesignationId: string | undefined;
}

export class CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleMappingDto implements ICannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleMappingDto {
    specialtyIds: string[] | undefined;
    productId: string | undefined;

    constructor(data?: ICannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleMappingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["specialtyIds"])) {
                this.specialtyIds = [] as any;
                for (let item of _data["specialtyIds"])
                    this.specialtyIds.push(item);
            }
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleMappingDto {
        data = typeof data === 'object' ? data : {};
        let result = new CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleMappingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.specialtyIds)) {
            data["specialtyIds"] = [];
            for (let item of this.specialtyIds)
                data["specialtyIds"].push(item);
        }
        data["productId"] = this.productId;
        return data; 
    }

    clone(): CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleMappingDto {
        const json = this.toJSON();
        let result = new CannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleMappingDto();
        result.init(json);
        return result;
    }
}

export interface ICannotSampleToTheProvidedSpecialtyForAnAssociatedProductRuleMappingDto {
    specialtyIds: string[] | undefined;
    productId: string | undefined;
}

export class CannotSampleToTheRecipientStateForAnAssociatedProductRuleMappingDto implements ICannotSampleToTheRecipientStateForAnAssociatedProductRuleMappingDto {
    stateCodes: string[] | undefined;
    productId: string | undefined;

    constructor(data?: ICannotSampleToTheRecipientStateForAnAssociatedProductRuleMappingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["stateCodes"])) {
                this.stateCodes = [] as any;
                for (let item of _data["stateCodes"])
                    this.stateCodes.push(item);
            }
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): CannotSampleToTheRecipientStateForAnAssociatedProductRuleMappingDto {
        data = typeof data === 'object' ? data : {};
        let result = new CannotSampleToTheRecipientStateForAnAssociatedProductRuleMappingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.stateCodes)) {
            data["stateCodes"] = [];
            for (let item of this.stateCodes)
                data["stateCodes"].push(item);
        }
        data["productId"] = this.productId;
        return data; 
    }

    clone(): CannotSampleToTheRecipientStateForAnAssociatedProductRuleMappingDto {
        const json = this.toJSON();
        let result = new CannotSampleToTheRecipientStateForAnAssociatedProductRuleMappingDto();
        result.init(json);
        return result;
    }
}

export interface ICannotSampleToTheRecipientStateForAnAssociatedProductRuleMappingDto {
    stateCodes: string[] | undefined;
    productId: string | undefined;
}

export class ExceededQuantityOfProductPerOrderRuleMappingDto implements IExceededQuantityOfProductPerOrderRuleMappingDto {
    quantity: number | undefined;
    productId: string | undefined;

    constructor(data?: IExceededQuantityOfProductPerOrderRuleMappingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quantity = _data["quantity"];
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): ExceededQuantityOfProductPerOrderRuleMappingDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExceededQuantityOfProductPerOrderRuleMappingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quantity"] = this.quantity;
        data["productId"] = this.productId;
        return data; 
    }

    clone(): ExceededQuantityOfProductPerOrderRuleMappingDto {
        const json = this.toJSON();
        let result = new ExceededQuantityOfProductPerOrderRuleMappingDto();
        result.init(json);
        return result;
    }
}

export interface IExceededQuantityOfProductPerOrderRuleMappingDto {
    quantity: number | undefined;
    productId: string | undefined;
}

export class RecipientAddressContainsPoBoxRuleMappingDto implements IRecipientAddressContainsPoBoxRuleMappingDto {
    shipToFlag: boolean | undefined;
    productTypeId: string | undefined;

    constructor(data?: IRecipientAddressContainsPoBoxRuleMappingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shipToFlag = _data["shipToFlag"];
            this.productTypeId = _data["productTypeId"];
        }
    }

    static fromJS(data: any): RecipientAddressContainsPoBoxRuleMappingDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipientAddressContainsPoBoxRuleMappingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipToFlag"] = this.shipToFlag;
        data["productTypeId"] = this.productTypeId;
        return data; 
    }

    clone(): RecipientAddressContainsPoBoxRuleMappingDto {
        const json = this.toJSON();
        let result = new RecipientAddressContainsPoBoxRuleMappingDto();
        result.init(json);
        return result;
    }
}

export interface IRecipientAddressContainsPoBoxRuleMappingDto {
    shipToFlag: boolean | undefined;
    productTypeId: string | undefined;
}

export class ExceededOrderLimitRuleMappingDto implements IExceededOrderLimitRuleMappingDto {
    maxOrders: number | undefined;
    timePeriodQuantity: number | undefined;
    timePeriodTypeId: string | undefined;
    timePeriodUnitId: string | undefined;
    orderSourceTypeIds: string[] | undefined;

    constructor(data?: IExceededOrderLimitRuleMappingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxOrders = _data["maxOrders"];
            this.timePeriodQuantity = _data["timePeriodQuantity"];
            this.timePeriodTypeId = _data["timePeriodTypeId"];
            this.timePeriodUnitId = _data["timePeriodUnitId"];
            if (Array.isArray(_data["orderSourceTypeIds"])) {
                this.orderSourceTypeIds = [] as any;
                for (let item of _data["orderSourceTypeIds"])
                    this.orderSourceTypeIds.push(item);
            }
        }
    }

    static fromJS(data: any): ExceededOrderLimitRuleMappingDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExceededOrderLimitRuleMappingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxOrders"] = this.maxOrders;
        data["timePeriodQuantity"] = this.timePeriodQuantity;
        data["timePeriodTypeId"] = this.timePeriodTypeId;
        data["timePeriodUnitId"] = this.timePeriodUnitId;
        if (Array.isArray(this.orderSourceTypeIds)) {
            data["orderSourceTypeIds"] = [];
            for (let item of this.orderSourceTypeIds)
                data["orderSourceTypeIds"].push(item);
        }
        return data; 
    }

    clone(): ExceededOrderLimitRuleMappingDto {
        const json = this.toJSON();
        let result = new ExceededOrderLimitRuleMappingDto();
        result.init(json);
        return result;
    }
}

export interface IExceededOrderLimitRuleMappingDto {
    maxOrders: number | undefined;
    timePeriodQuantity: number | undefined;
    timePeriodTypeId: string | undefined;
    timePeriodUnitId: string | undefined;
    orderSourceTypeIds: string[] | undefined;
}

export class AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto implements IAjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto {
    result: PageValidationOfProgramOrderProcessingPriorityDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramOrderProcessingPriorityDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramOrderProcessingPriorityDto {
    result: PageValidationOfProgramOrderProcessingPriorityDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramOrderProcessingPriorityDto implements IPageValidationOfProgramOrderProcessingPriorityDto {
    dataDto: ProgramOrderProcessingPriorityDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramOrderProcessingPriorityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramOrderProcessingPriorityDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramOrderProcessingPriorityDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramOrderProcessingPriorityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramOrderProcessingPriorityDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramOrderProcessingPriorityDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramOrderProcessingPriorityDto {
    dataDto: ProgramOrderProcessingPriorityDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramOrderProcessingPriorityDto implements IProgramOrderProcessingPriorityDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    priorityFlag: boolean | undefined;
    onHoldRejectionDaysCount: number | undefined;
    exceptionStatusExpiresDaysCount: number | undefined;
    orderSources: DtpProgramConfigOrderSourceDto[] | undefined;

    constructor(data?: IProgramOrderProcessingPriorityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.orderProcessableFlag = _data["orderProcessableFlag"];
            this.priorityFlag = _data["priorityFlag"];
            this.onHoldRejectionDaysCount = _data["onHoldRejectionDaysCount"];
            this.exceptionStatusExpiresDaysCount = _data["exceptionStatusExpiresDaysCount"];
            if (Array.isArray(_data["orderSources"])) {
                this.orderSources = [] as any;
                for (let item of _data["orderSources"])
                    this.orderSources.push(DtpProgramConfigOrderSourceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProgramOrderProcessingPriorityDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramOrderProcessingPriorityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["orderProcessableFlag"] = this.orderProcessableFlag;
        data["priorityFlag"] = this.priorityFlag;
        data["onHoldRejectionDaysCount"] = this.onHoldRejectionDaysCount;
        data["exceptionStatusExpiresDaysCount"] = this.exceptionStatusExpiresDaysCount;
        if (Array.isArray(this.orderSources)) {
            data["orderSources"] = [];
            for (let item of this.orderSources)
                data["orderSources"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProgramOrderProcessingPriorityDto {
        const json = this.toJSON();
        let result = new ProgramOrderProcessingPriorityDto();
        result.init(json);
        return result;
    }
}

export interface IProgramOrderProcessingPriorityDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    priorityFlag: boolean | undefined;
    onHoldRejectionDaysCount: number | undefined;
    exceptionStatusExpiresDaysCount: number | undefined;
    orderSources: DtpProgramConfigOrderSourceDto[] | undefined;
}

export class DtpProgramConfigOrderSourceDto implements IDtpProgramConfigOrderSourceDto {
    dtpProgramConfigurationId: string | undefined;
    orderSourceId: string | undefined;
    exceptionActionClassificationValueId: string | undefined;
    sendRejectionLetterFlag: boolean | undefined;
    eaocApplicableFlag: boolean | undefined;
    id: string | undefined;

    constructor(data?: IDtpProgramConfigOrderSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.orderSourceId = _data["orderSourceId"];
            this.exceptionActionClassificationValueId = _data["exceptionActionClassificationValueId"];
            this.sendRejectionLetterFlag = _data["sendRejectionLetterFlag"];
            this.eaocApplicableFlag = _data["eaocApplicableFlag"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtpProgramConfigOrderSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigOrderSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["orderSourceId"] = this.orderSourceId;
        data["exceptionActionClassificationValueId"] = this.exceptionActionClassificationValueId;
        data["sendRejectionLetterFlag"] = this.sendRejectionLetterFlag;
        data["eaocApplicableFlag"] = this.eaocApplicableFlag;
        data["id"] = this.id;
        return data; 
    }

    clone(): DtpProgramConfigOrderSourceDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigOrderSourceDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigOrderSourceDto {
    dtpProgramConfigurationId: string | undefined;
    orderSourceId: string | undefined;
    exceptionActionClassificationValueId: string | undefined;
    sendRejectionLetterFlag: boolean | undefined;
    eaocApplicableFlag: boolean | undefined;
    id: string | undefined;
}

export class AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto implements IAjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto {
    result: PageValidationOfProgramOrderProcessingInventoryDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramOrderProcessingInventoryDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramOrderProcessingInventoryDto {
    result: PageValidationOfProgramOrderProcessingInventoryDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramOrderProcessingInventoryDto implements IPageValidationOfProgramOrderProcessingInventoryDto {
    dataDto: ProgramOrderProcessingInventoryDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramOrderProcessingInventoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramOrderProcessingInventoryDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramOrderProcessingInventoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramOrderProcessingInventoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramOrderProcessingInventoryDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramOrderProcessingInventoryDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramOrderProcessingInventoryDto {
    dataDto: ProgramOrderProcessingInventoryDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramOrderProcessingInventoryDto implements IProgramOrderProcessingInventoryDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    orderSelectDayFlag: boolean | undefined;
    minimumInventoryThresholdPercent: number | undefined;
    insufficientInventoryActionClassificationValueId: string | undefined;
    applicableSelectDayMondayFlag: boolean | undefined;
    applicableSelectDayTuesdayFlag: boolean | undefined;
    applicableSelectDayWednesdayFlag: boolean | undefined;
    applicableSelectDayThursdayFlag: boolean | undefined;
    applicableSelectDayFridayFlag: boolean | undefined;
    applicableSelectDaySaturdayFlag: boolean | undefined;
    applicableSelectDaySundayFlag: boolean | undefined;
    callCenterSelectDayVerificationFlag: boolean | undefined;
    verifyAllSelectDayOrdersFlag: boolean | undefined;
    programCycleId: string | undefined;

    constructor(data?: IProgramOrderProcessingInventoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.orderProcessableFlag = _data["orderProcessableFlag"];
            this.orderSelectDayFlag = _data["orderSelectDayFlag"];
            this.minimumInventoryThresholdPercent = _data["minimumInventoryThresholdPercent"];
            this.insufficientInventoryActionClassificationValueId = _data["insufficientInventoryActionClassificationValueId"];
            this.applicableSelectDayMondayFlag = _data["applicableSelectDayMondayFlag"];
            this.applicableSelectDayTuesdayFlag = _data["applicableSelectDayTuesdayFlag"];
            this.applicableSelectDayWednesdayFlag = _data["applicableSelectDayWednesdayFlag"];
            this.applicableSelectDayThursdayFlag = _data["applicableSelectDayThursdayFlag"];
            this.applicableSelectDayFridayFlag = _data["applicableSelectDayFridayFlag"];
            this.applicableSelectDaySaturdayFlag = _data["applicableSelectDaySaturdayFlag"];
            this.applicableSelectDaySundayFlag = _data["applicableSelectDaySundayFlag"];
            this.callCenterSelectDayVerificationFlag = _data["callCenterSelectDayVerificationFlag"];
            this.verifyAllSelectDayOrdersFlag = _data["verifyAllSelectDayOrdersFlag"];
            this.programCycleId = _data["programCycleId"];
        }
    }

    static fromJS(data: any): ProgramOrderProcessingInventoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramOrderProcessingInventoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["orderProcessableFlag"] = this.orderProcessableFlag;
        data["orderSelectDayFlag"] = this.orderSelectDayFlag;
        data["minimumInventoryThresholdPercent"] = this.minimumInventoryThresholdPercent;
        data["insufficientInventoryActionClassificationValueId"] = this.insufficientInventoryActionClassificationValueId;
        data["applicableSelectDayMondayFlag"] = this.applicableSelectDayMondayFlag;
        data["applicableSelectDayTuesdayFlag"] = this.applicableSelectDayTuesdayFlag;
        data["applicableSelectDayWednesdayFlag"] = this.applicableSelectDayWednesdayFlag;
        data["applicableSelectDayThursdayFlag"] = this.applicableSelectDayThursdayFlag;
        data["applicableSelectDayFridayFlag"] = this.applicableSelectDayFridayFlag;
        data["applicableSelectDaySaturdayFlag"] = this.applicableSelectDaySaturdayFlag;
        data["applicableSelectDaySundayFlag"] = this.applicableSelectDaySundayFlag;
        data["callCenterSelectDayVerificationFlag"] = this.callCenterSelectDayVerificationFlag;
        data["verifyAllSelectDayOrdersFlag"] = this.verifyAllSelectDayOrdersFlag;
        data["programCycleId"] = this.programCycleId;
        return data; 
    }

    clone(): ProgramOrderProcessingInventoryDto {
        const json = this.toJSON();
        let result = new ProgramOrderProcessingInventoryDto();
        result.init(json);
        return result;
    }
}

export interface IProgramOrderProcessingInventoryDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    orderSelectDayFlag: boolean | undefined;
    minimumInventoryThresholdPercent: number | undefined;
    insufficientInventoryActionClassificationValueId: string | undefined;
    applicableSelectDayMondayFlag: boolean | undefined;
    applicableSelectDayTuesdayFlag: boolean | undefined;
    applicableSelectDayWednesdayFlag: boolean | undefined;
    applicableSelectDayThursdayFlag: boolean | undefined;
    applicableSelectDayFridayFlag: boolean | undefined;
    applicableSelectDaySaturdayFlag: boolean | undefined;
    applicableSelectDaySundayFlag: boolean | undefined;
    callCenterSelectDayVerificationFlag: boolean | undefined;
    verifyAllSelectDayOrdersFlag: boolean | undefined;
    programCycleId: string | undefined;
}

export class AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto implements IAjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto {
    result: PageValidationOfProgramOrderProcessingAutoIncludeDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramOrderProcessingAutoIncludeDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramOrderProcessingAutoIncludeDto {
    result: PageValidationOfProgramOrderProcessingAutoIncludeDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramOrderProcessingAutoIncludeDto implements IPageValidationOfProgramOrderProcessingAutoIncludeDto {
    dataDto: ProgramOrderProcessingAutoIncludeDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramOrderProcessingAutoIncludeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramOrderProcessingAutoIncludeDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramOrderProcessingAutoIncludeDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramOrderProcessingAutoIncludeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramOrderProcessingAutoIncludeDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramOrderProcessingAutoIncludeDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramOrderProcessingAutoIncludeDto {
    dataDto: ProgramOrderProcessingAutoIncludeDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramOrderProcessingAutoIncludeDto implements IProgramOrderProcessingAutoIncludeDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    repDrivenFlag: boolean | undefined;
    programProductGroups: SimpleProductGroupDto[] | undefined;
    programProducts: SimpleProductDto[] | undefined;
    orderedProducts: SimpleProductDto[] | undefined;
    orderSourceIds: string[] | undefined;
    programAutoIncludeRules: ProgramAutoIncludeRuleDto[] | undefined;

    constructor(data?: IProgramOrderProcessingAutoIncludeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.orderProcessableFlag = _data["orderProcessableFlag"];
            this.repDrivenFlag = _data["repDrivenFlag"];
            if (Array.isArray(_data["programProductGroups"])) {
                this.programProductGroups = [] as any;
                for (let item of _data["programProductGroups"])
                    this.programProductGroups.push(SimpleProductGroupDto.fromJS(item));
            }
            if (Array.isArray(_data["programProducts"])) {
                this.programProducts = [] as any;
                for (let item of _data["programProducts"])
                    this.programProducts.push(SimpleProductDto.fromJS(item));
            }
            if (Array.isArray(_data["orderedProducts"])) {
                this.orderedProducts = [] as any;
                for (let item of _data["orderedProducts"])
                    this.orderedProducts.push(SimpleProductDto.fromJS(item));
            }
            if (Array.isArray(_data["orderSourceIds"])) {
                this.orderSourceIds = [] as any;
                for (let item of _data["orderSourceIds"])
                    this.orderSourceIds.push(item);
            }
            if (Array.isArray(_data["programAutoIncludeRules"])) {
                this.programAutoIncludeRules = [] as any;
                for (let item of _data["programAutoIncludeRules"])
                    this.programAutoIncludeRules.push(ProgramAutoIncludeRuleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProgramOrderProcessingAutoIncludeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramOrderProcessingAutoIncludeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["orderProcessableFlag"] = this.orderProcessableFlag;
        data["repDrivenFlag"] = this.repDrivenFlag;
        if (Array.isArray(this.programProductGroups)) {
            data["programProductGroups"] = [];
            for (let item of this.programProductGroups)
                data["programProductGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.programProducts)) {
            data["programProducts"] = [];
            for (let item of this.programProducts)
                data["programProducts"].push(item.toJSON());
        }
        if (Array.isArray(this.orderedProducts)) {
            data["orderedProducts"] = [];
            for (let item of this.orderedProducts)
                data["orderedProducts"].push(item.toJSON());
        }
        if (Array.isArray(this.orderSourceIds)) {
            data["orderSourceIds"] = [];
            for (let item of this.orderSourceIds)
                data["orderSourceIds"].push(item);
        }
        if (Array.isArray(this.programAutoIncludeRules)) {
            data["programAutoIncludeRules"] = [];
            for (let item of this.programAutoIncludeRules)
                data["programAutoIncludeRules"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProgramOrderProcessingAutoIncludeDto {
        const json = this.toJSON();
        let result = new ProgramOrderProcessingAutoIncludeDto();
        result.init(json);
        return result;
    }
}

export interface IProgramOrderProcessingAutoIncludeDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    repDrivenFlag: boolean | undefined;
    programProductGroups: SimpleProductGroupDto[] | undefined;
    programProducts: SimpleProductDto[] | undefined;
    orderedProducts: SimpleProductDto[] | undefined;
    orderSourceIds: string[] | undefined;
    programAutoIncludeRules: ProgramAutoIncludeRuleDto[] | undefined;
}

export class SimpleProductGroupDto implements ISimpleProductGroupDto {
    id: string | undefined;
    productGroupName: string | undefined;

    constructor(data?: ISimpleProductGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productGroupName = _data["productGroupName"];
        }
    }

    static fromJS(data: any): SimpleProductGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleProductGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productGroupName"] = this.productGroupName;
        return data; 
    }

    clone(): SimpleProductGroupDto {
        const json = this.toJSON();
        let result = new SimpleProductGroupDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleProductGroupDto {
    id: string | undefined;
    productGroupName: string | undefined;
}

export class SimpleProductDto implements ISimpleProductDto {
    id: string | undefined;
    productName: string | undefined;

    constructor(data?: ISimpleProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productName = _data["productName"];
        }
    }

    static fromJS(data: any): SimpleProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productName"] = this.productName;
        return data; 
    }

    clone(): SimpleProductDto {
        const json = this.toJSON();
        let result = new SimpleProductDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleProductDto {
    id: string | undefined;
    productName: string | undefined;
}

export class ProgramAutoIncludeRuleDto implements IProgramAutoIncludeRuleDto {
    autoIncludeRuleDescription: string | undefined;
    autoIncludeRuleLevel: string | undefined;
    autoIncludeRuleNumber: number | undefined;
    autoIncludeBrandLevelFlag: boolean | undefined;
    autoIncludeOrderLevelFlag: boolean | undefined;
    autoIncludeProductLevelFlag: boolean | undefined;
    seasonalStartMonth: number | undefined;
    seasonalStartDay: number | undefined;
    seasonalEndMonth: number | undefined;
    seasonalEndDay: number | undefined;
    programAutoIncludeBrandLevel: ProgramAutoIncludeBrandLevelDto | undefined;
    programAutoIncludeOrderLevel: ProgramAutoIncludeOrderLevelDto | undefined;
    programAutoIncludeProductLevel: ProgramAutoIncludeProductLevelDto | undefined;

    constructor(data?: IProgramAutoIncludeRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.autoIncludeRuleDescription = _data["autoIncludeRuleDescription"];
            this.autoIncludeRuleLevel = _data["autoIncludeRuleLevel"];
            this.autoIncludeRuleNumber = _data["autoIncludeRuleNumber"];
            this.autoIncludeBrandLevelFlag = _data["autoIncludeBrandLevelFlag"];
            this.autoIncludeOrderLevelFlag = _data["autoIncludeOrderLevelFlag"];
            this.autoIncludeProductLevelFlag = _data["autoIncludeProductLevelFlag"];
            this.seasonalStartMonth = _data["seasonalStartMonth"];
            this.seasonalStartDay = _data["seasonalStartDay"];
            this.seasonalEndMonth = _data["seasonalEndMonth"];
            this.seasonalEndDay = _data["seasonalEndDay"];
            this.programAutoIncludeBrandLevel = _data["programAutoIncludeBrandLevel"] ? ProgramAutoIncludeBrandLevelDto.fromJS(_data["programAutoIncludeBrandLevel"]) : <any>undefined;
            this.programAutoIncludeOrderLevel = _data["programAutoIncludeOrderLevel"] ? ProgramAutoIncludeOrderLevelDto.fromJS(_data["programAutoIncludeOrderLevel"]) : <any>undefined;
            this.programAutoIncludeProductLevel = _data["programAutoIncludeProductLevel"] ? ProgramAutoIncludeProductLevelDto.fromJS(_data["programAutoIncludeProductLevel"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProgramAutoIncludeRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramAutoIncludeRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["autoIncludeRuleDescription"] = this.autoIncludeRuleDescription;
        data["autoIncludeRuleLevel"] = this.autoIncludeRuleLevel;
        data["autoIncludeRuleNumber"] = this.autoIncludeRuleNumber;
        data["autoIncludeBrandLevelFlag"] = this.autoIncludeBrandLevelFlag;
        data["autoIncludeOrderLevelFlag"] = this.autoIncludeOrderLevelFlag;
        data["autoIncludeProductLevelFlag"] = this.autoIncludeProductLevelFlag;
        data["seasonalStartMonth"] = this.seasonalStartMonth;
        data["seasonalStartDay"] = this.seasonalStartDay;
        data["seasonalEndMonth"] = this.seasonalEndMonth;
        data["seasonalEndDay"] = this.seasonalEndDay;
        data["programAutoIncludeBrandLevel"] = this.programAutoIncludeBrandLevel ? this.programAutoIncludeBrandLevel.toJSON() : <any>undefined;
        data["programAutoIncludeOrderLevel"] = this.programAutoIncludeOrderLevel ? this.programAutoIncludeOrderLevel.toJSON() : <any>undefined;
        data["programAutoIncludeProductLevel"] = this.programAutoIncludeProductLevel ? this.programAutoIncludeProductLevel.toJSON() : <any>undefined;
        return data; 
    }

    clone(): ProgramAutoIncludeRuleDto {
        const json = this.toJSON();
        let result = new ProgramAutoIncludeRuleDto();
        result.init(json);
        return result;
    }
}

export interface IProgramAutoIncludeRuleDto {
    autoIncludeRuleDescription: string | undefined;
    autoIncludeRuleLevel: string | undefined;
    autoIncludeRuleNumber: number | undefined;
    autoIncludeBrandLevelFlag: boolean | undefined;
    autoIncludeOrderLevelFlag: boolean | undefined;
    autoIncludeProductLevelFlag: boolean | undefined;
    seasonalStartMonth: number | undefined;
    seasonalStartDay: number | undefined;
    seasonalEndMonth: number | undefined;
    seasonalEndDay: number | undefined;
    programAutoIncludeBrandLevel: ProgramAutoIncludeBrandLevelDto | undefined;
    programAutoIncludeOrderLevel: ProgramAutoIncludeOrderLevelDto | undefined;
    programAutoIncludeProductLevel: ProgramAutoIncludeProductLevelDto | undefined;
}

export class ProgramAutoIncludeBrandLevelDto implements IProgramAutoIncludeBrandLevelDto {
    dtpProgramConfigurationId: string | undefined;
    specifiedProductGroupId: string | undefined;
    autoIncludedProductId: string | undefined;
    dateRangeTypeClassificationValueId: string | undefined;
    quantityRangeTypeClassificationValueId: string | undefined;
    startDate: Date | undefined;
    endDate: Date | undefined;
    productRequiredForShippingFlag: boolean | undefined;
    roundAutoIncludeQuantityFlag: boolean | undefined;
    perOrderIncludedQty: number | undefined;
    ratioIncludedQty: number | undefined;
    ratioBaseQty: number | undefined;
    maximumIncludedQty: number | undefined;
    productTypeExclusionsfromBrandCriteriaExistFlag: boolean | undefined;
    recipientStateRestrictionsExistFlag: boolean | undefined;
    autoIncludeProductTypeExclusionIds: string[] | undefined;
    autoIncludeOrderSourceIds: string[] | undefined;
    autoIncludeStates: string[] | undefined;
    autoIncludeQuantityRanges: ProgramAutoIncludeQuantityRangeDto[] | undefined;
    id: string | undefined;

    constructor(data?: IProgramAutoIncludeBrandLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.specifiedProductGroupId = _data["specifiedProductGroupId"];
            this.autoIncludedProductId = _data["autoIncludedProductId"];
            this.dateRangeTypeClassificationValueId = _data["dateRangeTypeClassificationValueId"];
            this.quantityRangeTypeClassificationValueId = _data["quantityRangeTypeClassificationValueId"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.productRequiredForShippingFlag = _data["productRequiredForShippingFlag"];
            this.roundAutoIncludeQuantityFlag = _data["roundAutoIncludeQuantityFlag"];
            this.perOrderIncludedQty = _data["perOrderIncludedQty"];
            this.ratioIncludedQty = _data["ratioIncludedQty"];
            this.ratioBaseQty = _data["ratioBaseQty"];
            this.maximumIncludedQty = _data["maximumIncludedQty"];
            this.productTypeExclusionsfromBrandCriteriaExistFlag = _data["productTypeExclusionsfromBrandCriteriaExistFlag"];
            this.recipientStateRestrictionsExistFlag = _data["recipientStateRestrictionsExistFlag"];
            if (Array.isArray(_data["autoIncludeProductTypeExclusionIds"])) {
                this.autoIncludeProductTypeExclusionIds = [] as any;
                for (let item of _data["autoIncludeProductTypeExclusionIds"])
                    this.autoIncludeProductTypeExclusionIds.push(item);
            }
            if (Array.isArray(_data["autoIncludeOrderSourceIds"])) {
                this.autoIncludeOrderSourceIds = [] as any;
                for (let item of _data["autoIncludeOrderSourceIds"])
                    this.autoIncludeOrderSourceIds.push(item);
            }
            if (Array.isArray(_data["autoIncludeStates"])) {
                this.autoIncludeStates = [] as any;
                for (let item of _data["autoIncludeStates"])
                    this.autoIncludeStates.push(item);
            }
            if (Array.isArray(_data["autoIncludeQuantityRanges"])) {
                this.autoIncludeQuantityRanges = [] as any;
                for (let item of _data["autoIncludeQuantityRanges"])
                    this.autoIncludeQuantityRanges.push(ProgramAutoIncludeQuantityRangeDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProgramAutoIncludeBrandLevelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramAutoIncludeBrandLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["specifiedProductGroupId"] = this.specifiedProductGroupId;
        data["autoIncludedProductId"] = this.autoIncludedProductId;
        data["dateRangeTypeClassificationValueId"] = this.dateRangeTypeClassificationValueId;
        data["quantityRangeTypeClassificationValueId"] = this.quantityRangeTypeClassificationValueId;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["productRequiredForShippingFlag"] = this.productRequiredForShippingFlag;
        data["roundAutoIncludeQuantityFlag"] = this.roundAutoIncludeQuantityFlag;
        data["perOrderIncludedQty"] = this.perOrderIncludedQty;
        data["ratioIncludedQty"] = this.ratioIncludedQty;
        data["ratioBaseQty"] = this.ratioBaseQty;
        data["maximumIncludedQty"] = this.maximumIncludedQty;
        data["productTypeExclusionsfromBrandCriteriaExistFlag"] = this.productTypeExclusionsfromBrandCriteriaExistFlag;
        data["recipientStateRestrictionsExistFlag"] = this.recipientStateRestrictionsExistFlag;
        if (Array.isArray(this.autoIncludeProductTypeExclusionIds)) {
            data["autoIncludeProductTypeExclusionIds"] = [];
            for (let item of this.autoIncludeProductTypeExclusionIds)
                data["autoIncludeProductTypeExclusionIds"].push(item);
        }
        if (Array.isArray(this.autoIncludeOrderSourceIds)) {
            data["autoIncludeOrderSourceIds"] = [];
            for (let item of this.autoIncludeOrderSourceIds)
                data["autoIncludeOrderSourceIds"].push(item);
        }
        if (Array.isArray(this.autoIncludeStates)) {
            data["autoIncludeStates"] = [];
            for (let item of this.autoIncludeStates)
                data["autoIncludeStates"].push(item);
        }
        if (Array.isArray(this.autoIncludeQuantityRanges)) {
            data["autoIncludeQuantityRanges"] = [];
            for (let item of this.autoIncludeQuantityRanges)
                data["autoIncludeQuantityRanges"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): ProgramAutoIncludeBrandLevelDto {
        const json = this.toJSON();
        let result = new ProgramAutoIncludeBrandLevelDto();
        result.init(json);
        return result;
    }
}

export interface IProgramAutoIncludeBrandLevelDto {
    dtpProgramConfigurationId: string | undefined;
    specifiedProductGroupId: string | undefined;
    autoIncludedProductId: string | undefined;
    dateRangeTypeClassificationValueId: string | undefined;
    quantityRangeTypeClassificationValueId: string | undefined;
    startDate: Date | undefined;
    endDate: Date | undefined;
    productRequiredForShippingFlag: boolean | undefined;
    roundAutoIncludeQuantityFlag: boolean | undefined;
    perOrderIncludedQty: number | undefined;
    ratioIncludedQty: number | undefined;
    ratioBaseQty: number | undefined;
    maximumIncludedQty: number | undefined;
    productTypeExclusionsfromBrandCriteriaExistFlag: boolean | undefined;
    recipientStateRestrictionsExistFlag: boolean | undefined;
    autoIncludeProductTypeExclusionIds: string[] | undefined;
    autoIncludeOrderSourceIds: string[] | undefined;
    autoIncludeStates: string[] | undefined;
    autoIncludeQuantityRanges: ProgramAutoIncludeQuantityRangeDto[] | undefined;
    id: string | undefined;
}

export class ProgramAutoIncludeOrderLevelDto implements IProgramAutoIncludeOrderLevelDto {
    autoIncludeRuleDescription: string | undefined;
    autoIncludeRuleNumber: number | undefined;
    dtpProgramConfigurationId: string | undefined;
    autoIncludedProductId: string | undefined;
    dateRangeTypeClassificationValueId: string | undefined;
    startDate: Date | undefined;
    endDate: Date | undefined;
    productRequiredForShippingFlag: boolean | undefined;
    perOrderIncludedQty: number | undefined;
    recipientStateRestrictionsExistFlag: boolean | undefined;
    autoIncludeOrderSourceIds: string[] | undefined;
    autoIncludeStates: string[] | undefined;
    id: string | undefined;

    constructor(data?: IProgramAutoIncludeOrderLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.autoIncludeRuleDescription = _data["autoIncludeRuleDescription"];
            this.autoIncludeRuleNumber = _data["autoIncludeRuleNumber"];
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.autoIncludedProductId = _data["autoIncludedProductId"];
            this.dateRangeTypeClassificationValueId = _data["dateRangeTypeClassificationValueId"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.productRequiredForShippingFlag = _data["productRequiredForShippingFlag"];
            this.perOrderIncludedQty = _data["perOrderIncludedQty"];
            this.recipientStateRestrictionsExistFlag = _data["recipientStateRestrictionsExistFlag"];
            if (Array.isArray(_data["autoIncludeOrderSourceIds"])) {
                this.autoIncludeOrderSourceIds = [] as any;
                for (let item of _data["autoIncludeOrderSourceIds"])
                    this.autoIncludeOrderSourceIds.push(item);
            }
            if (Array.isArray(_data["autoIncludeStates"])) {
                this.autoIncludeStates = [] as any;
                for (let item of _data["autoIncludeStates"])
                    this.autoIncludeStates.push(item);
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProgramAutoIncludeOrderLevelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramAutoIncludeOrderLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["autoIncludeRuleDescription"] = this.autoIncludeRuleDescription;
        data["autoIncludeRuleNumber"] = this.autoIncludeRuleNumber;
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["autoIncludedProductId"] = this.autoIncludedProductId;
        data["dateRangeTypeClassificationValueId"] = this.dateRangeTypeClassificationValueId;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["productRequiredForShippingFlag"] = this.productRequiredForShippingFlag;
        data["perOrderIncludedQty"] = this.perOrderIncludedQty;
        data["recipientStateRestrictionsExistFlag"] = this.recipientStateRestrictionsExistFlag;
        if (Array.isArray(this.autoIncludeOrderSourceIds)) {
            data["autoIncludeOrderSourceIds"] = [];
            for (let item of this.autoIncludeOrderSourceIds)
                data["autoIncludeOrderSourceIds"].push(item);
        }
        if (Array.isArray(this.autoIncludeStates)) {
            data["autoIncludeStates"] = [];
            for (let item of this.autoIncludeStates)
                data["autoIncludeStates"].push(item);
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): ProgramAutoIncludeOrderLevelDto {
        const json = this.toJSON();
        let result = new ProgramAutoIncludeOrderLevelDto();
        result.init(json);
        return result;
    }
}

export interface IProgramAutoIncludeOrderLevelDto {
    autoIncludeRuleDescription: string | undefined;
    autoIncludeRuleNumber: number | undefined;
    dtpProgramConfigurationId: string | undefined;
    autoIncludedProductId: string | undefined;
    dateRangeTypeClassificationValueId: string | undefined;
    startDate: Date | undefined;
    endDate: Date | undefined;
    productRequiredForShippingFlag: boolean | undefined;
    perOrderIncludedQty: number | undefined;
    recipientStateRestrictionsExistFlag: boolean | undefined;
    autoIncludeOrderSourceIds: string[] | undefined;
    autoIncludeStates: string[] | undefined;
    id: string | undefined;
}

export class ProgramAutoIncludeProductLevelDto implements IProgramAutoIncludeProductLevelDto {
    autoIncludeRuleDescription: string | undefined;
    autoIncludeRuleNumber: number | undefined;
    dtpProgramConfigurationId: string | undefined;
    specifiedProductId: string | undefined;
    autoIncludedProductId: string | undefined;
    dateRangeTypeClassificationValueId: string | undefined;
    quantityRangeTypeClassificationValueId: string | undefined;
    startDate: Date | undefined;
    endDate: Date | undefined;
    productRequiredForShippingFlag: boolean | undefined;
    roundAutoIncludeQuantityFlag: boolean | undefined;
    perOrderIncludedQty: number | undefined;
    ratioIncludedQty: number | undefined;
    ratioBaseQty: number | undefined;
    maximumIncludedQty: number | undefined;
    recipientStateRestrictionsExistFlag: boolean | undefined;
    autoIncludeOrderSourceIds: string[] | undefined;
    autoIncludeStates: string[] | undefined;
    autoIncludeQuantityRanges: ProgramAutoIncludeQuantityRangeDto[] | undefined;
    id: string | undefined;

    constructor(data?: IProgramAutoIncludeProductLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.autoIncludeRuleDescription = _data["autoIncludeRuleDescription"];
            this.autoIncludeRuleNumber = _data["autoIncludeRuleNumber"];
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.specifiedProductId = _data["specifiedProductId"];
            this.autoIncludedProductId = _data["autoIncludedProductId"];
            this.dateRangeTypeClassificationValueId = _data["dateRangeTypeClassificationValueId"];
            this.quantityRangeTypeClassificationValueId = _data["quantityRangeTypeClassificationValueId"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.productRequiredForShippingFlag = _data["productRequiredForShippingFlag"];
            this.roundAutoIncludeQuantityFlag = _data["roundAutoIncludeQuantityFlag"];
            this.perOrderIncludedQty = _data["perOrderIncludedQty"];
            this.ratioIncludedQty = _data["ratioIncludedQty"];
            this.ratioBaseQty = _data["ratioBaseQty"];
            this.maximumIncludedQty = _data["maximumIncludedQty"];
            this.recipientStateRestrictionsExistFlag = _data["recipientStateRestrictionsExistFlag"];
            if (Array.isArray(_data["autoIncludeOrderSourceIds"])) {
                this.autoIncludeOrderSourceIds = [] as any;
                for (let item of _data["autoIncludeOrderSourceIds"])
                    this.autoIncludeOrderSourceIds.push(item);
            }
            if (Array.isArray(_data["autoIncludeStates"])) {
                this.autoIncludeStates = [] as any;
                for (let item of _data["autoIncludeStates"])
                    this.autoIncludeStates.push(item);
            }
            if (Array.isArray(_data["autoIncludeQuantityRanges"])) {
                this.autoIncludeQuantityRanges = [] as any;
                for (let item of _data["autoIncludeQuantityRanges"])
                    this.autoIncludeQuantityRanges.push(ProgramAutoIncludeQuantityRangeDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProgramAutoIncludeProductLevelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramAutoIncludeProductLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["autoIncludeRuleDescription"] = this.autoIncludeRuleDescription;
        data["autoIncludeRuleNumber"] = this.autoIncludeRuleNumber;
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["specifiedProductId"] = this.specifiedProductId;
        data["autoIncludedProductId"] = this.autoIncludedProductId;
        data["dateRangeTypeClassificationValueId"] = this.dateRangeTypeClassificationValueId;
        data["quantityRangeTypeClassificationValueId"] = this.quantityRangeTypeClassificationValueId;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["productRequiredForShippingFlag"] = this.productRequiredForShippingFlag;
        data["roundAutoIncludeQuantityFlag"] = this.roundAutoIncludeQuantityFlag;
        data["perOrderIncludedQty"] = this.perOrderIncludedQty;
        data["ratioIncludedQty"] = this.ratioIncludedQty;
        data["ratioBaseQty"] = this.ratioBaseQty;
        data["maximumIncludedQty"] = this.maximumIncludedQty;
        data["recipientStateRestrictionsExistFlag"] = this.recipientStateRestrictionsExistFlag;
        if (Array.isArray(this.autoIncludeOrderSourceIds)) {
            data["autoIncludeOrderSourceIds"] = [];
            for (let item of this.autoIncludeOrderSourceIds)
                data["autoIncludeOrderSourceIds"].push(item);
        }
        if (Array.isArray(this.autoIncludeStates)) {
            data["autoIncludeStates"] = [];
            for (let item of this.autoIncludeStates)
                data["autoIncludeStates"].push(item);
        }
        if (Array.isArray(this.autoIncludeQuantityRanges)) {
            data["autoIncludeQuantityRanges"] = [];
            for (let item of this.autoIncludeQuantityRanges)
                data["autoIncludeQuantityRanges"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): ProgramAutoIncludeProductLevelDto {
        const json = this.toJSON();
        let result = new ProgramAutoIncludeProductLevelDto();
        result.init(json);
        return result;
    }
}

export interface IProgramAutoIncludeProductLevelDto {
    autoIncludeRuleDescription: string | undefined;
    autoIncludeRuleNumber: number | undefined;
    dtpProgramConfigurationId: string | undefined;
    specifiedProductId: string | undefined;
    autoIncludedProductId: string | undefined;
    dateRangeTypeClassificationValueId: string | undefined;
    quantityRangeTypeClassificationValueId: string | undefined;
    startDate: Date | undefined;
    endDate: Date | undefined;
    productRequiredForShippingFlag: boolean | undefined;
    roundAutoIncludeQuantityFlag: boolean | undefined;
    perOrderIncludedQty: number | undefined;
    ratioIncludedQty: number | undefined;
    ratioBaseQty: number | undefined;
    maximumIncludedQty: number | undefined;
    recipientStateRestrictionsExistFlag: boolean | undefined;
    autoIncludeOrderSourceIds: string[] | undefined;
    autoIncludeStates: string[] | undefined;
    autoIncludeQuantityRanges: ProgramAutoIncludeQuantityRangeDto[] | undefined;
    id: string | undefined;
}

export class ProgramAutoIncludeQuantityRangeDto implements IProgramAutoIncludeQuantityRangeDto {
    rangeMinimumQty: number | undefined;
    rangeMaximumQty: number | undefined;
    perOrderIncludedQty: number | undefined;
    id: string | undefined;

    constructor(data?: IProgramAutoIncludeQuantityRangeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rangeMinimumQty = _data["rangeMinimumQty"];
            this.rangeMaximumQty = _data["rangeMaximumQty"];
            this.perOrderIncludedQty = _data["perOrderIncludedQty"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProgramAutoIncludeQuantityRangeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramAutoIncludeQuantityRangeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rangeMinimumQty"] = this.rangeMinimumQty;
        data["rangeMaximumQty"] = this.rangeMaximumQty;
        data["perOrderIncludedQty"] = this.perOrderIncludedQty;
        data["id"] = this.id;
        return data; 
    }

    clone(): ProgramAutoIncludeQuantityRangeDto {
        const json = this.toJSON();
        let result = new ProgramAutoIncludeQuantityRangeDto();
        result.init(json);
        return result;
    }
}

export interface IProgramAutoIncludeQuantityRangeDto {
    rangeMinimumQty: number | undefined;
    rangeMaximumQty: number | undefined;
    perOrderIncludedQty: number | undefined;
    id: string | undefined;
}

export class AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto implements IAjaxResponseOfPageValidationOfProgramOrderFulfillmentDto {
    result: PageValidationOfProgramOrderFulfillmentDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramOrderFulfillmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramOrderFulfillmentDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramOrderFulfillmentDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramOrderFulfillmentDto {
    result: PageValidationOfProgramOrderFulfillmentDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramOrderFulfillmentDto implements IPageValidationOfProgramOrderFulfillmentDto {
    dataDto: ProgramOrderFulfillmentDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramOrderFulfillmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramOrderFulfillmentDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramOrderFulfillmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramOrderFulfillmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramOrderFulfillmentDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramOrderFulfillmentDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramOrderFulfillmentDto {
    dataDto: ProgramOrderFulfillmentDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramOrderFulfillmentDto implements IProgramOrderFulfillmentDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    orderReceivedCutOffTime: Date | undefined;
    splitOrderCarrierServiceTypeId: string | undefined;
    orderTurnaroundDays: number | undefined;
    hasShipAloneProductsFlag: boolean | undefined;
    productTypes: DtpProgramConfigurationProductTypeDto[] | undefined;
    /** Is there at least one product that has "Is Select Day Shipping required?" set to true? */
    hasSelectDayShippingRequiredProduct: boolean | undefined;
    splitOrderCarrierId: string | undefined;

    constructor(data?: IProgramOrderFulfillmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.orderProcessableFlag = _data["orderProcessableFlag"];
            this.orderReceivedCutOffTime = _data["orderReceivedCutOffTime"] ? new Date(_data["orderReceivedCutOffTime"].toString()) : <any>undefined;
            this.splitOrderCarrierServiceTypeId = _data["splitOrderCarrierServiceTypeId"];
            this.orderTurnaroundDays = _data["orderTurnaroundDays"];
            this.hasShipAloneProductsFlag = _data["hasShipAloneProductsFlag"];
            if (Array.isArray(_data["productTypes"])) {
                this.productTypes = [] as any;
                for (let item of _data["productTypes"])
                    this.productTypes.push(DtpProgramConfigurationProductTypeDto.fromJS(item));
            }
            this.hasSelectDayShippingRequiredProduct = _data["hasSelectDayShippingRequiredProduct"];
            this.splitOrderCarrierId = _data["splitOrderCarrierId"];
        }
    }

    static fromJS(data: any): ProgramOrderFulfillmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramOrderFulfillmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["orderProcessableFlag"] = this.orderProcessableFlag;
        data["orderReceivedCutOffTime"] = this.orderReceivedCutOffTime ? this.orderReceivedCutOffTime.toISOString() : <any>undefined;
        data["splitOrderCarrierServiceTypeId"] = this.splitOrderCarrierServiceTypeId;
        data["orderTurnaroundDays"] = this.orderTurnaroundDays;
        data["hasShipAloneProductsFlag"] = this.hasShipAloneProductsFlag;
        if (Array.isArray(this.productTypes)) {
            data["productTypes"] = [];
            for (let item of this.productTypes)
                data["productTypes"].push(item.toJSON());
        }
        data["hasSelectDayShippingRequiredProduct"] = this.hasSelectDayShippingRequiredProduct;
        data["splitOrderCarrierId"] = this.splitOrderCarrierId;
        return data; 
    }

    clone(): ProgramOrderFulfillmentDto {
        const json = this.toJSON();
        let result = new ProgramOrderFulfillmentDto();
        result.init(json);
        return result;
    }
}

export interface IProgramOrderFulfillmentDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    orderReceivedCutOffTime: Date | undefined;
    splitOrderCarrierServiceTypeId: string | undefined;
    orderTurnaroundDays: number | undefined;
    hasShipAloneProductsFlag: boolean | undefined;
    productTypes: DtpProgramConfigurationProductTypeDto[] | undefined;
    /** Is there at least one product that has "Is Select Day Shipping required?" set to true? */
    hasSelectDayShippingRequiredProduct: boolean | undefined;
    splitOrderCarrierId: string | undefined;
}

export class DtpProgramConfigurationProductTypeDto implements IDtpProgramConfigurationProductTypeDto {
    id: string | undefined;
    productTypeId: string | undefined;
    carrierServiceTypeId: string | undefined;
    priority: number | undefined;
    carrierId: string | undefined;
    carrierServiceTypes: ProgramReferenceDataDto[] | undefined;

    constructor(data?: IDtpProgramConfigurationProductTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productTypeId = _data["productTypeId"];
            this.carrierServiceTypeId = _data["carrierServiceTypeId"];
            this.priority = _data["priority"];
            this.carrierId = _data["carrierId"];
            if (Array.isArray(_data["carrierServiceTypes"])) {
                this.carrierServiceTypes = [] as any;
                for (let item of _data["carrierServiceTypes"])
                    this.carrierServiceTypes.push(ProgramReferenceDataDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DtpProgramConfigurationProductTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigurationProductTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productTypeId"] = this.productTypeId;
        data["carrierServiceTypeId"] = this.carrierServiceTypeId;
        data["priority"] = this.priority;
        data["carrierId"] = this.carrierId;
        if (Array.isArray(this.carrierServiceTypes)) {
            data["carrierServiceTypes"] = [];
            for (let item of this.carrierServiceTypes)
                data["carrierServiceTypes"].push(item.toJSON());
        }
        return data; 
    }

    clone(): DtpProgramConfigurationProductTypeDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigurationProductTypeDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigurationProductTypeDto {
    id: string | undefined;
    productTypeId: string | undefined;
    carrierServiceTypeId: string | undefined;
    priority: number | undefined;
    carrierId: string | undefined;
    carrierServiceTypes: ProgramReferenceDataDto[] | undefined;
}

export class ProgramReferenceDataDto implements IProgramReferenceDataDto {
    id: string | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IProgramReferenceDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProgramReferenceDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramReferenceDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProgramReferenceDataDto {
        const json = this.toJSON();
        let result = new ProgramReferenceDataDto();
        result.init(json);
        return result;
    }
}

export interface IProgramReferenceDataDto {
    id: string | undefined;
    names: LocalizedValue[] | undefined;
}

export class AjaxResponseOfPageValidationOfProgramAocDto implements IAjaxResponseOfPageValidationOfProgramAocDto {
    result: PageValidationOfProgramAocDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramAocDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramAocDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramAocDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramAocDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramAocDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramAocDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramAocDto {
    result: PageValidationOfProgramAocDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramAocDto implements IPageValidationOfProgramAocDto {
    dataDto: ProgramAocDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramAocDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramAocDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramAocDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramAocDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramAocDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramAocDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramAocDto {
    dataDto: ProgramAocDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramAocDto implements IProgramAocDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    aocFollowUpLetterFlag: boolean | undefined;
    aocFollowUpLettersCountClassificationValueId: string | undefined;
    aocFollowUpCallFlag: boolean | undefined;
    eaocApplicableFlag: boolean | undefined;
    displayEaocSection: boolean | undefined;
    aocFollowUpCallDaysCount: number | undefined;
    invalidAocCallFlag: boolean | undefined;
    openAocDoNotHonorListDaysCount: number | undefined;
    letter1Days: number | undefined;
    letter2Days: number | undefined;
    letter3Days: number | undefined;
    programCycleId: string | undefined;

    constructor(data?: IProgramAocDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.orderProcessableFlag = _data["orderProcessableFlag"];
            this.aocFollowUpLetterFlag = _data["aocFollowUpLetterFlag"];
            this.aocFollowUpLettersCountClassificationValueId = _data["aocFollowUpLettersCountClassificationValueId"];
            this.aocFollowUpCallFlag = _data["aocFollowUpCallFlag"];
            this.eaocApplicableFlag = _data["eaocApplicableFlag"];
            this.displayEaocSection = _data["displayEaocSection"];
            this.aocFollowUpCallDaysCount = _data["aocFollowUpCallDaysCount"];
            this.invalidAocCallFlag = _data["invalidAocCallFlag"];
            this.openAocDoNotHonorListDaysCount = _data["openAocDoNotHonorListDaysCount"];
            this.letter1Days = _data["letter1Days"];
            this.letter2Days = _data["letter2Days"];
            this.letter3Days = _data["letter3Days"];
            this.programCycleId = _data["programCycleId"];
        }
    }

    static fromJS(data: any): ProgramAocDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramAocDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["orderProcessableFlag"] = this.orderProcessableFlag;
        data["aocFollowUpLetterFlag"] = this.aocFollowUpLetterFlag;
        data["aocFollowUpLettersCountClassificationValueId"] = this.aocFollowUpLettersCountClassificationValueId;
        data["aocFollowUpCallFlag"] = this.aocFollowUpCallFlag;
        data["eaocApplicableFlag"] = this.eaocApplicableFlag;
        data["displayEaocSection"] = this.displayEaocSection;
        data["aocFollowUpCallDaysCount"] = this.aocFollowUpCallDaysCount;
        data["invalidAocCallFlag"] = this.invalidAocCallFlag;
        data["openAocDoNotHonorListDaysCount"] = this.openAocDoNotHonorListDaysCount;
        data["letter1Days"] = this.letter1Days;
        data["letter2Days"] = this.letter2Days;
        data["letter3Days"] = this.letter3Days;
        data["programCycleId"] = this.programCycleId;
        return data; 
    }

    clone(): ProgramAocDto {
        const json = this.toJSON();
        let result = new ProgramAocDto();
        result.init(json);
        return result;
    }
}

export interface IProgramAocDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    aocFollowUpLetterFlag: boolean | undefined;
    aocFollowUpLettersCountClassificationValueId: string | undefined;
    aocFollowUpCallFlag: boolean | undefined;
    eaocApplicableFlag: boolean | undefined;
    displayEaocSection: boolean | undefined;
    aocFollowUpCallDaysCount: number | undefined;
    invalidAocCallFlag: boolean | undefined;
    openAocDoNotHonorListDaysCount: number | undefined;
    letter1Days: number | undefined;
    letter2Days: number | undefined;
    letter3Days: number | undefined;
    programCycleId: string | undefined;
}

export class AjaxResponseOfPageValidationOfProgramSvlDto implements IAjaxResponseOfPageValidationOfProgramSvlDto {
    result: PageValidationOfProgramSvlDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramSvlDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramSvlDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramSvlDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramSvlDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramSvlDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramSvlDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramSvlDto {
    result: PageValidationOfProgramSvlDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramSvlDto implements IPageValidationOfProgramSvlDto {
    dataDto: ProgramSvlDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramSvlDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramSvlDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramSvlDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramSvlDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramSvlDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramSvlDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramSvlDto {
    dataDto: ProgramSvlDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramSvlDto implements IProgramSvlDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    orderRequestOnlyFlag: boolean | undefined;
    aocOnlyFlag: boolean | undefined;
    svlRequiredFlag: boolean | undefined;
    orderRequestSVLApplicableFlag: boolean | undefined;
    aocsvlApplicableFlag: boolean | undefined;
    monthlySVLOrderSelectionGoalPercent: number | undefined;
    minimumSVLOrderSelectionOrderCount: number | undefined;
    minimumSVLResponseThresholdPercent: number | undefined;
    negativeSVLResponseOrderSelectionGoalPercent: number | undefined;

    constructor(data?: IProgramSvlDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.orderProcessableFlag = _data["orderProcessableFlag"];
            this.orderRequestOnlyFlag = _data["orderRequestOnlyFlag"];
            this.aocOnlyFlag = _data["aocOnlyFlag"];
            this.svlRequiredFlag = _data["svlRequiredFlag"];
            this.orderRequestSVLApplicableFlag = _data["orderRequestSVLApplicableFlag"];
            this.aocsvlApplicableFlag = _data["aocsvlApplicableFlag"];
            this.monthlySVLOrderSelectionGoalPercent = _data["monthlySVLOrderSelectionGoalPercent"];
            this.minimumSVLOrderSelectionOrderCount = _data["minimumSVLOrderSelectionOrderCount"];
            this.minimumSVLResponseThresholdPercent = _data["minimumSVLResponseThresholdPercent"];
            this.negativeSVLResponseOrderSelectionGoalPercent = _data["negativeSVLResponseOrderSelectionGoalPercent"];
        }
    }

    static fromJS(data: any): ProgramSvlDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramSvlDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["orderProcessableFlag"] = this.orderProcessableFlag;
        data["orderRequestOnlyFlag"] = this.orderRequestOnlyFlag;
        data["aocOnlyFlag"] = this.aocOnlyFlag;
        data["svlRequiredFlag"] = this.svlRequiredFlag;
        data["orderRequestSVLApplicableFlag"] = this.orderRequestSVLApplicableFlag;
        data["aocsvlApplicableFlag"] = this.aocsvlApplicableFlag;
        data["monthlySVLOrderSelectionGoalPercent"] = this.monthlySVLOrderSelectionGoalPercent;
        data["minimumSVLOrderSelectionOrderCount"] = this.minimumSVLOrderSelectionOrderCount;
        data["minimumSVLResponseThresholdPercent"] = this.minimumSVLResponseThresholdPercent;
        data["negativeSVLResponseOrderSelectionGoalPercent"] = this.negativeSVLResponseOrderSelectionGoalPercent;
        return data; 
    }

    clone(): ProgramSvlDto {
        const json = this.toJSON();
        let result = new ProgramSvlDto();
        result.init(json);
        return result;
    }
}

export interface IProgramSvlDto {
    dtpProgramConfigurationId: string | undefined;
    orderProcessableFlag: boolean | undefined;
    orderRequestOnlyFlag: boolean | undefined;
    aocOnlyFlag: boolean | undefined;
    svlRequiredFlag: boolean | undefined;
    orderRequestSVLApplicableFlag: boolean | undefined;
    aocsvlApplicableFlag: boolean | undefined;
    monthlySVLOrderSelectionGoalPercent: number | undefined;
    minimumSVLOrderSelectionOrderCount: number | undefined;
    minimumSVLResponseThresholdPercent: number | undefined;
    negativeSVLResponseOrderSelectionGoalPercent: number | undefined;
}

export class AjaxResponseOfPageValidationOfProgramTemplateDto implements IAjaxResponseOfPageValidationOfProgramTemplateDto {
    result: PageValidationOfProgramTemplateDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramTemplateDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramTemplateDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramTemplateDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramTemplateDto {
    result: PageValidationOfProgramTemplateDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramTemplateDto implements IPageValidationOfProgramTemplateDto {
    dataDto: ProgramTemplateDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramTemplateDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramTemplateDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramTemplateDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramTemplateDto {
    dataDto: ProgramTemplateDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramTemplateDto implements IProgramTemplateDto {
    dtpProgramConfigurationId: string | undefined;
    atLeastOneOrderableProduct: boolean | undefined;
    atLeastOneOrderSource: boolean | undefined;
    atLeastOneLogo: boolean | undefined;
    atLeastOneAOCProduct: boolean | undefined;
    atLeastOneControlledProduct: boolean | undefined;
    hasPaperOrderSourceType: boolean | undefined;
    hasElectronicSourceType: boolean | undefined;
    hasNonMscElectronicSourceType: boolean | undefined;
    hasMscSourceType: boolean | undefined;
    hasEAocs: boolean | undefined;
    hasOrderExpiredRule: boolean | undefined;
    hasMissingSpecialtyRule: boolean | undefined;
    hasMissingRequestorSanOrRecipientSanRule: boolean | undefined;
    logoId: string | undefined;
    newLogo: ProgramLogoAttachmentDto | undefined;
    logos: ProgramLogoAttachmentDto[] | undefined;
    logo: DtpProgramConfigAttachmentDto | undefined;
    clientSignatureBlockText: string | undefined;
    documentTemplates: SimpleDocumentTemplateDto[] | undefined;
    srfExpirationDateIncludeFlag: boolean | undefined;
    deaIncludeFlag: boolean | undefined;
    specialtyIncludeFlag: boolean | undefined;
    sanIncludeFlag: boolean | undefined;
    professionalDesignationMdIncludeFlag: boolean | undefined;
    professionalDesignationDoIncludeFlag: boolean | undefined;
    professionalDesignationNpIncludeFlag: boolean | undefined;
    professionalDesignationPaIncludeFlag: boolean | undefined;
    professionalDesignationOtherIncludeFlag: boolean | undefined;
    knipperDeaNumberClassificationValueId: string | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    srfTemplates: DtpProgramConfigSrfTemplateDto[] | undefined;
    aocFollowUpLetterFlag: boolean | undefined;
    aocFollowUpLetterFirstOrSecondFlag: boolean | undefined;
    orderRequestSVLApplicableFlag: boolean | undefined;
    aocsvlApplicableFlag: boolean | undefined;
    aococrCode: string | undefined;
    svlocrCode: string | undefined;
    exceptionLetter: DtpProgramConfigDocumentTemplateDto | undefined;
    rejectionLetter: DtpProgramConfigDocumentTemplateDto | undefined;
    firstSecondAOCFollowUpLetter: DtpProgramConfigDocumentTemplateDto | undefined;
    finalAOCFollowUpLetter: DtpProgramConfigDocumentTemplateDto | undefined;
    orderRequestSVL: DtpProgramConfigDocumentTemplateDto | undefined;
    aocSvl: DtpProgramConfigDocumentTemplateDto | undefined;
    orderDor: DtpProgramConfigDocumentTemplateDto | undefined;
    eAocDor: DtpProgramConfigDocumentTemplateDto | undefined;

    constructor(data?: IProgramTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.atLeastOneOrderableProduct = _data["atLeastOneOrderableProduct"];
            this.atLeastOneOrderSource = _data["atLeastOneOrderSource"];
            this.atLeastOneLogo = _data["atLeastOneLogo"];
            this.atLeastOneAOCProduct = _data["atLeastOneAOCProduct"];
            this.atLeastOneControlledProduct = _data["atLeastOneControlledProduct"];
            this.hasPaperOrderSourceType = _data["hasPaperOrderSourceType"];
            this.hasElectronicSourceType = _data["hasElectronicSourceType"];
            this.hasNonMscElectronicSourceType = _data["hasNonMscElectronicSourceType"];
            this.hasMscSourceType = _data["hasMscSourceType"];
            this.hasEAocs = _data["hasEAocs"];
            this.hasOrderExpiredRule = _data["hasOrderExpiredRule"];
            this.hasMissingSpecialtyRule = _data["hasMissingSpecialtyRule"];
            this.hasMissingRequestorSanOrRecipientSanRule = _data["hasMissingRequestorSanOrRecipientSanRule"];
            this.logoId = _data["logoId"];
            this.newLogo = _data["newLogo"] ? ProgramLogoAttachmentDto.fromJS(_data["newLogo"]) : <any>undefined;
            if (Array.isArray(_data["logos"])) {
                this.logos = [] as any;
                for (let item of _data["logos"])
                    this.logos.push(ProgramLogoAttachmentDto.fromJS(item));
            }
            this.logo = _data["logo"] ? DtpProgramConfigAttachmentDto.fromJS(_data["logo"]) : <any>undefined;
            this.clientSignatureBlockText = _data["clientSignatureBlockText"];
            if (Array.isArray(_data["documentTemplates"])) {
                this.documentTemplates = [] as any;
                for (let item of _data["documentTemplates"])
                    this.documentTemplates.push(SimpleDocumentTemplateDto.fromJS(item));
            }
            this.srfExpirationDateIncludeFlag = _data["srfExpirationDateIncludeFlag"];
            this.deaIncludeFlag = _data["deaIncludeFlag"];
            this.specialtyIncludeFlag = _data["specialtyIncludeFlag"];
            this.sanIncludeFlag = _data["sanIncludeFlag"];
            this.professionalDesignationMdIncludeFlag = _data["professionalDesignationMdIncludeFlag"];
            this.professionalDesignationDoIncludeFlag = _data["professionalDesignationDoIncludeFlag"];
            this.professionalDesignationNpIncludeFlag = _data["professionalDesignationNpIncludeFlag"];
            this.professionalDesignationPaIncludeFlag = _data["professionalDesignationPaIncludeFlag"];
            this.professionalDesignationOtherIncludeFlag = _data["professionalDesignationOtherIncludeFlag"];
            this.knipperDeaNumberClassificationValueId = _data["knipperDeaNumberClassificationValueId"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["srfTemplates"])) {
                this.srfTemplates = [] as any;
                for (let item of _data["srfTemplates"])
                    this.srfTemplates.push(DtpProgramConfigSrfTemplateDto.fromJS(item));
            }
            this.aocFollowUpLetterFlag = _data["aocFollowUpLetterFlag"];
            this.aocFollowUpLetterFirstOrSecondFlag = _data["aocFollowUpLetterFirstOrSecondFlag"];
            this.orderRequestSVLApplicableFlag = _data["orderRequestSVLApplicableFlag"];
            this.aocsvlApplicableFlag = _data["aocsvlApplicableFlag"];
            this.aococrCode = _data["aococrCode"];
            this.svlocrCode = _data["svlocrCode"];
            this.exceptionLetter = _data["exceptionLetter"] ? DtpProgramConfigDocumentTemplateDto.fromJS(_data["exceptionLetter"]) : <any>undefined;
            this.rejectionLetter = _data["rejectionLetter"] ? DtpProgramConfigDocumentTemplateDto.fromJS(_data["rejectionLetter"]) : <any>undefined;
            this.firstSecondAOCFollowUpLetter = _data["firstSecondAOCFollowUpLetter"] ? DtpProgramConfigDocumentTemplateDto.fromJS(_data["firstSecondAOCFollowUpLetter"]) : <any>undefined;
            this.finalAOCFollowUpLetter = _data["finalAOCFollowUpLetter"] ? DtpProgramConfigDocumentTemplateDto.fromJS(_data["finalAOCFollowUpLetter"]) : <any>undefined;
            this.orderRequestSVL = _data["orderRequestSVL"] ? DtpProgramConfigDocumentTemplateDto.fromJS(_data["orderRequestSVL"]) : <any>undefined;
            this.aocSvl = _data["aocSvl"] ? DtpProgramConfigDocumentTemplateDto.fromJS(_data["aocSvl"]) : <any>undefined;
            this.orderDor = _data["orderDor"] ? DtpProgramConfigDocumentTemplateDto.fromJS(_data["orderDor"]) : <any>undefined;
            this.eAocDor = _data["eAocDor"] ? DtpProgramConfigDocumentTemplateDto.fromJS(_data["eAocDor"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProgramTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["atLeastOneOrderableProduct"] = this.atLeastOneOrderableProduct;
        data["atLeastOneOrderSource"] = this.atLeastOneOrderSource;
        data["atLeastOneLogo"] = this.atLeastOneLogo;
        data["atLeastOneAOCProduct"] = this.atLeastOneAOCProduct;
        data["atLeastOneControlledProduct"] = this.atLeastOneControlledProduct;
        data["hasPaperOrderSourceType"] = this.hasPaperOrderSourceType;
        data["hasElectronicSourceType"] = this.hasElectronicSourceType;
        data["hasNonMscElectronicSourceType"] = this.hasNonMscElectronicSourceType;
        data["hasMscSourceType"] = this.hasMscSourceType;
        data["hasEAocs"] = this.hasEAocs;
        data["hasOrderExpiredRule"] = this.hasOrderExpiredRule;
        data["hasMissingSpecialtyRule"] = this.hasMissingSpecialtyRule;
        data["hasMissingRequestorSanOrRecipientSanRule"] = this.hasMissingRequestorSanOrRecipientSanRule;
        data["logoId"] = this.logoId;
        data["newLogo"] = this.newLogo ? this.newLogo.toJSON() : <any>undefined;
        if (Array.isArray(this.logos)) {
            data["logos"] = [];
            for (let item of this.logos)
                data["logos"].push(item.toJSON());
        }
        data["logo"] = this.logo ? this.logo.toJSON() : <any>undefined;
        data["clientSignatureBlockText"] = this.clientSignatureBlockText;
        if (Array.isArray(this.documentTemplates)) {
            data["documentTemplates"] = [];
            for (let item of this.documentTemplates)
                data["documentTemplates"].push(item.toJSON());
        }
        data["srfExpirationDateIncludeFlag"] = this.srfExpirationDateIncludeFlag;
        data["deaIncludeFlag"] = this.deaIncludeFlag;
        data["specialtyIncludeFlag"] = this.specialtyIncludeFlag;
        data["sanIncludeFlag"] = this.sanIncludeFlag;
        data["professionalDesignationMdIncludeFlag"] = this.professionalDesignationMdIncludeFlag;
        data["professionalDesignationDoIncludeFlag"] = this.professionalDesignationDoIncludeFlag;
        data["professionalDesignationNpIncludeFlag"] = this.professionalDesignationNpIncludeFlag;
        data["professionalDesignationPaIncludeFlag"] = this.professionalDesignationPaIncludeFlag;
        data["professionalDesignationOtherIncludeFlag"] = this.professionalDesignationOtherIncludeFlag;
        data["knipperDeaNumberClassificationValueId"] = this.knipperDeaNumberClassificationValueId;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        if (Array.isArray(this.srfTemplates)) {
            data["srfTemplates"] = [];
            for (let item of this.srfTemplates)
                data["srfTemplates"].push(item.toJSON());
        }
        data["aocFollowUpLetterFlag"] = this.aocFollowUpLetterFlag;
        data["aocFollowUpLetterFirstOrSecondFlag"] = this.aocFollowUpLetterFirstOrSecondFlag;
        data["orderRequestSVLApplicableFlag"] = this.orderRequestSVLApplicableFlag;
        data["aocsvlApplicableFlag"] = this.aocsvlApplicableFlag;
        data["aococrCode"] = this.aococrCode;
        data["svlocrCode"] = this.svlocrCode;
        data["exceptionLetter"] = this.exceptionLetter ? this.exceptionLetter.toJSON() : <any>undefined;
        data["rejectionLetter"] = this.rejectionLetter ? this.rejectionLetter.toJSON() : <any>undefined;
        data["firstSecondAOCFollowUpLetter"] = this.firstSecondAOCFollowUpLetter ? this.firstSecondAOCFollowUpLetter.toJSON() : <any>undefined;
        data["finalAOCFollowUpLetter"] = this.finalAOCFollowUpLetter ? this.finalAOCFollowUpLetter.toJSON() : <any>undefined;
        data["orderRequestSVL"] = this.orderRequestSVL ? this.orderRequestSVL.toJSON() : <any>undefined;
        data["aocSvl"] = this.aocSvl ? this.aocSvl.toJSON() : <any>undefined;
        data["orderDor"] = this.orderDor ? this.orderDor.toJSON() : <any>undefined;
        data["eAocDor"] = this.eAocDor ? this.eAocDor.toJSON() : <any>undefined;
        return data; 
    }

    clone(): ProgramTemplateDto {
        const json = this.toJSON();
        let result = new ProgramTemplateDto();
        result.init(json);
        return result;
    }
}

export interface IProgramTemplateDto {
    dtpProgramConfigurationId: string | undefined;
    atLeastOneOrderableProduct: boolean | undefined;
    atLeastOneOrderSource: boolean | undefined;
    atLeastOneLogo: boolean | undefined;
    atLeastOneAOCProduct: boolean | undefined;
    atLeastOneControlledProduct: boolean | undefined;
    hasPaperOrderSourceType: boolean | undefined;
    hasElectronicSourceType: boolean | undefined;
    hasNonMscElectronicSourceType: boolean | undefined;
    hasMscSourceType: boolean | undefined;
    hasEAocs: boolean | undefined;
    hasOrderExpiredRule: boolean | undefined;
    hasMissingSpecialtyRule: boolean | undefined;
    hasMissingRequestorSanOrRecipientSanRule: boolean | undefined;
    logoId: string | undefined;
    newLogo: ProgramLogoAttachmentDto | undefined;
    logos: ProgramLogoAttachmentDto[] | undefined;
    logo: DtpProgramConfigAttachmentDto | undefined;
    clientSignatureBlockText: string | undefined;
    documentTemplates: SimpleDocumentTemplateDto[] | undefined;
    srfExpirationDateIncludeFlag: boolean | undefined;
    deaIncludeFlag: boolean | undefined;
    specialtyIncludeFlag: boolean | undefined;
    sanIncludeFlag: boolean | undefined;
    professionalDesignationMdIncludeFlag: boolean | undefined;
    professionalDesignationDoIncludeFlag: boolean | undefined;
    professionalDesignationNpIncludeFlag: boolean | undefined;
    professionalDesignationPaIncludeFlag: boolean | undefined;
    professionalDesignationOtherIncludeFlag: boolean | undefined;
    knipperDeaNumberClassificationValueId: string | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    srfTemplates: DtpProgramConfigSrfTemplateDto[] | undefined;
    aocFollowUpLetterFlag: boolean | undefined;
    aocFollowUpLetterFirstOrSecondFlag: boolean | undefined;
    orderRequestSVLApplicableFlag: boolean | undefined;
    aocsvlApplicableFlag: boolean | undefined;
    aococrCode: string | undefined;
    svlocrCode: string | undefined;
    exceptionLetter: DtpProgramConfigDocumentTemplateDto | undefined;
    rejectionLetter: DtpProgramConfigDocumentTemplateDto | undefined;
    firstSecondAOCFollowUpLetter: DtpProgramConfigDocumentTemplateDto | undefined;
    finalAOCFollowUpLetter: DtpProgramConfigDocumentTemplateDto | undefined;
    orderRequestSVL: DtpProgramConfigDocumentTemplateDto | undefined;
    aocSvl: DtpProgramConfigDocumentTemplateDto | undefined;
    orderDor: DtpProgramConfigDocumentTemplateDto | undefined;
    eAocDor: DtpProgramConfigDocumentTemplateDto | undefined;
}

export class ProgramLogoAttachmentDto implements IProgramLogoAttachmentDto {
    logoId: string | undefined;
    logoAttachmentSource: string | undefined;
    logoDescription: string | undefined;
    fileName: string | undefined;
    fileLocation: string | undefined;
    fileSource: string | undefined;

    constructor(data?: IProgramLogoAttachmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.logoId = _data["logoId"];
            this.logoAttachmentSource = _data["logoAttachmentSource"];
            this.logoDescription = _data["logoDescription"];
            this.fileName = _data["fileName"];
            this.fileLocation = _data["fileLocation"];
            this.fileSource = _data["fileSource"];
        }
    }

    static fromJS(data: any): ProgramLogoAttachmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramLogoAttachmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logoId"] = this.logoId;
        data["logoAttachmentSource"] = this.logoAttachmentSource;
        data["logoDescription"] = this.logoDescription;
        data["fileName"] = this.fileName;
        data["fileLocation"] = this.fileLocation;
        data["fileSource"] = this.fileSource;
        return data; 
    }

    clone(): ProgramLogoAttachmentDto {
        const json = this.toJSON();
        let result = new ProgramLogoAttachmentDto();
        result.init(json);
        return result;
    }
}

export interface IProgramLogoAttachmentDto {
    logoId: string | undefined;
    logoAttachmentSource: string | undefined;
    logoDescription: string | undefined;
    fileName: string | undefined;
    fileLocation: string | undefined;
    fileSource: string | undefined;
}

export class SimpleDocumentTemplateDto implements ISimpleDocumentTemplateDto {
    documentTemplateId: string | undefined;
    templateTypeClassificationValue: string | undefined;
    documentTemplateName: string | undefined;
    documentTemplateDescription: string | undefined;
    standardFlag: boolean | undefined;

    constructor(data?: ISimpleDocumentTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentTemplateId = _data["documentTemplateId"];
            this.templateTypeClassificationValue = _data["templateTypeClassificationValue"];
            this.documentTemplateName = _data["documentTemplateName"];
            this.documentTemplateDescription = _data["documentTemplateDescription"];
            this.standardFlag = _data["standardFlag"];
        }
    }

    static fromJS(data: any): SimpleDocumentTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleDocumentTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTemplateId"] = this.documentTemplateId;
        data["templateTypeClassificationValue"] = this.templateTypeClassificationValue;
        data["documentTemplateName"] = this.documentTemplateName;
        data["documentTemplateDescription"] = this.documentTemplateDescription;
        data["standardFlag"] = this.standardFlag;
        return data; 
    }

    clone(): SimpleDocumentTemplateDto {
        const json = this.toJSON();
        let result = new SimpleDocumentTemplateDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleDocumentTemplateDto {
    documentTemplateId: string | undefined;
    templateTypeClassificationValue: string | undefined;
    documentTemplateName: string | undefined;
    documentTemplateDescription: string | undefined;
    standardFlag: boolean | undefined;
}

export class DtpProgramConfigSrfTemplateDto implements IDtpProgramConfigSrfTemplateDto {
    dtpProgramConfigurationId: string | undefined;
    templateTypeClassificationValueId: string | undefined;
    documentTemplateId: string | undefined;
    paperSourceNbr: number | undefined;
    ocrCode: string | undefined;
    templateId: string | undefined;
    maxProductsPerSrf: number | undefined;
    mergeFieldFlag: boolean | undefined;
    dtpProgramConfigSrf: DtpProgramConfigSrfDto | undefined;
    srfTemplateAttachments: DtpProgramConfigAttachmentDto[] | undefined;
    orderableProducts: DtpProgramConfigurationProductDto[] | undefined;
    id: string | undefined;

    constructor(data?: IDtpProgramConfigSrfTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.templateTypeClassificationValueId = _data["templateTypeClassificationValueId"];
            this.documentTemplateId = _data["documentTemplateId"];
            this.paperSourceNbr = _data["paperSourceNbr"];
            this.ocrCode = _data["ocrCode"];
            this.templateId = _data["templateId"];
            this.maxProductsPerSrf = _data["maxProductsPerSrf"];
            this.mergeFieldFlag = _data["mergeFieldFlag"];
            this.dtpProgramConfigSrf = _data["dtpProgramConfigSrf"] ? DtpProgramConfigSrfDto.fromJS(_data["dtpProgramConfigSrf"]) : <any>undefined;
            if (Array.isArray(_data["srfTemplateAttachments"])) {
                this.srfTemplateAttachments = [] as any;
                for (let item of _data["srfTemplateAttachments"])
                    this.srfTemplateAttachments.push(DtpProgramConfigAttachmentDto.fromJS(item));
            }
            if (Array.isArray(_data["orderableProducts"])) {
                this.orderableProducts = [] as any;
                for (let item of _data["orderableProducts"])
                    this.orderableProducts.push(DtpProgramConfigurationProductDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtpProgramConfigSrfTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigSrfTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["templateTypeClassificationValueId"] = this.templateTypeClassificationValueId;
        data["documentTemplateId"] = this.documentTemplateId;
        data["paperSourceNbr"] = this.paperSourceNbr;
        data["ocrCode"] = this.ocrCode;
        data["templateId"] = this.templateId;
        data["maxProductsPerSrf"] = this.maxProductsPerSrf;
        data["mergeFieldFlag"] = this.mergeFieldFlag;
        data["dtpProgramConfigSrf"] = this.dtpProgramConfigSrf ? this.dtpProgramConfigSrf.toJSON() : <any>undefined;
        if (Array.isArray(this.srfTemplateAttachments)) {
            data["srfTemplateAttachments"] = [];
            for (let item of this.srfTemplateAttachments)
                data["srfTemplateAttachments"].push(item.toJSON());
        }
        if (Array.isArray(this.orderableProducts)) {
            data["orderableProducts"] = [];
            for (let item of this.orderableProducts)
                data["orderableProducts"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): DtpProgramConfigSrfTemplateDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigSrfTemplateDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigSrfTemplateDto {
    dtpProgramConfigurationId: string | undefined;
    templateTypeClassificationValueId: string | undefined;
    documentTemplateId: string | undefined;
    paperSourceNbr: number | undefined;
    ocrCode: string | undefined;
    templateId: string | undefined;
    maxProductsPerSrf: number | undefined;
    mergeFieldFlag: boolean | undefined;
    dtpProgramConfigSrf: DtpProgramConfigSrfDto | undefined;
    srfTemplateAttachments: DtpProgramConfigAttachmentDto[] | undefined;
    orderableProducts: DtpProgramConfigurationProductDto[] | undefined;
    id: string | undefined;
}

export class DtpProgramConfigDocumentTemplateDto implements IDtpProgramConfigDocumentTemplateDto {
    dtpProgramConfigurationId: string | undefined;
    templateTypeClassificationValueId: string | undefined;
    documentTemplateId: string | undefined;
    ocrCode: string | undefined;
    templateIdText: string | undefined;
    electronicTemplateIdText: string | undefined;
    mscTemplateIdText: string | undefined;
    paperTemplateIdText: string | undefined;
    previewTemplateTypeId: string | undefined;
    puertoRicoFlag: boolean | undefined;
    mergeFieldFlag: boolean | undefined;
    id: string | undefined;

    constructor(data?: IDtpProgramConfigDocumentTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.templateTypeClassificationValueId = _data["templateTypeClassificationValueId"];
            this.documentTemplateId = _data["documentTemplateId"];
            this.ocrCode = _data["ocrCode"];
            this.templateIdText = _data["templateIdText"];
            this.electronicTemplateIdText = _data["electronicTemplateIdText"];
            this.mscTemplateIdText = _data["mscTemplateIdText"];
            this.paperTemplateIdText = _data["paperTemplateIdText"];
            this.previewTemplateTypeId = _data["previewTemplateTypeId"];
            this.puertoRicoFlag = _data["puertoRicoFlag"];
            this.mergeFieldFlag = _data["mergeFieldFlag"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtpProgramConfigDocumentTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigDocumentTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["templateTypeClassificationValueId"] = this.templateTypeClassificationValueId;
        data["documentTemplateId"] = this.documentTemplateId;
        data["ocrCode"] = this.ocrCode;
        data["templateIdText"] = this.templateIdText;
        data["electronicTemplateIdText"] = this.electronicTemplateIdText;
        data["mscTemplateIdText"] = this.mscTemplateIdText;
        data["paperTemplateIdText"] = this.paperTemplateIdText;
        data["previewTemplateTypeId"] = this.previewTemplateTypeId;
        data["puertoRicoFlag"] = this.puertoRicoFlag;
        data["mergeFieldFlag"] = this.mergeFieldFlag;
        data["id"] = this.id;
        return data; 
    }

    clone(): DtpProgramConfigDocumentTemplateDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigDocumentTemplateDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigDocumentTemplateDto {
    dtpProgramConfigurationId: string | undefined;
    templateTypeClassificationValueId: string | undefined;
    documentTemplateId: string | undefined;
    ocrCode: string | undefined;
    templateIdText: string | undefined;
    electronicTemplateIdText: string | undefined;
    mscTemplateIdText: string | undefined;
    paperTemplateIdText: string | undefined;
    previewTemplateTypeId: string | undefined;
    puertoRicoFlag: boolean | undefined;
    mergeFieldFlag: boolean | undefined;
    id: string | undefined;
}

export class AjaxResponseOfPageValidationOfProgramLetterDto implements IAjaxResponseOfPageValidationOfProgramLetterDto {
    result: PageValidationOfProgramLetterDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramLetterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramLetterDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramLetterDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramLetterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramLetterDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramLetterDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramLetterDto {
    result: PageValidationOfProgramLetterDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramLetterDto implements IPageValidationOfProgramLetterDto {
    dataDto: ProgramLetterDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramLetterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramLetterDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramLetterDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramLetterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramLetterDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramLetterDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramLetterDto {
    dataDto: ProgramLetterDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramLetterDto implements IProgramLetterDto {
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    printEmailAddress: string | undefined;
    atLeastOneSodProduct: boolean | undefined;
    atLeastOneOrderSource: boolean | undefined;
    atLeastOneLetterTemplate: boolean | undefined;
    sodProductList: ProductDto[] | undefined;
    letterTemplates: DtpProgramConfigLetterTemplateDto[] | undefined;

    constructor(data?: IProgramLetterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.printEmailAddress = _data["printEmailAddress"];
            this.atLeastOneSodProduct = _data["atLeastOneSodProduct"];
            this.atLeastOneOrderSource = _data["atLeastOneOrderSource"];
            this.atLeastOneLetterTemplate = _data["atLeastOneLetterTemplate"];
            if (Array.isArray(_data["sodProductList"])) {
                this.sodProductList = [] as any;
                for (let item of _data["sodProductList"])
                    this.sodProductList.push(ProductDto.fromJS(item));
            }
            if (Array.isArray(_data["letterTemplates"])) {
                this.letterTemplates = [] as any;
                for (let item of _data["letterTemplates"])
                    this.letterTemplates.push(DtpProgramConfigLetterTemplateDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProgramLetterDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramLetterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["printEmailAddress"] = this.printEmailAddress;
        data["atLeastOneSodProduct"] = this.atLeastOneSodProduct;
        data["atLeastOneOrderSource"] = this.atLeastOneOrderSource;
        data["atLeastOneLetterTemplate"] = this.atLeastOneLetterTemplate;
        if (Array.isArray(this.sodProductList)) {
            data["sodProductList"] = [];
            for (let item of this.sodProductList)
                data["sodProductList"].push(item.toJSON());
        }
        if (Array.isArray(this.letterTemplates)) {
            data["letterTemplates"] = [];
            for (let item of this.letterTemplates)
                data["letterTemplates"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProgramLetterDto {
        const json = this.toJSON();
        let result = new ProgramLetterDto();
        result.init(json);
        return result;
    }
}

export interface IProgramLetterDto {
    programId: string | undefined;
    dtpProgramConfigurationId: string | undefined;
    printEmailAddress: string | undefined;
    atLeastOneSodProduct: boolean | undefined;
    atLeastOneOrderSource: boolean | undefined;
    atLeastOneLetterTemplate: boolean | undefined;
    sodProductList: ProductDto[] | undefined;
    letterTemplates: DtpProgramConfigLetterTemplateDto[] | undefined;
}

export class ProductDto implements IProductDto {
    productCode: string | undefined;
    productName: string | undefined;
    id: string | undefined;

    constructor(data?: IProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["id"] = this.id;
        return data; 
    }

    clone(): ProductDto {
        const json = this.toJSON();
        let result = new ProductDto();
        result.init(json);
        return result;
    }
}

export interface IProductDto {
    productCode: string | undefined;
    productName: string | undefined;
    id: string | undefined;
}

export class DtpProgramConfigLetterTemplateDto implements IDtpProgramConfigLetterTemplateDto {
    dtpProgramConfigurationId: string | undefined;
    templateTypeClassificationValueId: string | undefined;
    returnToStockProduct: string | undefined;
    templateId: string | undefined;
    cellSheetId: string | undefined;
    cellSheetPrintInstructionsText: string | undefined;
    cellSheetOperationsInstructionsText: string | undefined;
    sodAutoIncludeList: DtpProgramConfigLetterTemplateAutoIncludeDto[] | undefined;
    id: string | undefined;

    constructor(data?: IDtpProgramConfigLetterTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.templateTypeClassificationValueId = _data["templateTypeClassificationValueId"];
            this.returnToStockProduct = _data["returnToStockProduct"];
            this.templateId = _data["templateId"];
            this.cellSheetId = _data["cellSheetId"];
            this.cellSheetPrintInstructionsText = _data["cellSheetPrintInstructionsText"];
            this.cellSheetOperationsInstructionsText = _data["cellSheetOperationsInstructionsText"];
            if (Array.isArray(_data["sodAutoIncludeList"])) {
                this.sodAutoIncludeList = [] as any;
                for (let item of _data["sodAutoIncludeList"])
                    this.sodAutoIncludeList.push(DtpProgramConfigLetterTemplateAutoIncludeDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtpProgramConfigLetterTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigLetterTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["templateTypeClassificationValueId"] = this.templateTypeClassificationValueId;
        data["returnToStockProduct"] = this.returnToStockProduct;
        data["templateId"] = this.templateId;
        data["cellSheetId"] = this.cellSheetId;
        data["cellSheetPrintInstructionsText"] = this.cellSheetPrintInstructionsText;
        data["cellSheetOperationsInstructionsText"] = this.cellSheetOperationsInstructionsText;
        if (Array.isArray(this.sodAutoIncludeList)) {
            data["sodAutoIncludeList"] = [];
            for (let item of this.sodAutoIncludeList)
                data["sodAutoIncludeList"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): DtpProgramConfigLetterTemplateDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigLetterTemplateDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigLetterTemplateDto {
    dtpProgramConfigurationId: string | undefined;
    templateTypeClassificationValueId: string | undefined;
    returnToStockProduct: string | undefined;
    templateId: string | undefined;
    cellSheetId: string | undefined;
    cellSheetPrintInstructionsText: string | undefined;
    cellSheetOperationsInstructionsText: string | undefined;
    sodAutoIncludeList: DtpProgramConfigLetterTemplateAutoIncludeDto[] | undefined;
    id: string | undefined;
}

export class DtpProgramConfigLetterTemplateAutoIncludeDto implements IDtpProgramConfigLetterTemplateAutoIncludeDto {
    dtpProgramConfigurationLetterTemplateTypeId: string | undefined;
    autoIncludeProductId: string | undefined;
    autoIncludeProductQty: number | undefined;
    autoIncludeRequiredFlag: boolean | undefined;
    ruleNumber: number | undefined;
    id: string | undefined;

    constructor(data?: IDtpProgramConfigLetterTemplateAutoIncludeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationLetterTemplateTypeId = _data["dtpProgramConfigurationLetterTemplateTypeId"];
            this.autoIncludeProductId = _data["autoIncludeProductId"];
            this.autoIncludeProductQty = _data["autoIncludeProductQty"];
            this.autoIncludeRequiredFlag = _data["autoIncludeRequiredFlag"];
            this.ruleNumber = _data["ruleNumber"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtpProgramConfigLetterTemplateAutoIncludeDto {
        data = typeof data === 'object' ? data : {};
        let result = new DtpProgramConfigLetterTemplateAutoIncludeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationLetterTemplateTypeId"] = this.dtpProgramConfigurationLetterTemplateTypeId;
        data["autoIncludeProductId"] = this.autoIncludeProductId;
        data["autoIncludeProductQty"] = this.autoIncludeProductQty;
        data["autoIncludeRequiredFlag"] = this.autoIncludeRequiredFlag;
        data["ruleNumber"] = this.ruleNumber;
        data["id"] = this.id;
        return data; 
    }

    clone(): DtpProgramConfigLetterTemplateAutoIncludeDto {
        const json = this.toJSON();
        let result = new DtpProgramConfigLetterTemplateAutoIncludeDto();
        result.init(json);
        return result;
    }
}

export interface IDtpProgramConfigLetterTemplateAutoIncludeDto {
    dtpProgramConfigurationLetterTemplateTypeId: string | undefined;
    autoIncludeProductId: string | undefined;
    autoIncludeProductQty: number | undefined;
    autoIncludeRequiredFlag: boolean | undefined;
    ruleNumber: number | undefined;
    id: string | undefined;
}

export class ProgramActivationDto implements IProgramActivationDto {
    dtpProgramConfigurationId: string | undefined;
    isScheduled: boolean | undefined;
    creatorUserId: number | undefined;
    activationDate: Date | undefined;
    id: string | undefined;

    constructor(data?: IProgramActivationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.isScheduled = _data["isScheduled"];
            this.creatorUserId = _data["creatorUserId"];
            this.activationDate = _data["activationDate"] ? new Date(_data["activationDate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProgramActivationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramActivationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["isScheduled"] = this.isScheduled;
        data["creatorUserId"] = this.creatorUserId;
        data["activationDate"] = this.activationDate ? this.activationDate.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): ProgramActivationDto {
        const json = this.toJSON();
        let result = new ProgramActivationDto();
        result.init(json);
        return result;
    }
}

export interface IProgramActivationDto {
    dtpProgramConfigurationId: string | undefined;
    isScheduled: boolean | undefined;
    creatorUserId: number | undefined;
    activationDate: Date | undefined;
    id: string | undefined;
}

export class ProgramShutdownDetailsDto implements IProgramShutdownDetailsDto {
    programId: string | undefined;
    shutdownStartDate: Date | undefined;
    shutdownPeriodDays: number | undefined;

    constructor(data?: IProgramShutdownDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.shutdownStartDate = _data["shutdownStartDate"] ? new Date(_data["shutdownStartDate"].toString()) : <any>undefined;
            this.shutdownPeriodDays = _data["shutdownPeriodDays"];
        }
    }

    static fromJS(data: any): ProgramShutdownDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramShutdownDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["shutdownStartDate"] = this.shutdownStartDate ? this.shutdownStartDate.toISOString() : <any>undefined;
        data["shutdownPeriodDays"] = this.shutdownPeriodDays;
        return data; 
    }

    clone(): ProgramShutdownDetailsDto {
        const json = this.toJSON();
        let result = new ProgramShutdownDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IProgramShutdownDetailsDto {
    programId: string | undefined;
    shutdownStartDate: Date | undefined;
    shutdownPeriodDays: number | undefined;
}

export class AjaxResponseOfPageValidationOfProgramCommunicationsDto implements IAjaxResponseOfPageValidationOfProgramCommunicationsDto {
    result: PageValidationOfProgramCommunicationsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfProgramCommunicationsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfProgramCommunicationsDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfProgramCommunicationsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfProgramCommunicationsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfProgramCommunicationsDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfProgramCommunicationsDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfProgramCommunicationsDto {
    result: PageValidationOfProgramCommunicationsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfProgramCommunicationsDto implements IPageValidationOfProgramCommunicationsDto {
    dataDto: ProgramCommunicationsDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfProgramCommunicationsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? ProgramCommunicationsDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfProgramCommunicationsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfProgramCommunicationsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfProgramCommunicationsDto {
        const json = this.toJSON();
        let result = new PageValidationOfProgramCommunicationsDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfProgramCommunicationsDto {
    dataDto: ProgramCommunicationsDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class ProgramCommunicationsDto implements IProgramCommunicationsDto {
    dtpProgramConfigurationId: string | undefined;
    processableFlag: boolean | undefined;
    isRepDriven: boolean | undefined;
    isInstitution: boolean | undefined;
    hcpCommunicationEmail: boolean | undefined;
    hcpCommunicationFax: boolean | undefined;
    hcpCommunicationMail: boolean | undefined;
    repCommunicationEmail: boolean | undefined;
    repCommunicationFax: boolean | undefined;
    repCommunicationMail: boolean | undefined;
    hasBeenModified: boolean | undefined;
    blackoutHoldsEmail: boolean | undefined;
    blackoutHoldsFax: boolean | undefined;
    orderVerificationHoldsEmail: boolean | undefined;
    orderVerificationHoldsFax: boolean | undefined;
    orderReceivedHasSalesRep: boolean | undefined;
    orderVerificationHoldHasSalesRep: boolean | undefined;
    blackoutHoldHasOrderRequestor: boolean | undefined;
    blackoutHoldHasOrderRecipient: boolean | undefined;
    blackoutHoldHasSalesRep: boolean | undefined;
    orderShippedHasOrderRequestor: boolean | undefined;
    orderShippedHasOrderRecipient: boolean | undefined;
    orderShippedHasSalesRep: boolean | undefined;
    followUpAocEmailHasSalesRep: boolean | undefined;
    programOrderCommunicationTypes: ProgramOrderCommunicationTypeDto[] | undefined;
    programNotificationTypes: ProgramNotificationTypeDto[] | undefined;

    constructor(data?: IProgramCommunicationsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dtpProgramConfigurationId = _data["dtpProgramConfigurationId"];
            this.processableFlag = _data["processableFlag"];
            this.isRepDriven = _data["isRepDriven"];
            this.isInstitution = _data["isInstitution"];
            this.hcpCommunicationEmail = _data["hcpCommunicationEmail"];
            this.hcpCommunicationFax = _data["hcpCommunicationFax"];
            this.hcpCommunicationMail = _data["hcpCommunicationMail"];
            this.repCommunicationEmail = _data["repCommunicationEmail"];
            this.repCommunicationFax = _data["repCommunicationFax"];
            this.repCommunicationMail = _data["repCommunicationMail"];
            this.hasBeenModified = _data["hasBeenModified"];
            this.blackoutHoldsEmail = _data["blackoutHoldsEmail"];
            this.blackoutHoldsFax = _data["blackoutHoldsFax"];
            this.orderVerificationHoldsEmail = _data["orderVerificationHoldsEmail"];
            this.orderVerificationHoldsFax = _data["orderVerificationHoldsFax"];
            this.orderReceivedHasSalesRep = _data["orderReceivedHasSalesRep"];
            this.orderVerificationHoldHasSalesRep = _data["orderVerificationHoldHasSalesRep"];
            this.blackoutHoldHasOrderRequestor = _data["blackoutHoldHasOrderRequestor"];
            this.blackoutHoldHasOrderRecipient = _data["blackoutHoldHasOrderRecipient"];
            this.blackoutHoldHasSalesRep = _data["blackoutHoldHasSalesRep"];
            this.orderShippedHasOrderRequestor = _data["orderShippedHasOrderRequestor"];
            this.orderShippedHasOrderRecipient = _data["orderShippedHasOrderRecipient"];
            this.orderShippedHasSalesRep = _data["orderShippedHasSalesRep"];
            this.followUpAocEmailHasSalesRep = _data["followUpAocEmailHasSalesRep"];
            if (Array.isArray(_data["programOrderCommunicationTypes"])) {
                this.programOrderCommunicationTypes = [] as any;
                for (let item of _data["programOrderCommunicationTypes"])
                    this.programOrderCommunicationTypes.push(ProgramOrderCommunicationTypeDto.fromJS(item));
            }
            if (Array.isArray(_data["programNotificationTypes"])) {
                this.programNotificationTypes = [] as any;
                for (let item of _data["programNotificationTypes"])
                    this.programNotificationTypes.push(ProgramNotificationTypeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProgramCommunicationsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramCommunicationsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dtpProgramConfigurationId"] = this.dtpProgramConfigurationId;
        data["processableFlag"] = this.processableFlag;
        data["isRepDriven"] = this.isRepDriven;
        data["isInstitution"] = this.isInstitution;
        data["hcpCommunicationEmail"] = this.hcpCommunicationEmail;
        data["hcpCommunicationFax"] = this.hcpCommunicationFax;
        data["hcpCommunicationMail"] = this.hcpCommunicationMail;
        data["repCommunicationEmail"] = this.repCommunicationEmail;
        data["repCommunicationFax"] = this.repCommunicationFax;
        data["repCommunicationMail"] = this.repCommunicationMail;
        data["hasBeenModified"] = this.hasBeenModified;
        data["blackoutHoldsEmail"] = this.blackoutHoldsEmail;
        data["blackoutHoldsFax"] = this.blackoutHoldsFax;
        data["orderVerificationHoldsEmail"] = this.orderVerificationHoldsEmail;
        data["orderVerificationHoldsFax"] = this.orderVerificationHoldsFax;
        data["orderReceivedHasSalesRep"] = this.orderReceivedHasSalesRep;
        data["orderVerificationHoldHasSalesRep"] = this.orderVerificationHoldHasSalesRep;
        data["blackoutHoldHasOrderRequestor"] = this.blackoutHoldHasOrderRequestor;
        data["blackoutHoldHasOrderRecipient"] = this.blackoutHoldHasOrderRecipient;
        data["blackoutHoldHasSalesRep"] = this.blackoutHoldHasSalesRep;
        data["orderShippedHasOrderRequestor"] = this.orderShippedHasOrderRequestor;
        data["orderShippedHasOrderRecipient"] = this.orderShippedHasOrderRecipient;
        data["orderShippedHasSalesRep"] = this.orderShippedHasSalesRep;
        data["followUpAocEmailHasSalesRep"] = this.followUpAocEmailHasSalesRep;
        if (Array.isArray(this.programOrderCommunicationTypes)) {
            data["programOrderCommunicationTypes"] = [];
            for (let item of this.programOrderCommunicationTypes)
                data["programOrderCommunicationTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.programNotificationTypes)) {
            data["programNotificationTypes"] = [];
            for (let item of this.programNotificationTypes)
                data["programNotificationTypes"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProgramCommunicationsDto {
        const json = this.toJSON();
        let result = new ProgramCommunicationsDto();
        result.init(json);
        return result;
    }
}

export interface IProgramCommunicationsDto {
    dtpProgramConfigurationId: string | undefined;
    processableFlag: boolean | undefined;
    isRepDriven: boolean | undefined;
    isInstitution: boolean | undefined;
    hcpCommunicationEmail: boolean | undefined;
    hcpCommunicationFax: boolean | undefined;
    hcpCommunicationMail: boolean | undefined;
    repCommunicationEmail: boolean | undefined;
    repCommunicationFax: boolean | undefined;
    repCommunicationMail: boolean | undefined;
    hasBeenModified: boolean | undefined;
    blackoutHoldsEmail: boolean | undefined;
    blackoutHoldsFax: boolean | undefined;
    orderVerificationHoldsEmail: boolean | undefined;
    orderVerificationHoldsFax: boolean | undefined;
    orderReceivedHasSalesRep: boolean | undefined;
    orderVerificationHoldHasSalesRep: boolean | undefined;
    blackoutHoldHasOrderRequestor: boolean | undefined;
    blackoutHoldHasOrderRecipient: boolean | undefined;
    blackoutHoldHasSalesRep: boolean | undefined;
    orderShippedHasOrderRequestor: boolean | undefined;
    orderShippedHasOrderRecipient: boolean | undefined;
    orderShippedHasSalesRep: boolean | undefined;
    followUpAocEmailHasSalesRep: boolean | undefined;
    programOrderCommunicationTypes: ProgramOrderCommunicationTypeDto[] | undefined;
    programNotificationTypes: ProgramNotificationTypeDto[] | undefined;
}

export class ProgramOrderCommunicationTypeDto implements IProgramOrderCommunicationTypeDto {
    id: string | undefined;
    orderCommunicationType: string | undefined;
    directionOfCommunication: string | undefined;
    recipientSender: string | undefined;

    constructor(data?: IProgramOrderCommunicationTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderCommunicationType = _data["orderCommunicationType"];
            this.directionOfCommunication = _data["directionOfCommunication"];
            this.recipientSender = _data["recipientSender"];
        }
    }

    static fromJS(data: any): ProgramOrderCommunicationTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramOrderCommunicationTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderCommunicationType"] = this.orderCommunicationType;
        data["directionOfCommunication"] = this.directionOfCommunication;
        data["recipientSender"] = this.recipientSender;
        return data; 
    }

    clone(): ProgramOrderCommunicationTypeDto {
        const json = this.toJSON();
        let result = new ProgramOrderCommunicationTypeDto();
        result.init(json);
        return result;
    }
}

export interface IProgramOrderCommunicationTypeDto {
    id: string | undefined;
    orderCommunicationType: string | undefined;
    directionOfCommunication: string | undefined;
    recipientSender: string | undefined;
}

export class ProgramNotificationTypeDto implements IProgramNotificationTypeDto {
    id: string | undefined;
    notificationType: string | undefined;
    recipients: string | undefined;

    constructor(data?: IProgramNotificationTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.notificationType = _data["notificationType"];
            this.recipients = _data["recipients"];
        }
    }

    static fromJS(data: any): ProgramNotificationTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramNotificationTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["notificationType"] = this.notificationType;
        data["recipients"] = this.recipients;
        return data; 
    }

    clone(): ProgramNotificationTypeDto {
        const json = this.toJSON();
        let result = new ProgramNotificationTypeDto();
        result.init(json);
        return result;
    }
}

export interface IProgramNotificationTypeDto {
    id: string | undefined;
    notificationType: string | undefined;
    recipients: string | undefined;
}

export class AjaxResponseOfString implements IAjaxResponseOfString {
    result: string | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfString {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfString {
        const json = this.toJSON();
        let result = new AjaxResponseOfString();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfString {
    result: string | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfPreviewTemplateDto implements IAjaxResponseOfPreviewTemplateDto {
    result: PreviewTemplateDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPreviewTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PreviewTemplateDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPreviewTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPreviewTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPreviewTemplateDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPreviewTemplateDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPreviewTemplateDto {
    result: PreviewTemplateDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PreviewTemplateDto implements IPreviewTemplateDto {
    previewUrl: string | undefined;
    isConfigurationSaved: boolean | undefined;
    hasPrintReasons: boolean | undefined;

    constructor(data?: IPreviewTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.previewUrl = _data["previewUrl"];
            this.isConfigurationSaved = _data["isConfigurationSaved"];
            this.hasPrintReasons = _data["hasPrintReasons"];
        }
    }

    static fromJS(data: any): PreviewTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new PreviewTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["previewUrl"] = this.previewUrl;
        data["isConfigurationSaved"] = this.isConfigurationSaved;
        data["hasPrintReasons"] = this.hasPrintReasons;
        return data; 
    }

    clone(): PreviewTemplateDto {
        const json = this.toJSON();
        let result = new PreviewTemplateDto();
        result.init(json);
        return result;
    }
}

export interface IPreviewTemplateDto {
    previewUrl: string | undefined;
    isConfigurationSaved: boolean | undefined;
    hasPrintReasons: boolean | undefined;
}

export enum LocalizedValueLanguage {
    _0 = 0,
    _1 = 1,
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
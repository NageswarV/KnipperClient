/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.5.0.0 (NJsonSchema v10.1.15.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const TENANT_API_BASE_URL = new InjectionToken<string>('TENANT_API_BASE_URL');

export class ServiceBaseConfig {
  public key: string;
}

export class ServiceBase {
  private readonly apiKey: string;
  private readonly apimHeaderName: string = 'Ocp-Apim-Subscription-Key';
  private readonly tenantIdHeaderName: string = 'TenantId';
  private readonly tenantIdLocalStorageKey: string = 'samplicity-dtp-current-client';
  private readonly idTokenKey: string = 'samplicity-id-token';

  constructor(config: ServiceBaseConfig) {
    this.apiKey = config.key;
  }

  protected transformOptions(options: any) {
    let headers: HttpHeaders = options.headers;

    if (this.apiKey) {
      headers = headers.append(this.apimHeaderName, this.apiKey);
    }

    const tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
    if (tenantId) {
      headers = headers.append(this.tenantIdHeaderName, tenantId);
    }

    const token = localStorage.getItem(this.idTokenKey);
    if (token) {
      headers = headers.append('Authorization', 'Bearer ' + token);
    }

    options.headers = headers;

    return Promise.resolve(options);
  }
}

@Injectable()
export class Tenant extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(ServiceBaseConfig) configuration: ServiceBaseConfig, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(TENANT_API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param tenantId (optional) 
     * @return Success
     */
    getTenantInfoById(tenantId: number | null | undefined): Observable<AjaxResponseOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantInfoById?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetTenantInfoById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantInfoById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantInfoById(response: HttpResponseBase): Observable<AjaxResponseOfTenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTenantDto>(<any>null);
    }

    /**
     * @param tenantId (optional) 
     * @return Success
     */
    getTenantById(tenantId: number | null | undefined): Observable<AjaxResponseOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantById?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetTenantById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantById(response: HttpResponseBase): Observable<AjaxResponseOfTenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTenantDto>(<any>null);
    }

    /**
     * @param url (optional) 
     * @return Success
     */
    getTenantByUrl(url: string | null | undefined): Observable<AjaxResponseOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantByUrl?";
        if (url !== undefined && url !== null)
            url_ += "url=" + encodeURIComponent("" + url) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetTenantByUrl(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantByUrl(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantByUrl(response: HttpResponseBase): Observable<AjaxResponseOfTenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTenantDto>(<any>null);
    }

    /**
     * @param name (optional) 
     * @return Success
     */
    getTenantByName(name: string | null | undefined): Observable<AjaxResponseOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantByName?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetTenantByName(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantByName(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantByName(response: HttpResponseBase): Observable<AjaxResponseOfTenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTenantDto>(<any>null);
    }

    /**
     * @param daxId (optional) 
     * @return Success
     */
    getTenantByDaxId(daxId: string | null | undefined): Observable<AjaxResponseOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantByDaxId?";
        if (daxId !== undefined && daxId !== null)
            url_ += "daxId=" + encodeURIComponent("" + daxId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetTenantByDaxId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantByDaxId(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantByDaxId(response: HttpResponseBase): Observable<AjaxResponseOfTenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTenantDto>(<any>null);
    }

    /**
     * @param abbreviation (optional) 
     * @return Success
     */
    getTenantByAbbreviation(abbreviation: string | null | undefined): Observable<AjaxResponseOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantByAbbreviation?";
        if (abbreviation !== undefined && abbreviation !== null)
            url_ += "abbreviation=" + encodeURIComponent("" + abbreviation) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetTenantByAbbreviation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantByAbbreviation(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantByAbbreviation(response: HttpResponseBase): Observable<AjaxResponseOfTenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTenantDto>(<any>null);
    }

    /**
     * @param includeActiveOnly (optional) 
     * @return Success
     */
    getActiveSimpleTenants(includeActiveOnly: boolean | null | undefined): Observable<AjaxResponseOfIReadOnlyListOfSimpleTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetActiveSimpleTenants?";
        if (includeActiveOnly !== undefined && includeActiveOnly !== null)
            url_ += "includeActiveOnly=" + encodeURIComponent("" + includeActiveOnly) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetActiveSimpleTenants(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActiveSimpleTenants(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIReadOnlyListOfSimpleTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIReadOnlyListOfSimpleTenantDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActiveSimpleTenants(response: HttpResponseBase): Observable<AjaxResponseOfIReadOnlyListOfSimpleTenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIReadOnlyListOfSimpleTenantDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIReadOnlyListOfSimpleTenantDto>(<any>null);
    }

    /**
     * @param tenantIdCollection (optional) 
     * @param getAllTenants (optional) 
     * @return Success
     */
    getSimpleTenants(tenantIdCollection: number[] | null | undefined, getAllTenants: boolean | null | undefined): Observable<AjaxResponseOfIReadOnlyListOfSimpleTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetSimpleTenants?";
        if (tenantIdCollection !== undefined && tenantIdCollection !== null)
            tenantIdCollection && tenantIdCollection.forEach(item => { url_ += "tenantIdCollection=" + encodeURIComponent("" + item) + "&"; });
        if (getAllTenants !== undefined && getAllTenants !== null)
            url_ += "getAllTenants=" + encodeURIComponent("" + getAllTenants) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetSimpleTenants(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSimpleTenants(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIReadOnlyListOfSimpleTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIReadOnlyListOfSimpleTenantDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSimpleTenants(response: HttpResponseBase): Observable<AjaxResponseOfIReadOnlyListOfSimpleTenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIReadOnlyListOfSimpleTenantDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIReadOnlyListOfSimpleTenantDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchTenants(filter: TenantSearchInputDto | null | undefined): Observable<AjaxResponseOfPagedResultOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/SearchTenants";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchTenants(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchTenants(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPagedResultOfTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPagedResultOfTenantDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchTenants(response: HttpResponseBase): Observable<AjaxResponseOfPagedResultOfTenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPagedResultOfTenantDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPagedResultOfTenantDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchPmsClients(filter: PmsClientSearchInputDto | null | undefined): Observable<AjaxResponseOfIListOfPmsClientDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/SearchPmsClients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchPmsClients(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchPmsClients(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfPmsClientDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfPmsClientDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchPmsClients(response: HttpResponseBase): Observable<AjaxResponseOfIListOfPmsClientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfPmsClientDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfPmsClientDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    validatePmsClient(filter: PmsClientSearchInputDto | null | undefined): Observable<AjaxResponseOfValidatedPmsClientDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/ValidatePmsClient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processValidatePmsClient(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processValidatePmsClient(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfValidatedPmsClientDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfValidatedPmsClientDto>><any>Observable.throw(response_);
        });
    }

    protected processValidatePmsClient(response: HttpResponseBase): Observable<AjaxResponseOfValidatedPmsClientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfValidatedPmsClientDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfValidatedPmsClientDto>(<any>null);
    }

    /**
     * @param prefix (optional) 
     * @return Success
     */
    checkTenantPrefixExists(prefix: string | null | undefined): Observable<AjaxResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/CheckTenantPrefixExists?";
        if (prefix !== undefined && prefix !== null)
            url_ += "prefix=" + encodeURIComponent("" + prefix) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processCheckTenantPrefixExists(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckTenantPrefixExists(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(response_);
        });
    }

    protected processCheckTenantPrefixExists(response: HttpResponseBase): Observable<AjaxResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfBoolean.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfBoolean>(<any>null);
    }

    /**
     * @param tenantDto (optional) 
     * @return Success
     */
    createTenant(tenantDto: TenantDto | null | undefined): Observable<AjaxResponse> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/CreateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(tenantDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processCreateTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateTenant(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponse>><any>Observable.throw(response_);
        });
    }

    protected processCreateTenant(response: HttpResponseBase): Observable<AjaxResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponse.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponse>(<any>null);
    }

    /**
     * @param tenantId (optional) 
     * @return Success
     */
    getTenantDetails(tenantId: number | null | undefined): Observable<AjaxResponseOfTenantDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantDetails?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetTenantDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantDetails(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTenantDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTenantDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantDetails(response: HttpResponseBase): Observable<AjaxResponseOfTenantDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTenantDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTenantDetailsDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateOrActivateTenant(src: TenantDetailsDto | null | undefined): Observable<AjaxResponseOfTenantDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateOrActivateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateOrActivateTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrActivateTenant(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTenantDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTenantDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrActivateTenant(response: HttpResponseBase): Observable<AjaxResponseOfTenantDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTenantDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTenantDetailsDto>(<any>null);
    }

    /**
     * @param tenantId (optional) 
     * @return Success
     */
    refreshTenantData(tenantId: number | null | undefined): Observable<AjaxResponseOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/RefreshTenantData?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processRefreshTenantData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefreshTenantData(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTenantDto>><any>Observable.throw(response_);
        });
    }

    protected processRefreshTenantData(response: HttpResponseBase): Observable<AjaxResponseOfTenantDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTenantDto>(<any>null);
    }

    /**
     * @param tenantId (optional) 
     * @return Success
     */
    deactivateTenantForDtp(tenantId: number | null | undefined): Observable<AjaxResponseOfTenantDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/DeactivateTenantForDtp?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processDeactivateTenantForDtp(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeactivateTenantForDtp(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTenantDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTenantDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processDeactivateTenantForDtp(response: HttpResponseBase): Observable<AjaxResponseOfTenantDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTenantDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTenantDetailsDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getTenantAttachmentById(id: string | null | undefined): Observable<AjaxResponseOfTenantAttachmentDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantAttachment/GetTenantAttachmentById?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetTenantAttachmentById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantAttachmentById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTenantAttachmentDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTenantAttachmentDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantAttachmentById(response: HttpResponseBase): Observable<AjaxResponseOfTenantAttachmentDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTenantAttachmentDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTenantAttachmentDto>(<any>null);
    }

    /**
     * @param tenantIntId (optional) 
     * @param tenantId (optional) 
     * @param attachmentName (optional) 
     * @param attachmentLocation (optional) 
     * @param commentsText (optional) 
     * @param attachmentDesc (optional) 
     * @param tenantAttachmentTypeClassificationValueId (optional) 
     * @param rowVersion (optional) 
     * @param isDeleted (optional) 
     * @param deleterUserId (optional) 
     * @param deletionTime (optional) 
     * @param lastModificationTime (optional) 
     * @param lastModifierUserId (optional) 
     * @param creationTime (optional) 
     * @param creatorUserId (optional) 
     * @param id (optional) 
     * @param blobDeletionFlag (optional) 
     * @return Success
     */
    deleteTenantAttachment(tenantIntId: number | null | undefined, tenantId: string | null | undefined, attachmentName: string | null | undefined, attachmentLocation: string | null | undefined, commentsText: string | null | undefined, attachmentDesc: string | null | undefined, tenantAttachmentTypeClassificationValueId: string | null | undefined, rowVersion: string | null | undefined, isDeleted: boolean | null | undefined, deleterUserId: number | null | undefined, deletionTime: Date | null | undefined, lastModificationTime: Date | null | undefined, lastModifierUserId: number | null | undefined, creationTime: Date | null | undefined, creatorUserId: number | null | undefined, id: string | null | undefined, blobDeletionFlag: boolean | null | undefined): Observable<AjaxResponse> {
        let url_ = this.baseUrl + "/api/services/app/TenantAttachment/DeleteTenantAttachment?";
        if (tenantIntId !== undefined && tenantIntId !== null)
            url_ += "tenantIntId=" + encodeURIComponent("" + tenantIntId) + "&";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&";
        if (attachmentName !== undefined && attachmentName !== null)
            url_ += "AttachmentName=" + encodeURIComponent("" + attachmentName) + "&";
        if (attachmentLocation !== undefined && attachmentLocation !== null)
            url_ += "AttachmentLocation=" + encodeURIComponent("" + attachmentLocation) + "&";
        if (commentsText !== undefined && commentsText !== null)
            url_ += "CommentsText=" + encodeURIComponent("" + commentsText) + "&";
        if (attachmentDesc !== undefined && attachmentDesc !== null)
            url_ += "AttachmentDesc=" + encodeURIComponent("" + attachmentDesc) + "&";
        if (tenantAttachmentTypeClassificationValueId !== undefined && tenantAttachmentTypeClassificationValueId !== null)
            url_ += "TenantAttachmentTypeClassificationValueId=" + encodeURIComponent("" + tenantAttachmentTypeClassificationValueId) + "&";
        if (rowVersion !== undefined && rowVersion !== null)
            url_ += "RowVersion=" + encodeURIComponent("" + rowVersion) + "&";
        if (isDeleted !== undefined && isDeleted !== null)
            url_ += "IsDeleted=" + encodeURIComponent("" + isDeleted) + "&";
        if (deleterUserId !== undefined && deleterUserId !== null)
            url_ += "DeleterUserId=" + encodeURIComponent("" + deleterUserId) + "&";
        if (deletionTime !== undefined && deletionTime !== null)
            url_ += "DeletionTime=" + encodeURIComponent(deletionTime ? "" + deletionTime.toJSON() : "") + "&";
        if (lastModificationTime !== undefined && lastModificationTime !== null)
            url_ += "LastModificationTime=" + encodeURIComponent(lastModificationTime ? "" + lastModificationTime.toJSON() : "") + "&";
        if (lastModifierUserId !== undefined && lastModifierUserId !== null)
            url_ += "LastModifierUserId=" + encodeURIComponent("" + lastModifierUserId) + "&";
        if (creationTime !== undefined && creationTime !== null)
            url_ += "CreationTime=" + encodeURIComponent(creationTime ? "" + creationTime.toJSON() : "") + "&";
        if (creatorUserId !== undefined && creatorUserId !== null)
            url_ += "CreatorUserId=" + encodeURIComponent("" + creatorUserId) + "&";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (blobDeletionFlag !== undefined && blobDeletionFlag !== null)
            url_ += "blobDeletionFlag=" + encodeURIComponent("" + blobDeletionFlag) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processDeleteTenantAttachment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTenantAttachment(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponse>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTenantAttachment(response: HttpResponseBase): Observable<AjaxResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponse.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponse>(<any>null);
    }

    /**
     * @param tenantIntId (optional) 
     * @param tenantAttachmentDto (optional) 
     * @return Success
     */
    createTenantLogoAttachment(tenantIntId: number | null | undefined, tenantAttachmentDto: TenantAttachmentDto | null | undefined): Observable<AjaxResponse> {
        let url_ = this.baseUrl + "/api/services/app/TenantAttachment/CreateTenantLogoAttachment?";
        if (tenantIntId !== undefined && tenantIntId !== null)
            url_ += "tenantIntId=" + encodeURIComponent("" + tenantIntId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(tenantAttachmentDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processCreateTenantLogoAttachment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateTenantLogoAttachment(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponse>><any>Observable.throw(response_);
        });
    }

    protected processCreateTenantLogoAttachment(response: HttpResponseBase): Observable<AjaxResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponse.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponse>(<any>null);
    }
}

export class AjaxResponseOfTenantDto implements IAjaxResponseOfTenantDto {
    result: TenantDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? TenantDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfTenantDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfTenantDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfTenantDto {
    result: TenantDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class TenantDto implements ITenantDto {
    tenantId: number | undefined;
    name: string | undefined;
    tenancyName: string | undefined;
    daxId: string | undefined;
    blobStorageContainerName: string | undefined;
    connectionString: string | undefined;
    isActive: boolean | undefined;
    statusClassificationValueId: string | undefined;
    prefix: string | undefined;
    creationTime: Date | undefined;
    tenantModules: TenantModuleDto[] | undefined;
    tenantSettings: TenantSettingDto[] | undefined;
    tenantAttachments: TenantSimpleAttachmentDto[] | undefined;
    id: string | undefined;

    constructor(data?: ITenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.tenancyName = _data["tenancyName"];
            this.daxId = _data["daxId"];
            this.blobStorageContainerName = _data["blobStorageContainerName"];
            this.connectionString = _data["connectionString"];
            this.isActive = _data["isActive"];
            this.statusClassificationValueId = _data["statusClassificationValueId"];
            this.prefix = _data["prefix"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["tenantModules"])) {
                this.tenantModules = [] as any;
                for (let item of _data["tenantModules"])
                    this.tenantModules.push(TenantModuleDto.fromJS(item));
            }
            if (Array.isArray(_data["tenantSettings"])) {
                this.tenantSettings = [] as any;
                for (let item of _data["tenantSettings"])
                    this.tenantSettings.push(TenantSettingDto.fromJS(item));
            }
            if (Array.isArray(_data["tenantAttachments"])) {
                this.tenantAttachments = [] as any;
                for (let item of _data["tenantAttachments"])
                    this.tenantAttachments.push(TenantSimpleAttachmentDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["tenancyName"] = this.tenancyName;
        data["daxId"] = this.daxId;
        data["blobStorageContainerName"] = this.blobStorageContainerName;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["statusClassificationValueId"] = this.statusClassificationValueId;
        data["prefix"] = this.prefix;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        if (Array.isArray(this.tenantModules)) {
            data["tenantModules"] = [];
            for (let item of this.tenantModules)
                data["tenantModules"].push(item.toJSON());
        }
        if (Array.isArray(this.tenantSettings)) {
            data["tenantSettings"] = [];
            for (let item of this.tenantSettings)
                data["tenantSettings"].push(item.toJSON());
        }
        if (Array.isArray(this.tenantAttachments)) {
            data["tenantAttachments"] = [];
            for (let item of this.tenantAttachments)
                data["tenantAttachments"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): TenantDto {
        const json = this.toJSON();
        let result = new TenantDto();
        result.init(json);
        return result;
    }
}

export interface ITenantDto {
    tenantId: number | undefined;
    name: string | undefined;
    tenancyName: string | undefined;
    daxId: string | undefined;
    blobStorageContainerName: string | undefined;
    connectionString: string | undefined;
    isActive: boolean | undefined;
    statusClassificationValueId: string | undefined;
    prefix: string | undefined;
    creationTime: Date | undefined;
    tenantModules: TenantModuleDto[] | undefined;
    tenantSettings: TenantSettingDto[] | undefined;
    tenantAttachments: TenantSimpleAttachmentDto[] | undefined;
    id: string | undefined;
}

export class ErrorInfo implements IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;

    constructor(data?: IErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            this.details = _data["details"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors.push(ValidationErrorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ErrorInfo {
        const json = this.toJSON();
        let result = new ErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;
}

export class TenantModuleDto implements ITenantModuleDto {
    moduleId: string | undefined;
    tenantModuleStatusClassificationValueId: string | undefined;
    tenantModuleUrlText: string | undefined;
    slnValidationSourceClassificationValueId: string | undefined;
    clientPriorityTierClassificationValueId: string | undefined;
    hcpUniverseProvidedFlag: boolean | undefined;
    id: string | undefined;

    constructor(data?: ITenantModuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.moduleId = _data["moduleId"];
            this.tenantModuleStatusClassificationValueId = _data["tenantModuleStatusClassificationValueId"];
            this.tenantModuleUrlText = _data["tenantModuleUrlText"];
            this.slnValidationSourceClassificationValueId = _data["slnValidationSourceClassificationValueId"];
            this.clientPriorityTierClassificationValueId = _data["clientPriorityTierClassificationValueId"];
            this.hcpUniverseProvidedFlag = _data["hcpUniverseProvidedFlag"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TenantModuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantModuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["moduleId"] = this.moduleId;
        data["tenantModuleStatusClassificationValueId"] = this.tenantModuleStatusClassificationValueId;
        data["tenantModuleUrlText"] = this.tenantModuleUrlText;
        data["slnValidationSourceClassificationValueId"] = this.slnValidationSourceClassificationValueId;
        data["clientPriorityTierClassificationValueId"] = this.clientPriorityTierClassificationValueId;
        data["hcpUniverseProvidedFlag"] = this.hcpUniverseProvidedFlag;
        data["id"] = this.id;
        return data; 
    }

    clone(): TenantModuleDto {
        const json = this.toJSON();
        let result = new TenantModuleDto();
        result.init(json);
        return result;
    }
}

export interface ITenantModuleDto {
    moduleId: string | undefined;
    tenantModuleStatusClassificationValueId: string | undefined;
    tenantModuleUrlText: string | undefined;
    slnValidationSourceClassificationValueId: string | undefined;
    clientPriorityTierClassificationValueId: string | undefined;
    hcpUniverseProvidedFlag: boolean | undefined;
    id: string | undefined;
}

export class TenantSettingDto implements ITenantSettingDto {
    key: string | undefined;
    value: string | undefined;
    description: string | undefined;
    id: string | undefined;

    constructor(data?: ITenantSettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
            this.description = _data["description"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TenantSettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        data["description"] = this.description;
        data["id"] = this.id;
        return data; 
    }

    clone(): TenantSettingDto {
        const json = this.toJSON();
        let result = new TenantSettingDto();
        result.init(json);
        return result;
    }
}

export interface ITenantSettingDto {
    key: string | undefined;
    value: string | undefined;
    description: string | undefined;
    id: string | undefined;
}

export class TenantSimpleAttachmentDto implements ITenantSimpleAttachmentDto {
    tenantId: string | undefined;
    attachmentTypeClassificationValue: string | undefined;
    location: string | undefined;
    comments: string | undefined;
    fileName: string | undefined;
    fileDescription: string | undefined;
    id: string | undefined;

    constructor(data?: ITenantSimpleAttachmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.attachmentTypeClassificationValue = _data["attachmentTypeClassificationValue"];
            this.location = _data["location"];
            this.comments = _data["comments"];
            this.fileName = _data["fileName"];
            this.fileDescription = _data["fileDescription"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TenantSimpleAttachmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantSimpleAttachmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["attachmentTypeClassificationValue"] = this.attachmentTypeClassificationValue;
        data["location"] = this.location;
        data["comments"] = this.comments;
        data["fileName"] = this.fileName;
        data["fileDescription"] = this.fileDescription;
        data["id"] = this.id;
        return data; 
    }

    clone(): TenantSimpleAttachmentDto {
        const json = this.toJSON();
        let result = new TenantSimpleAttachmentDto();
        result.init(json);
        return result;
    }
}

export interface ITenantSimpleAttachmentDto {
    tenantId: string | undefined;
    attachmentTypeClassificationValue: string | undefined;
    location: string | undefined;
    comments: string | undefined;
    fileName: string | undefined;
    fileDescription: string | undefined;
    id: string | undefined;
}

export class ValidationErrorInfo implements IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;

    constructor(data?: IValidationErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members.push(item);
            }
        }
    }

    static fromJS(data: any): ValidationErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }

    clone(): ValidationErrorInfo {
        const json = this.toJSON();
        let result = new ValidationErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;
}

export class AjaxResponseOfIReadOnlyListOfSimpleTenantDto implements IAjaxResponseOfIReadOnlyListOfSimpleTenantDto {
    result: SimpleTenantDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIReadOnlyListOfSimpleTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(SimpleTenantDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIReadOnlyListOfSimpleTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIReadOnlyListOfSimpleTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIReadOnlyListOfSimpleTenantDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIReadOnlyListOfSimpleTenantDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIReadOnlyListOfSimpleTenantDto {
    result: SimpleTenantDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class SimpleTenantDto implements ISimpleTenantDto {
    id: string | undefined;
    tenantId: number | undefined;
    name: string | undefined;
    daxId: string | undefined;
    prefix: string | undefined;
    moduleStatus: string | undefined;

    constructor(data?: ISimpleTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.daxId = _data["daxId"];
            this.prefix = _data["prefix"];
            this.moduleStatus = _data["moduleStatus"];
        }
    }

    static fromJS(data: any): SimpleTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["daxId"] = this.daxId;
        data["prefix"] = this.prefix;
        data["moduleStatus"] = this.moduleStatus;
        return data; 
    }

    clone(): SimpleTenantDto {
        const json = this.toJSON();
        let result = new SimpleTenantDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleTenantDto {
    id: string | undefined;
    tenantId: number | undefined;
    name: string | undefined;
    daxId: string | undefined;
    prefix: string | undefined;
    moduleStatus: string | undefined;
}

export class TenantSearchInputDto implements ITenantSearchInputDto {
    clientNameFilterText: string | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: ITenantSearchInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientNameFilterText = _data["clientNameFilterText"];
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): TenantSearchInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantSearchInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientNameFilterText"] = this.clientNameFilterText;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): TenantSearchInputDto {
        const json = this.toJSON();
        let result = new TenantSearchInputDto();
        result.init(json);
        return result;
    }
}

export interface ITenantSearchInputDto {
    clientNameFilterText: string | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPagedResultOfTenantDto implements IAjaxResponseOfPagedResultOfTenantDto {
    result: PagedResultOfTenantDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPagedResultOfTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfTenantDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultOfTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultOfTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPagedResultOfTenantDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPagedResultOfTenantDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPagedResultOfTenantDto {
    result: PagedResultOfTenantDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PagedResultOfTenantDto implements IPagedResultOfTenantDto {
    totalCount: number | undefined;
    items: TenantDto[] | undefined;

    constructor(data?: IPagedResultOfTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(TenantDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultOfTenantDto {
        const json = this.toJSON();
        let result = new PagedResultOfTenantDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultOfTenantDto {
    totalCount: number | undefined;
    items: TenantDto[] | undefined;
}

export class PmsClientSearchInputDto implements IPmsClientSearchInputDto {
    pmsClientId: string | undefined;
    pmsClientName: string | undefined;

    constructor(data?: IPmsClientSearchInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pmsClientId = _data["pmsClientId"];
            this.pmsClientName = _data["pmsClientName"];
        }
    }

    static fromJS(data: any): PmsClientSearchInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PmsClientSearchInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pmsClientId"] = this.pmsClientId;
        data["pmsClientName"] = this.pmsClientName;
        return data; 
    }

    clone(): PmsClientSearchInputDto {
        const json = this.toJSON();
        let result = new PmsClientSearchInputDto();
        result.init(json);
        return result;
    }
}

export interface IPmsClientSearchInputDto {
    pmsClientId: string | undefined;
    pmsClientName: string | undefined;
}

export class AjaxResponseOfIListOfPmsClientDto implements IAjaxResponseOfIListOfPmsClientDto {
    result: PmsClientDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfPmsClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(PmsClientDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfPmsClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfPmsClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfPmsClientDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfPmsClientDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfPmsClientDto {
    result: PmsClientDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PmsClientDto implements IPmsClientDto {
    tenantId: number | undefined;
    pmsClientId: string | undefined;
    pmsClientName: string | undefined;
    prefix: string | undefined;

    constructor(data?: IPmsClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.pmsClientId = _data["pmsClientId"];
            this.pmsClientName = _data["pmsClientName"];
            this.prefix = _data["prefix"];
        }
    }

    static fromJS(data: any): PmsClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new PmsClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["pmsClientId"] = this.pmsClientId;
        data["pmsClientName"] = this.pmsClientName;
        data["prefix"] = this.prefix;
        return data; 
    }

    clone(): PmsClientDto {
        const json = this.toJSON();
        let result = new PmsClientDto();
        result.init(json);
        return result;
    }
}

export interface IPmsClientDto {
    tenantId: number | undefined;
    pmsClientId: string | undefined;
    pmsClientName: string | undefined;
    prefix: string | undefined;
}

export class AjaxResponseOfValidatedPmsClientDto implements IAjaxResponseOfValidatedPmsClientDto {
    result: ValidatedPmsClientDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfValidatedPmsClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ValidatedPmsClientDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfValidatedPmsClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfValidatedPmsClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfValidatedPmsClientDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfValidatedPmsClientDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfValidatedPmsClientDto {
    result: ValidatedPmsClientDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ValidatedPmsClientDto implements IValidatedPmsClientDto {
    axaptaDaxIsValid: boolean | undefined;
    axaptaDaxClientId: string | undefined;
    axaptaDaxClientName: string | undefined;
    axaptaDaxClientNotFound: boolean | undefined;
    wmsIsValid: boolean | undefined;
    wmsClientId: string | undefined;
    wmsClientName: string | undefined;
    wmsClientNotFound: boolean | undefined;
    tenantId: number | undefined;
    pmsClientId: string | undefined;
    pmsClientName: string | undefined;
    prefix: string | undefined;

    constructor(data?: IValidatedPmsClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.axaptaDaxIsValid = _data["axaptaDaxIsValid"];
            this.axaptaDaxClientId = _data["axaptaDaxClientId"];
            this.axaptaDaxClientName = _data["axaptaDaxClientName"];
            this.axaptaDaxClientNotFound = _data["axaptaDaxClientNotFound"];
            this.wmsIsValid = _data["wmsIsValid"];
            this.wmsClientId = _data["wmsClientId"];
            this.wmsClientName = _data["wmsClientName"];
            this.wmsClientNotFound = _data["wmsClientNotFound"];
            this.tenantId = _data["tenantId"];
            this.pmsClientId = _data["pmsClientId"];
            this.pmsClientName = _data["pmsClientName"];
            this.prefix = _data["prefix"];
        }
    }

    static fromJS(data: any): ValidatedPmsClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new ValidatedPmsClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["axaptaDaxIsValid"] = this.axaptaDaxIsValid;
        data["axaptaDaxClientId"] = this.axaptaDaxClientId;
        data["axaptaDaxClientName"] = this.axaptaDaxClientName;
        data["axaptaDaxClientNotFound"] = this.axaptaDaxClientNotFound;
        data["wmsIsValid"] = this.wmsIsValid;
        data["wmsClientId"] = this.wmsClientId;
        data["wmsClientName"] = this.wmsClientName;
        data["wmsClientNotFound"] = this.wmsClientNotFound;
        data["tenantId"] = this.tenantId;
        data["pmsClientId"] = this.pmsClientId;
        data["pmsClientName"] = this.pmsClientName;
        data["prefix"] = this.prefix;
        return data; 
    }

    clone(): ValidatedPmsClientDto {
        const json = this.toJSON();
        let result = new ValidatedPmsClientDto();
        result.init(json);
        return result;
    }
}

export interface IValidatedPmsClientDto {
    axaptaDaxIsValid: boolean | undefined;
    axaptaDaxClientId: string | undefined;
    axaptaDaxClientName: string | undefined;
    axaptaDaxClientNotFound: boolean | undefined;
    wmsIsValid: boolean | undefined;
    wmsClientId: string | undefined;
    wmsClientName: string | undefined;
    wmsClientNotFound: boolean | undefined;
    tenantId: number | undefined;
    pmsClientId: string | undefined;
    pmsClientName: string | undefined;
    prefix: string | undefined;
}

export class AjaxResponseOfBoolean implements IAjaxResponseOfBoolean {
    result: boolean | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfBoolean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfBoolean {
        const json = this.toJSON();
        let result = new AjaxResponseOfBoolean();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfBoolean {
    result: boolean | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponse implements IAjaxResponse {
    result: any | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponse {
        const json = this.toJSON();
        let result = new AjaxResponse();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponse {
    result: any | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfTenantDetailsDto implements IAjaxResponseOfTenantDetailsDto {
    result: TenantDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfTenantDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? TenantDetailsDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfTenantDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfTenantDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfTenantDetailsDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfTenantDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfTenantDetailsDto {
    result: TenantDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class TenantDetailsDto implements ITenantDetailsDto {
    id: string | undefined;
    tenantId: number | undefined;
    name: string | undefined;
    daxId: string | undefined;
    slnValidationSource: string | undefined;
    clientPriorityTierClassificationValueId: string | undefined;
    hcpUniverseProvidedFlag: boolean | undefined;
    prefix: string | undefined;
    hcpsUrl: string | undefined;
    doNotHonorExclusionsUrl: string | undefined;
    programsUrl: string | undefined;
    imageUpload: FileUpload | undefined;
    imageDescription: string | undefined;
    logos: TenantAttachmentDto[] | undefined;
    tenantModules: TenantModuleDto[] | undefined;

    constructor(data?: ITenantDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.daxId = _data["daxId"];
            this.slnValidationSource = _data["slnValidationSource"];
            this.clientPriorityTierClassificationValueId = _data["clientPriorityTierClassificationValueId"];
            this.hcpUniverseProvidedFlag = _data["hcpUniverseProvidedFlag"];
            this.prefix = _data["prefix"];
            this.hcpsUrl = _data["hcpsUrl"];
            this.doNotHonorExclusionsUrl = _data["doNotHonorExclusionsUrl"];
            this.programsUrl = _data["programsUrl"];
            this.imageUpload = _data["imageUpload"] ? FileUpload.fromJS(_data["imageUpload"]) : <any>undefined;
            this.imageDescription = _data["imageDescription"];
            if (Array.isArray(_data["logos"])) {
                this.logos = [] as any;
                for (let item of _data["logos"])
                    this.logos.push(TenantAttachmentDto.fromJS(item));
            }
            if (Array.isArray(_data["tenantModules"])) {
                this.tenantModules = [] as any;
                for (let item of _data["tenantModules"])
                    this.tenantModules.push(TenantModuleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TenantDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["daxId"] = this.daxId;
        data["slnValidationSource"] = this.slnValidationSource;
        data["clientPriorityTierClassificationValueId"] = this.clientPriorityTierClassificationValueId;
        data["hcpUniverseProvidedFlag"] = this.hcpUniverseProvidedFlag;
        data["prefix"] = this.prefix;
        data["hcpsUrl"] = this.hcpsUrl;
        data["doNotHonorExclusionsUrl"] = this.doNotHonorExclusionsUrl;
        data["programsUrl"] = this.programsUrl;
        data["imageUpload"] = this.imageUpload ? this.imageUpload.toJSON() : <any>undefined;
        data["imageDescription"] = this.imageDescription;
        if (Array.isArray(this.logos)) {
            data["logos"] = [];
            for (let item of this.logos)
                data["logos"].push(item.toJSON());
        }
        if (Array.isArray(this.tenantModules)) {
            data["tenantModules"] = [];
            for (let item of this.tenantModules)
                data["tenantModules"].push(item.toJSON());
        }
        return data; 
    }

    clone(): TenantDetailsDto {
        const json = this.toJSON();
        let result = new TenantDetailsDto();
        result.init(json);
        return result;
    }
}

export interface ITenantDetailsDto {
    id: string | undefined;
    tenantId: number | undefined;
    name: string | undefined;
    daxId: string | undefined;
    slnValidationSource: string | undefined;
    clientPriorityTierClassificationValueId: string | undefined;
    hcpUniverseProvidedFlag: boolean | undefined;
    prefix: string | undefined;
    hcpsUrl: string | undefined;
    doNotHonorExclusionsUrl: string | undefined;
    programsUrl: string | undefined;
    imageUpload: FileUpload | undefined;
    imageDescription: string | undefined;
    logos: TenantAttachmentDto[] | undefined;
    tenantModules: TenantModuleDto[] | undefined;
}

export class FileUpload implements IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    duplicateFileName: boolean | undefined;

    constructor(data?: IFileUpload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileDescription = _data["fileDescription"];
            this.fileType = _data["fileType"];
            this.base64FileContent = _data["base64FileContent"];
            this.location = _data["location"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.newFlag = _data["newFlag"];
            this.duplicateFileName = _data["duplicateFileName"];
        }
    }

    static fromJS(data: any): FileUpload {
        data = typeof data === 'object' ? data : {};
        let result = new FileUpload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileDescription"] = this.fileDescription;
        data["fileType"] = this.fileType;
        data["base64FileContent"] = this.base64FileContent;
        data["location"] = this.location;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["newFlag"] = this.newFlag;
        data["duplicateFileName"] = this.duplicateFileName;
        return data; 
    }

    clone(): FileUpload {
        const json = this.toJSON();
        let result = new FileUpload();
        result.init(json);
        return result;
    }
}

export interface IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    duplicateFileName: boolean | undefined;
}

export class TenantAttachmentDto implements ITenantAttachmentDto {
    tenantId: string | undefined;
    attachmentTypeClassificationValue: string | undefined;
    location: string | undefined;
    comments: string | undefined;
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    base64FileContent: string | undefined;
    creationTime: Date | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ITenantAttachmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.attachmentTypeClassificationValue = _data["attachmentTypeClassificationValue"];
            this.location = _data["location"];
            this.comments = _data["comments"];
            this.fileName = _data["fileName"];
            this.fileDescription = _data["fileDescription"];
            this.fileType = _data["fileType"];
            this.creatorUserId = _data["creatorUserId"];
            this.newFlag = _data["newFlag"];
            this.base64FileContent = _data["base64FileContent"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TenantAttachmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantAttachmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["attachmentTypeClassificationValue"] = this.attachmentTypeClassificationValue;
        data["location"] = this.location;
        data["comments"] = this.comments;
        data["fileName"] = this.fileName;
        data["fileDescription"] = this.fileDescription;
        data["fileType"] = this.fileType;
        data["creatorUserId"] = this.creatorUserId;
        data["newFlag"] = this.newFlag;
        data["base64FileContent"] = this.base64FileContent;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TenantAttachmentDto {
        const json = this.toJSON();
        let result = new TenantAttachmentDto();
        result.init(json);
        return result;
    }
}

export interface ITenantAttachmentDto {
    tenantId: string | undefined;
    attachmentTypeClassificationValue: string | undefined;
    location: string | undefined;
    comments: string | undefined;
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    base64FileContent: string | undefined;
    creationTime: Date | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    id: string | undefined;
}

export class AjaxResponseOfTenantAttachmentDto implements IAjaxResponseOfTenantAttachmentDto {
    result: TenantAttachmentDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfTenantAttachmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? TenantAttachmentDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfTenantAttachmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfTenantAttachmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfTenantAttachmentDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfTenantAttachmentDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfTenantAttachmentDto {
    result: TenantAttachmentDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.2.0 (NJsonSchema v10.1.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const OM_PRODUCT_API_BASE_URL = new InjectionToken<string>('OM_PRODUCT_API_BASE_URL');

export class ServiceBaseConfig {
  public key: string;
}

export class ServiceBase {
  private readonly apiKey: string;
  private readonly apimHeaderName: string = 'Ocp-Apim-Subscription-Key';
  private readonly tenantIdHeaderName: string = 'TenantId';
  private readonly tenantIdLocalStorageKey: string = 'samplicity-dtp-current-client';
  private readonly idTokenKey: string = 'samplicity-id-token';

  constructor(config: ServiceBaseConfig) {
    this.apiKey = config.key;
  }

  protected transformOptions(options: any) {
    let headers: HttpHeaders = options.headers;

    if (this.apiKey) {
      headers = headers.append(this.apimHeaderName, this.apiKey);
    }

    const tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
    if (tenantId) {
      headers = headers.append(this.tenantIdHeaderName, tenantId);
    }

    const token = localStorage.getItem(this.idTokenKey);
    if (token) {
      headers = headers.append('Authorization', 'Bearer ' + token);
    }

    options.headers = headers;

    return Promise.resolve(options);
  }
}

@Injectable()
export class OrderManagementProduct extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(ServiceBaseConfig) configuration: ServiceBaseConfig, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(OM_PRODUCT_API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getProduct(id: string | null | undefined): Observable<ProductDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProduct?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProduct(<any>response_);
                } catch (e) {
                    return <Observable<ProductDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ProductDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProduct(response: HttpResponseBase): Observable<ProductDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<ProductDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getProductById(id: string | null | undefined): Observable<AjaxResponseOfProductDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProductById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProductById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductById(response: HttpResponseBase): Observable<AjaxResponseOfProductDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProductDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProductDetailsDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchProducts(filter: ExistingProductSearchFilterDto | null | undefined): Observable<AjaxResponseOfPagedResultOfExistingProductSearchDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/SearchProducts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchProducts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchProducts(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPagedResultOfExistingProductSearchDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPagedResultOfExistingProductSearchDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchProducts(response: HttpResponseBase): Observable<AjaxResponseOfPagedResultOfExistingProductSearchDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPagedResultOfExistingProductSearchDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPagedResultOfExistingProductSearchDto>(<any>null);
    }

    /**
     * @param productId (optional) 
     * @return Success
     */
    getProductActivePrograms(productId: string | null | undefined): Observable<AjaxResponseOfIListOfProductActiveProgramDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProductActivePrograms?";
        if (productId !== undefined)
            url_ += "productId=" + encodeURIComponent("" + productId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProductActivePrograms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductActivePrograms(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfProductActiveProgramDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfProductActiveProgramDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductActivePrograms(response: HttpResponseBase): Observable<AjaxResponseOfIListOfProductActiveProgramDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfProductActiveProgramDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfProductActiveProgramDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchNewProducts(filter: NewProductSearchFilterDto | null | undefined): Observable<AjaxResponseOfPagedResultOfWmsProductSummaryDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/SearchNewProducts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchNewProducts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchNewProducts(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPagedResultOfWmsProductSummaryDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPagedResultOfWmsProductSummaryDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchNewProducts(response: HttpResponseBase): Observable<AjaxResponseOfPagedResultOfWmsProductSummaryDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPagedResultOfWmsProductSummaryDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPagedResultOfWmsProductSummaryDto>(<any>null);
    }

    /**
     * @param wmsProductId (optional) 
     * @return Success
     */
    getNewProductDetails(wmsProductId: string | null | undefined): Observable<AjaxResponseOfProductDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetNewProductDetails?";
        if (wmsProductId !== undefined)
            url_ += "wmsProductId=" + encodeURIComponent("" + wmsProductId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetNewProductDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNewProductDetails(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetNewProductDetails(response: HttpResponseBase): Observable<AjaxResponseOfProductDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProductDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProductDetailsDto>(<any>null);
    }

    /**
     * @return Success
     */
    getSimpleProducts(): Observable<AjaxResponseOfListOfSimpleProductDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetSimpleProducts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetSimpleProducts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSimpleProducts(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSimpleProductDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSimpleProductDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSimpleProducts(response: HttpResponseBase): Observable<AjaxResponseOfListOfSimpleProductDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSimpleProductDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSimpleProductDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    createProduct(dto: ProductDetailsDto | null | undefined): Observable<AjaxResponseOfProductDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/CreateProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processCreateProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateProduct(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateProduct(response: HttpResponseBase): Observable<AjaxResponseOfProductDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProductDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProductDetailsDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    updateProduct(dto: ProductDetailsDto | null | undefined): Observable<AjaxResponseOfProductDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/UpdateProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProduct(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProduct(response: HttpResponseBase): Observable<AjaxResponseOfProductDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProductDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProductDetailsDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    refreshFromWms(dto: ProductDetailsDto | null | undefined): Observable<AjaxResponseOfProductDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/RefreshFromWms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processRefreshFromWms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefreshFromWms(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processRefreshFromWms(response: HttpResponseBase): Observable<AjaxResponseOfProductDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProductDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProductDetailsDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    validateRefreshedProduct(dto: ProductDetailsDto | null | undefined): Observable<AjaxResponseOfProductDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/ValidateRefreshedProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processValidateRefreshedProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processValidateRefreshedProduct(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProductDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processValidateRefreshedProduct(response: HttpResponseBase): Observable<AjaxResponseOfProductDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProductDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProductDetailsDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    searchProductsForDraftProgram(dto: ProgramProductSearchFilterDto | null | undefined): Observable<AjaxResponseOfIListOfProgramProductSearchDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/SearchProductsForDraftProgram";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchProductsForDraftProgram(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchProductsForDraftProgram(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfProgramProductSearchDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfProgramProductSearchDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchProductsForDraftProgram(response: HttpResponseBase): Observable<AjaxResponseOfIListOfProgramProductSearchDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfProgramProductSearchDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfProgramProductSearchDto>(<any>null);
    }

    /**
     * @param brandId (optional) 
     * @return Success
     */
    getProductsByBrandId(brandId: string | null | undefined): Observable<AjaxResponseOfListOfBrandProductDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProductsByBrandId?";
        if (brandId !== undefined)
            url_ += "brandId=" + encodeURIComponent("" + brandId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProductsByBrandId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductsByBrandId(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfBrandProductDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfBrandProductDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductsByBrandId(response: HttpResponseBase): Observable<AjaxResponseOfListOfBrandProductDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfBrandProductDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfBrandProductDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getProductGroupById(id: string | null | undefined): Observable<AjaxResponseOfProductGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetProductGroupById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProductGroupById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductGroupById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProductGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProductGroupDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductGroupById(response: HttpResponseBase): Observable<AjaxResponseOfProductGroupDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProductGroupDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProductGroupDto>(<any>null);
    }

    /**
     * @return Success
     */
    getNewProductGroup(): Observable<AjaxResponseOfProductGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetNewProductGroup";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetNewProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNewProductGroup(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProductGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProductGroupDto>><any>Observable.throw(response_);
        });
    }

    protected processGetNewProductGroup(response: HttpResponseBase): Observable<AjaxResponseOfProductGroupDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProductGroupDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProductGroupDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchProductGroups(filter: ProductGroupSearchFilterDto | null | undefined): Observable<AjaxResponseOfPagedResultOfProductGroupSearchDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/SearchProductGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchProductGroups(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchProductGroups(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPagedResultOfProductGroupSearchDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPagedResultOfProductGroupSearchDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchProductGroups(response: HttpResponseBase): Observable<AjaxResponseOfPagedResultOfProductGroupSearchDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPagedResultOfProductGroupSearchDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPagedResultOfProductGroupSearchDto>(<any>null);
    }

    /**
     * @param productGroupDto (optional) 
     * @return Success
     */
    createProductGroup(productGroupDto: ProductGroupDto | null | undefined): Observable<AjaxResponse> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/CreateProductGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(productGroupDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processCreateProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateProductGroup(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponse>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductGroup(response: HttpResponseBase): Observable<AjaxResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponse.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponse>(<any>null);
    }

    /**
     * @param productGroupDto (optional) 
     * @return Success
     */
    updateProductGroup(productGroupDto: ProductGroupDto | null | undefined): Observable<AjaxResponseOfProductGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/UpdateProductGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(productGroupDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProductGroup(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfProductGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfProductGroupDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductGroup(response: HttpResponseBase): Observable<AjaxResponseOfProductGroupDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfProductGroupDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfProductGroupDto>(<any>null);
    }

    /**
     * @param isKnipper (optional) 
     * @return Success
     */
    getProductGroups(isKnipper: boolean | null | undefined): Observable<AjaxResponseOfIListOfProductGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetProductGroups?";
        if (isKnipper !== undefined)
            url_ += "isKnipper=" + encodeURIComponent("" + isKnipper) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetProductGroups(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductGroups(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfProductGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfProductGroupDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductGroups(response: HttpResponseBase): Observable<AjaxResponseOfIListOfProductGroupDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfProductGroupDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfProductGroupDto>(<any>null);
    }

    /**
     * @param isKnipper (optional) 
     * @return Success
     */
    getActiveProductGroups(isKnipper: boolean | null | undefined): Observable<AjaxResponseOfIListOfProductGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetActiveProductGroups?";
        if (isKnipper !== undefined)
            url_ += "isKnipper=" + encodeURIComponent("" + isKnipper) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetActiveProductGroups(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetActiveProductGroups(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfProductGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfProductGroupDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActiveProductGroups(response: HttpResponseBase): Observable<AjaxResponseOfIListOfProductGroupDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfProductGroupDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfProductGroupDto>(<any>null);
    }

    /**
     * @return Success
     */
    getSimpleProductGroups(): Observable<AjaxResponseOfListOfSimpleProductGroupDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetSimpleProductGroups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetSimpleProductGroups(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSimpleProductGroups(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSimpleProductGroupDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSimpleProductGroupDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSimpleProductGroups(response: HttpResponseBase): Observable<AjaxResponseOfListOfSimpleProductGroupDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSimpleProductGroupDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSimpleProductGroupDto>(<any>null);
    }
}

export class ProductDto implements IProductDto {
    productCode: string | undefined;
    productName: string | undefined;
    id: string | undefined;

    constructor(data?: IProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["id"] = this.id;
        return data; 
    }

    clone(): ProductDto {
        const json = this.toJSON();
        let result = new ProductDto();
        result.init(json);
        return result;
    }
}

export interface IProductDto {
    productCode: string | undefined;
    productName: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfProductDetailsDto implements IAjaxResponseOfProductDetailsDto {
    result: ProductDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfProductDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ProductDetailsDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfProductDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfProductDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfProductDetailsDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfProductDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfProductDetailsDto {
    result: ProductDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ProductDetailsDto implements IProductDetailsDto {
    id: string | undefined;
    knipperProductFlag: boolean | undefined;
    wmsProductId: string | undefined;
    productTypeId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    clientName: string | undefined;
    productGroupId: string | undefined;
    distributedBy: string | undefined;
    clientProductName: string | undefined;
    clientProductId: string | undefined;
    genericProductName: string | undefined;
    nationalDrugCode: string | undefined;
    dosageStrength: string | undefined;
    productShortDescription: string | undefined;
    productLongDescription: string | undefined;
    distributionUnitOfMeasure: string | undefined;
    multiplyingFactorNbr: number | undefined;
    displayQtyText: string | undefined;
    productCostAmt: number | undefined;
    deaScheduleName: string | undefined;
    opioidFlag: boolean | undefined;
    antibioticFlag: boolean | undefined;
    hazardousFlag: boolean | undefined;
    temperatureControlledFlag: boolean | undefined;
    orderableFlag: boolean | undefined;
    autoIncludedFlag: boolean | undefined;
    smallOrderDepartmentFlag: boolean | undefined;
    selectDayShippingFlag: boolean | undefined;
    orderSplitFlag: boolean | undefined;
    lotControlledFlag: boolean | undefined;
    serialTrackedFlag: boolean | undefined;
    signatureRequiredFlag: boolean | undefined;
    aocRequiredFlag: boolean | undefined;
    animalHealthFlag: boolean | undefined;
    initialClientName: string | undefined;
    refreshWarningFlag: boolean | undefined;
    refreshConfirmationFlag: boolean | undefined;
    refreshResultType: number | undefined;
    invalidDataErrors: string[] | undefined;
    invalidData: InvalidDataDto[] | undefined;
    missingData: ValidationResult[] | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IProductDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.knipperProductFlag = _data["knipperProductFlag"];
            this.wmsProductId = _data["wmsProductId"];
            this.productTypeId = _data["productTypeId"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
            this.clientName = _data["clientName"];
            this.productGroupId = _data["productGroupId"];
            this.distributedBy = _data["distributedBy"];
            this.clientProductName = _data["clientProductName"];
            this.clientProductId = _data["clientProductId"];
            this.genericProductName = _data["genericProductName"];
            this.nationalDrugCode = _data["nationalDrugCode"];
            this.dosageStrength = _data["dosageStrength"];
            this.productShortDescription = _data["productShortDescription"];
            this.productLongDescription = _data["productLongDescription"];
            this.distributionUnitOfMeasure = _data["distributionUnitOfMeasure"];
            this.multiplyingFactorNbr = _data["multiplyingFactorNbr"];
            this.displayQtyText = _data["displayQtyText"];
            this.productCostAmt = _data["productCostAmt"];
            this.deaScheduleName = _data["deaScheduleName"];
            this.opioidFlag = _data["opioidFlag"];
            this.antibioticFlag = _data["antibioticFlag"];
            this.hazardousFlag = _data["hazardousFlag"];
            this.temperatureControlledFlag = _data["temperatureControlledFlag"];
            this.orderableFlag = _data["orderableFlag"];
            this.autoIncludedFlag = _data["autoIncludedFlag"];
            this.smallOrderDepartmentFlag = _data["smallOrderDepartmentFlag"];
            this.selectDayShippingFlag = _data["selectDayShippingFlag"];
            this.orderSplitFlag = _data["orderSplitFlag"];
            this.lotControlledFlag = _data["lotControlledFlag"];
            this.serialTrackedFlag = _data["serialTrackedFlag"];
            this.signatureRequiredFlag = _data["signatureRequiredFlag"];
            this.aocRequiredFlag = _data["aocRequiredFlag"];
            this.animalHealthFlag = _data["animalHealthFlag"];
            this.initialClientName = _data["initialClientName"];
            this.refreshWarningFlag = _data["refreshWarningFlag"];
            this.refreshConfirmationFlag = _data["refreshConfirmationFlag"];
            this.refreshResultType = _data["refreshResultType"];
            if (Array.isArray(_data["invalidDataErrors"])) {
                this.invalidDataErrors = [] as any;
                for (let item of _data["invalidDataErrors"])
                    this.invalidDataErrors.push(item);
            }
            if (Array.isArray(_data["invalidData"])) {
                this.invalidData = [] as any;
                for (let item of _data["invalidData"])
                    this.invalidData.push(InvalidDataDto.fromJS(item));
            }
            if (Array.isArray(_data["missingData"])) {
                this.missingData = [] as any;
                for (let item of _data["missingData"])
                    this.missingData.push(ValidationResult.fromJS(item));
            }
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["knipperProductFlag"] = this.knipperProductFlag;
        data["wmsProductId"] = this.wmsProductId;
        data["productTypeId"] = this.productTypeId;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        data["clientName"] = this.clientName;
        data["productGroupId"] = this.productGroupId;
        data["distributedBy"] = this.distributedBy;
        data["clientProductName"] = this.clientProductName;
        data["clientProductId"] = this.clientProductId;
        data["genericProductName"] = this.genericProductName;
        data["nationalDrugCode"] = this.nationalDrugCode;
        data["dosageStrength"] = this.dosageStrength;
        data["productShortDescription"] = this.productShortDescription;
        data["productLongDescription"] = this.productLongDescription;
        data["distributionUnitOfMeasure"] = this.distributionUnitOfMeasure;
        data["multiplyingFactorNbr"] = this.multiplyingFactorNbr;
        data["displayQtyText"] = this.displayQtyText;
        data["productCostAmt"] = this.productCostAmt;
        data["deaScheduleName"] = this.deaScheduleName;
        data["opioidFlag"] = this.opioidFlag;
        data["antibioticFlag"] = this.antibioticFlag;
        data["hazardousFlag"] = this.hazardousFlag;
        data["temperatureControlledFlag"] = this.temperatureControlledFlag;
        data["orderableFlag"] = this.orderableFlag;
        data["autoIncludedFlag"] = this.autoIncludedFlag;
        data["smallOrderDepartmentFlag"] = this.smallOrderDepartmentFlag;
        data["selectDayShippingFlag"] = this.selectDayShippingFlag;
        data["orderSplitFlag"] = this.orderSplitFlag;
        data["lotControlledFlag"] = this.lotControlledFlag;
        data["serialTrackedFlag"] = this.serialTrackedFlag;
        data["signatureRequiredFlag"] = this.signatureRequiredFlag;
        data["aocRequiredFlag"] = this.aocRequiredFlag;
        data["animalHealthFlag"] = this.animalHealthFlag;
        data["initialClientName"] = this.initialClientName;
        data["refreshWarningFlag"] = this.refreshWarningFlag;
        data["refreshConfirmationFlag"] = this.refreshConfirmationFlag;
        data["refreshResultType"] = this.refreshResultType;
        if (Array.isArray(this.invalidDataErrors)) {
            data["invalidDataErrors"] = [];
            for (let item of this.invalidDataErrors)
                data["invalidDataErrors"].push(item);
        }
        if (Array.isArray(this.invalidData)) {
            data["invalidData"] = [];
            for (let item of this.invalidData)
                data["invalidData"].push(item.toJSON());
        }
        if (Array.isArray(this.missingData)) {
            data["missingData"] = [];
            for (let item of this.missingData)
                data["missingData"].push(item.toJSON());
        }
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProductDetailsDto {
        const json = this.toJSON();
        let result = new ProductDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IProductDetailsDto {
    id: string | undefined;
    knipperProductFlag: boolean | undefined;
    wmsProductId: string | undefined;
    productTypeId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    clientName: string | undefined;
    productGroupId: string | undefined;
    distributedBy: string | undefined;
    clientProductName: string | undefined;
    clientProductId: string | undefined;
    genericProductName: string | undefined;
    nationalDrugCode: string | undefined;
    dosageStrength: string | undefined;
    productShortDescription: string | undefined;
    productLongDescription: string | undefined;
    distributionUnitOfMeasure: string | undefined;
    multiplyingFactorNbr: number | undefined;
    displayQtyText: string | undefined;
    productCostAmt: number | undefined;
    deaScheduleName: string | undefined;
    opioidFlag: boolean | undefined;
    antibioticFlag: boolean | undefined;
    hazardousFlag: boolean | undefined;
    temperatureControlledFlag: boolean | undefined;
    orderableFlag: boolean | undefined;
    autoIncludedFlag: boolean | undefined;
    smallOrderDepartmentFlag: boolean | undefined;
    selectDayShippingFlag: boolean | undefined;
    orderSplitFlag: boolean | undefined;
    lotControlledFlag: boolean | undefined;
    serialTrackedFlag: boolean | undefined;
    signatureRequiredFlag: boolean | undefined;
    aocRequiredFlag: boolean | undefined;
    animalHealthFlag: boolean | undefined;
    initialClientName: string | undefined;
    refreshWarningFlag: boolean | undefined;
    refreshConfirmationFlag: boolean | undefined;
    refreshResultType: number | undefined;
    invalidDataErrors: string[] | undefined;
    invalidData: InvalidDataDto[] | undefined;
    missingData: ValidationResult[] | undefined;
    names: LocalizedValue[] | undefined;
}

export class ErrorInfo implements IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;

    constructor(data?: IErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            this.details = _data["details"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors.push(ValidationErrorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ErrorInfo {
        const json = this.toJSON();
        let result = new ErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;
}

export class InvalidDataDto implements IInvalidDataDto {
    fieldName: string | undefined;
    value: string | undefined;

    constructor(data?: IInvalidDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fieldName = _data["fieldName"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): InvalidDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldName"] = this.fieldName;
        data["value"] = this.value;
        return data; 
    }

    clone(): InvalidDataDto {
        const json = this.toJSON();
        let result = new InvalidDataDto();
        result.init(json);
        return result;
    }
}

export interface IInvalidDataDto {
    fieldName: string | undefined;
    value: string | undefined;
}

export class ValidationResult implements IValidationResult {
    readonly memberNames: string[] | undefined;
    errorMessage: string | undefined;

    constructor(data?: IValidationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["memberNames"])) {
                (<any>this).memberNames = [] as any;
                for (let item of _data["memberNames"])
                    (<any>this).memberNames.push(item);
            }
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ValidationResult {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.memberNames)) {
            data["memberNames"] = [];
            for (let item of this.memberNames)
                data["memberNames"].push(item);
        }
        data["errorMessage"] = this.errorMessage;
        return data; 
    }

    clone(): ValidationResult {
        const json = this.toJSON();
        let result = new ValidationResult();
        result.init(json);
        return result;
    }
}

export interface IValidationResult {
    memberNames: string[] | undefined;
    errorMessage: string | undefined;
}

export class LocalizedValue implements ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;

    constructor(data?: ILocalizedValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LocalizedValue {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language;
        data["value"] = this.value;
        return data; 
    }

    clone(): LocalizedValue {
        const json = this.toJSON();
        let result = new LocalizedValue();
        result.init(json);
        return result;
    }
}

export interface ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;
}

export class ValidationErrorInfo implements IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;

    constructor(data?: IValidationErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members.push(item);
            }
        }
    }

    static fromJS(data: any): ValidationErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }

    clone(): ValidationErrorInfo {
        const json = this.toJSON();
        let result = new ValidationErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;
}

export class ExistingProductSearchFilterDto implements IExistingProductSearchFilterDto {
    brandName: string | undefined;
    currentStatusClassificationValueIds: string[] | undefined;
    currentProductTypeReferenceIds: string[] | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    isKnipperProductFlags: boolean[] | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: IExistingProductSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brandName = _data["brandName"];
            if (Array.isArray(_data["currentStatusClassificationValueIds"])) {
                this.currentStatusClassificationValueIds = [] as any;
                for (let item of _data["currentStatusClassificationValueIds"])
                    this.currentStatusClassificationValueIds.push(item);
            }
            if (Array.isArray(_data["currentProductTypeReferenceIds"])) {
                this.currentProductTypeReferenceIds = [] as any;
                for (let item of _data["currentProductTypeReferenceIds"])
                    this.currentProductTypeReferenceIds.push(item);
            }
            this.wmsProductName = _data["wmsProductName"];
            this.wmsProductId = _data["wmsProductId"];
            if (Array.isArray(_data["isKnipperProductFlags"])) {
                this.isKnipperProductFlags = [] as any;
                for (let item of _data["isKnipperProductFlags"])
                    this.isKnipperProductFlags.push(item);
            }
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): ExistingProductSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExistingProductSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brandName"] = this.brandName;
        if (Array.isArray(this.currentStatusClassificationValueIds)) {
            data["currentStatusClassificationValueIds"] = [];
            for (let item of this.currentStatusClassificationValueIds)
                data["currentStatusClassificationValueIds"].push(item);
        }
        if (Array.isArray(this.currentProductTypeReferenceIds)) {
            data["currentProductTypeReferenceIds"] = [];
            for (let item of this.currentProductTypeReferenceIds)
                data["currentProductTypeReferenceIds"].push(item);
        }
        data["wmsProductName"] = this.wmsProductName;
        data["wmsProductId"] = this.wmsProductId;
        if (Array.isArray(this.isKnipperProductFlags)) {
            data["isKnipperProductFlags"] = [];
            for (let item of this.isKnipperProductFlags)
                data["isKnipperProductFlags"].push(item);
        }
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): ExistingProductSearchFilterDto {
        const json = this.toJSON();
        let result = new ExistingProductSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface IExistingProductSearchFilterDto {
    brandName: string | undefined;
    currentStatusClassificationValueIds: string[] | undefined;
    currentProductTypeReferenceIds: string[] | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    isKnipperProductFlags: boolean[] | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPagedResultOfExistingProductSearchDto implements IAjaxResponseOfPagedResultOfExistingProductSearchDto {
    result: PagedResultOfExistingProductSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPagedResultOfExistingProductSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfExistingProductSearchDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultOfExistingProductSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultOfExistingProductSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPagedResultOfExistingProductSearchDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPagedResultOfExistingProductSearchDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPagedResultOfExistingProductSearchDto {
    result: PagedResultOfExistingProductSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PagedResultOfExistingProductSearchDto implements IPagedResultOfExistingProductSearchDto {
    totalCount: number | undefined;
    items: ExistingProductSearchDto[] | undefined;

    constructor(data?: IPagedResultOfExistingProductSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ExistingProductSearchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfExistingProductSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfExistingProductSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultOfExistingProductSearchDto {
        const json = this.toJSON();
        let result = new PagedResultOfExistingProductSearchDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultOfExistingProductSearchDto {
    totalCount: number | undefined;
    items: ExistingProductSearchDto[] | undefined;
}

export class ExistingProductSearchDto implements IExistingProductSearchDto {
    id: string | undefined;
    brandName: string | undefined;
    activeProgramsCount: number | undefined;
    currentStatusClassificationValueId: string | undefined;
    productTypeId: string | undefined;
    wmsProductId: string | undefined;
    wmsProductName: string | undefined;
    knipperProductFlag: boolean | undefined;

    constructor(data?: IExistingProductSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.brandName = _data["brandName"];
            this.activeProgramsCount = _data["activeProgramsCount"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
            this.productTypeId = _data["productTypeId"];
            this.wmsProductId = _data["wmsProductId"];
            this.wmsProductName = _data["wmsProductName"];
            this.knipperProductFlag = _data["knipperProductFlag"];
        }
    }

    static fromJS(data: any): ExistingProductSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExistingProductSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["brandName"] = this.brandName;
        data["activeProgramsCount"] = this.activeProgramsCount;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        data["productTypeId"] = this.productTypeId;
        data["wmsProductId"] = this.wmsProductId;
        data["wmsProductName"] = this.wmsProductName;
        data["knipperProductFlag"] = this.knipperProductFlag;
        return data; 
    }

    clone(): ExistingProductSearchDto {
        const json = this.toJSON();
        let result = new ExistingProductSearchDto();
        result.init(json);
        return result;
    }
}

export interface IExistingProductSearchDto {
    id: string | undefined;
    brandName: string | undefined;
    activeProgramsCount: number | undefined;
    currentStatusClassificationValueId: string | undefined;
    productTypeId: string | undefined;
    wmsProductId: string | undefined;
    wmsProductName: string | undefined;
    knipperProductFlag: boolean | undefined;
}

export class AjaxResponseOfIListOfProductActiveProgramDto implements IAjaxResponseOfIListOfProductActiveProgramDto {
    result: ProductActiveProgramDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfProductActiveProgramDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(ProductActiveProgramDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfProductActiveProgramDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfProductActiveProgramDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfProductActiveProgramDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfProductActiveProgramDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfProductActiveProgramDto {
    result: ProductActiveProgramDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ProductActiveProgramDto implements IProductActiveProgramDto {
    programId: string | undefined;
    programName: string | undefined;
    jobNumber: string | undefined;

    constructor(data?: IProductActiveProgramDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.programName = _data["programName"];
            this.jobNumber = _data["jobNumber"];
        }
    }

    static fromJS(data: any): ProductActiveProgramDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductActiveProgramDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["programName"] = this.programName;
        data["jobNumber"] = this.jobNumber;
        return data; 
    }

    clone(): ProductActiveProgramDto {
        const json = this.toJSON();
        let result = new ProductActiveProgramDto();
        result.init(json);
        return result;
    }
}

export interface IProductActiveProgramDto {
    programId: string | undefined;
    programName: string | undefined;
    jobNumber: string | undefined;
}

export class NewProductSearchFilterDto implements INewProductSearchFilterDto {
    currentProductTypeReferenceCodes: string[] | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    isKnipperProductFlags: boolean[] | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: INewProductSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["currentProductTypeReferenceCodes"])) {
                this.currentProductTypeReferenceCodes = [] as any;
                for (let item of _data["currentProductTypeReferenceCodes"])
                    this.currentProductTypeReferenceCodes.push(item);
            }
            this.wmsProductName = _data["wmsProductName"];
            this.wmsProductId = _data["wmsProductId"];
            if (Array.isArray(_data["isKnipperProductFlags"])) {
                this.isKnipperProductFlags = [] as any;
                for (let item of _data["isKnipperProductFlags"])
                    this.isKnipperProductFlags.push(item);
            }
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): NewProductSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new NewProductSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.currentProductTypeReferenceCodes)) {
            data["currentProductTypeReferenceCodes"] = [];
            for (let item of this.currentProductTypeReferenceCodes)
                data["currentProductTypeReferenceCodes"].push(item);
        }
        data["wmsProductName"] = this.wmsProductName;
        data["wmsProductId"] = this.wmsProductId;
        if (Array.isArray(this.isKnipperProductFlags)) {
            data["isKnipperProductFlags"] = [];
            for (let item of this.isKnipperProductFlags)
                data["isKnipperProductFlags"].push(item);
        }
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): NewProductSearchFilterDto {
        const json = this.toJSON();
        let result = new NewProductSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface INewProductSearchFilterDto {
    currentProductTypeReferenceCodes: string[] | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    isKnipperProductFlags: boolean[] | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPagedResultOfWmsProductSummaryDto implements IAjaxResponseOfPagedResultOfWmsProductSummaryDto {
    result: PagedResultOfWmsProductSummaryDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPagedResultOfWmsProductSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfWmsProductSummaryDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultOfWmsProductSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultOfWmsProductSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPagedResultOfWmsProductSummaryDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPagedResultOfWmsProductSummaryDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPagedResultOfWmsProductSummaryDto {
    result: PagedResultOfWmsProductSummaryDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PagedResultOfWmsProductSummaryDto implements IPagedResultOfWmsProductSummaryDto {
    totalCount: number | undefined;
    items: WmsProductSummaryDto[] | undefined;

    constructor(data?: IPagedResultOfWmsProductSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(WmsProductSummaryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfWmsProductSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfWmsProductSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultOfWmsProductSummaryDto {
        const json = this.toJSON();
        let result = new PagedResultOfWmsProductSummaryDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultOfWmsProductSummaryDto {
    totalCount: number | undefined;
    items: WmsProductSummaryDto[] | undefined;
}

export class WmsProductSummaryDto implements IWmsProductSummaryDto {
    wmsProductId: string | undefined;
    wmsProductType: string | undefined;
    wmsProductName: string | undefined;
    companyCode: string | undefined;
    isKnipperProduct: boolean | undefined;

    constructor(data?: IWmsProductSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wmsProductId = _data["wmsProductId"];
            this.wmsProductType = _data["wmsProductType"];
            this.wmsProductName = _data["wmsProductName"];
            this.companyCode = _data["companyCode"];
            this.isKnipperProduct = _data["isKnipperProduct"];
        }
    }

    static fromJS(data: any): WmsProductSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new WmsProductSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wmsProductId"] = this.wmsProductId;
        data["wmsProductType"] = this.wmsProductType;
        data["wmsProductName"] = this.wmsProductName;
        data["companyCode"] = this.companyCode;
        data["isKnipperProduct"] = this.isKnipperProduct;
        return data; 
    }

    clone(): WmsProductSummaryDto {
        const json = this.toJSON();
        let result = new WmsProductSummaryDto();
        result.init(json);
        return result;
    }
}

export interface IWmsProductSummaryDto {
    wmsProductId: string | undefined;
    wmsProductType: string | undefined;
    wmsProductName: string | undefined;
    companyCode: string | undefined;
    isKnipperProduct: boolean | undefined;
}

export class AjaxResponseOfListOfSimpleProductDto implements IAjaxResponseOfListOfSimpleProductDto {
    result: SimpleProductDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfListOfSimpleProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(SimpleProductDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfSimpleProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfSimpleProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfListOfSimpleProductDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfListOfSimpleProductDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfListOfSimpleProductDto {
    result: SimpleProductDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class SimpleProductDto implements ISimpleProductDto {
    id: string | undefined;
    productName: string | undefined;

    constructor(data?: ISimpleProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productName = _data["productName"];
        }
    }

    static fromJS(data: any): SimpleProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productName"] = this.productName;
        return data; 
    }

    clone(): SimpleProductDto {
        const json = this.toJSON();
        let result = new SimpleProductDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleProductDto {
    id: string | undefined;
    productName: string | undefined;
}

export class ProgramProductSearchFilterDto implements IProgramProductSearchFilterDto {
    programConfigurationId: string | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    knipperFlag: boolean | undefined;
    brands: string[] | undefined;
    productTypeId: string | undefined;
    productsIncludedInProgramFlag: boolean | undefined;
    orderableFlag: boolean | undefined;
    autoIncludeFlag: boolean | undefined;
    selectDayShippingFlag: boolean | undefined;
    sodFlag: boolean | undefined;

    constructor(data?: IProgramProductSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programConfigurationId = _data["programConfigurationId"];
            this.wmsProductName = _data["wmsProductName"];
            this.wmsProductId = _data["wmsProductId"];
            this.knipperFlag = _data["knipperFlag"];
            if (Array.isArray(_data["brands"])) {
                this.brands = [] as any;
                for (let item of _data["brands"])
                    this.brands.push(item);
            }
            this.productTypeId = _data["productTypeId"];
            this.productsIncludedInProgramFlag = _data["productsIncludedInProgramFlag"];
            this.orderableFlag = _data["orderableFlag"];
            this.autoIncludeFlag = _data["autoIncludeFlag"];
            this.selectDayShippingFlag = _data["selectDayShippingFlag"];
            this.sodFlag = _data["sodFlag"];
        }
    }

    static fromJS(data: any): ProgramProductSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramProductSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programConfigurationId"] = this.programConfigurationId;
        data["wmsProductName"] = this.wmsProductName;
        data["wmsProductId"] = this.wmsProductId;
        data["knipperFlag"] = this.knipperFlag;
        if (Array.isArray(this.brands)) {
            data["brands"] = [];
            for (let item of this.brands)
                data["brands"].push(item);
        }
        data["productTypeId"] = this.productTypeId;
        data["productsIncludedInProgramFlag"] = this.productsIncludedInProgramFlag;
        data["orderableFlag"] = this.orderableFlag;
        data["autoIncludeFlag"] = this.autoIncludeFlag;
        data["selectDayShippingFlag"] = this.selectDayShippingFlag;
        data["sodFlag"] = this.sodFlag;
        return data; 
    }

    clone(): ProgramProductSearchFilterDto {
        const json = this.toJSON();
        let result = new ProgramProductSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface IProgramProductSearchFilterDto {
    programConfigurationId: string | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    knipperFlag: boolean | undefined;
    brands: string[] | undefined;
    productTypeId: string | undefined;
    productsIncludedInProgramFlag: boolean | undefined;
    orderableFlag: boolean | undefined;
    autoIncludeFlag: boolean | undefined;
    selectDayShippingFlag: boolean | undefined;
    sodFlag: boolean | undefined;
}

export class AjaxResponseOfIListOfProgramProductSearchDto implements IAjaxResponseOfIListOfProgramProductSearchDto {
    result: ProgramProductSearchDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfProgramProductSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(ProgramProductSearchDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfProgramProductSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfProgramProductSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfProgramProductSearchDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfProgramProductSearchDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfProgramProductSearchDto {
    result: ProgramProductSearchDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ProgramProductSearchDto implements IProgramProductSearchDto {
    programConfigurationId: string | undefined;
    productId: string | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    knipperFlag: boolean | undefined;
    brandId: string | undefined;
    productTypeId: string | undefined;
    orderableFlag: boolean | undefined;
    autoIncludeFlag: boolean | undefined;
    selectDayShippingFlag: boolean | undefined;
    sodFlag: boolean | undefined;
    isSelected: boolean | undefined;

    constructor(data?: IProgramProductSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programConfigurationId = _data["programConfigurationId"];
            this.productId = _data["productId"];
            this.wmsProductName = _data["wmsProductName"];
            this.wmsProductId = _data["wmsProductId"];
            this.knipperFlag = _data["knipperFlag"];
            this.brandId = _data["brandId"];
            this.productTypeId = _data["productTypeId"];
            this.orderableFlag = _data["orderableFlag"];
            this.autoIncludeFlag = _data["autoIncludeFlag"];
            this.selectDayShippingFlag = _data["selectDayShippingFlag"];
            this.sodFlag = _data["sodFlag"];
            this.isSelected = _data["isSelected"];
        }
    }

    static fromJS(data: any): ProgramProductSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramProductSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programConfigurationId"] = this.programConfigurationId;
        data["productId"] = this.productId;
        data["wmsProductName"] = this.wmsProductName;
        data["wmsProductId"] = this.wmsProductId;
        data["knipperFlag"] = this.knipperFlag;
        data["brandId"] = this.brandId;
        data["productTypeId"] = this.productTypeId;
        data["orderableFlag"] = this.orderableFlag;
        data["autoIncludeFlag"] = this.autoIncludeFlag;
        data["selectDayShippingFlag"] = this.selectDayShippingFlag;
        data["sodFlag"] = this.sodFlag;
        data["isSelected"] = this.isSelected;
        return data; 
    }

    clone(): ProgramProductSearchDto {
        const json = this.toJSON();
        let result = new ProgramProductSearchDto();
        result.init(json);
        return result;
    }
}

export interface IProgramProductSearchDto {
    programConfigurationId: string | undefined;
    productId: string | undefined;
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    knipperFlag: boolean | undefined;
    brandId: string | undefined;
    productTypeId: string | undefined;
    orderableFlag: boolean | undefined;
    autoIncludeFlag: boolean | undefined;
    selectDayShippingFlag: boolean | undefined;
    sodFlag: boolean | undefined;
    isSelected: boolean | undefined;
}

export class AjaxResponseOfListOfBrandProductDto implements IAjaxResponseOfListOfBrandProductDto {
    result: BrandProductDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfListOfBrandProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(BrandProductDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfBrandProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfBrandProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfListOfBrandProductDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfListOfBrandProductDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfListOfBrandProductDto {
    result: BrandProductDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class BrandProductDto implements IBrandProductDto {
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    productStatus: string | undefined;
    isDeleted: boolean | undefined;

    constructor(data?: IBrandProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wmsProductName = _data["wmsProductName"];
            this.wmsProductId = _data["wmsProductId"];
            this.productStatus = _data["productStatus"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): BrandProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new BrandProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wmsProductName"] = this.wmsProductName;
        data["wmsProductId"] = this.wmsProductId;
        data["productStatus"] = this.productStatus;
        data["isDeleted"] = this.isDeleted;
        return data; 
    }

    clone(): BrandProductDto {
        const json = this.toJSON();
        let result = new BrandProductDto();
        result.init(json);
        return result;
    }
}

export interface IBrandProductDto {
    wmsProductName: string | undefined;
    wmsProductId: string | undefined;
    productStatus: string | undefined;
    isDeleted: boolean | undefined;
}

export class AjaxResponseOfProductGroupDto implements IAjaxResponseOfProductGroupDto {
    result: ProductGroupDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfProductGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ProductGroupDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfProductGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfProductGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfProductGroupDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfProductGroupDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfProductGroupDto {
    result: ProductGroupDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ProductGroupDto implements IProductGroupDto {
    id: string | undefined;
    creatorUserId: number | undefined;
    productGroupCode: string | undefined;
    productGroupName: string | undefined;
    productGroupDesc: string | undefined;
    sortOrderNumber: number | undefined;
    topFlag: boolean | undefined;
    bottomFlag: boolean | undefined;
    comments: string | undefined;
    currentStatusDate: Date | undefined;
    mainImageProductAttachmentId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    productGroupTypeClassificationValueId: string | undefined;
    sortPriorityFlag: boolean | undefined;
    hasBeenActivatedFlag: boolean | undefined;
    clientProductGroupId: string | undefined;
    distributedBy: string | undefined;
    manufacturedBy: string | undefined;
    tenantId: number | undefined;
    productAttachments: ProductAttachmentDto[] | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IProductGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorUserId = _data["creatorUserId"];
            this.productGroupCode = _data["productGroupCode"];
            this.productGroupName = _data["productGroupName"];
            this.productGroupDesc = _data["productGroupDesc"];
            this.sortOrderNumber = _data["sortOrderNumber"];
            this.topFlag = _data["topFlag"];
            this.bottomFlag = _data["bottomFlag"];
            this.comments = _data["comments"];
            this.currentStatusDate = _data["currentStatusDate"] ? new Date(_data["currentStatusDate"].toString()) : <any>undefined;
            this.mainImageProductAttachmentId = _data["mainImageProductAttachmentId"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
            this.productGroupTypeClassificationValueId = _data["productGroupTypeClassificationValueId"];
            this.sortPriorityFlag = _data["sortPriorityFlag"];
            this.hasBeenActivatedFlag = _data["hasBeenActivatedFlag"];
            this.clientProductGroupId = _data["clientProductGroupId"];
            this.distributedBy = _data["distributedBy"];
            this.manufacturedBy = _data["manufacturedBy"];
            this.tenantId = _data["tenantId"];
            if (Array.isArray(_data["productAttachments"])) {
                this.productAttachments = [] as any;
                for (let item of _data["productAttachments"])
                    this.productAttachments.push(ProductAttachmentDto.fromJS(item));
            }
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorUserId"] = this.creatorUserId;
        data["productGroupCode"] = this.productGroupCode;
        data["productGroupName"] = this.productGroupName;
        data["productGroupDesc"] = this.productGroupDesc;
        data["sortOrderNumber"] = this.sortOrderNumber;
        data["topFlag"] = this.topFlag;
        data["bottomFlag"] = this.bottomFlag;
        data["comments"] = this.comments;
        data["currentStatusDate"] = this.currentStatusDate ? this.currentStatusDate.toISOString() : <any>undefined;
        data["mainImageProductAttachmentId"] = this.mainImageProductAttachmentId;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        data["productGroupTypeClassificationValueId"] = this.productGroupTypeClassificationValueId;
        data["sortPriorityFlag"] = this.sortPriorityFlag;
        data["hasBeenActivatedFlag"] = this.hasBeenActivatedFlag;
        data["clientProductGroupId"] = this.clientProductGroupId;
        data["distributedBy"] = this.distributedBy;
        data["manufacturedBy"] = this.manufacturedBy;
        data["tenantId"] = this.tenantId;
        if (Array.isArray(this.productAttachments)) {
            data["productAttachments"] = [];
            for (let item of this.productAttachments)
                data["productAttachments"].push(item.toJSON());
        }
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ProductGroupDto {
        const json = this.toJSON();
        let result = new ProductGroupDto();
        result.init(json);
        return result;
    }
}

export interface IProductGroupDto {
    id: string | undefined;
    creatorUserId: number | undefined;
    productGroupCode: string | undefined;
    productGroupName: string | undefined;
    productGroupDesc: string | undefined;
    sortOrderNumber: number | undefined;
    topFlag: boolean | undefined;
    bottomFlag: boolean | undefined;
    comments: string | undefined;
    currentStatusDate: Date | undefined;
    mainImageProductAttachmentId: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    productGroupTypeClassificationValueId: string | undefined;
    sortPriorityFlag: boolean | undefined;
    hasBeenActivatedFlag: boolean | undefined;
    clientProductGroupId: string | undefined;
    distributedBy: string | undefined;
    manufacturedBy: string | undefined;
    tenantId: number | undefined;
    productAttachments: ProductAttachmentDto[] | undefined;
    names: LocalizedValue[] | undefined;
}

export class ProductAttachmentDto implements IProductAttachmentDto {
    productGroupId: string | undefined;
    location: string | undefined;
    comments: string | undefined;
    attachmentTypeClassificationValueId: string | undefined;
    sequenceNumber: number | undefined;
    newFlag: boolean | undefined;
    fileUpload: FileUpload | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    id: string | undefined;

    constructor(data?: IProductAttachmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productGroupId = _data["productGroupId"];
            this.location = _data["location"];
            this.comments = _data["comments"];
            this.attachmentTypeClassificationValueId = _data["attachmentTypeClassificationValueId"];
            this.sequenceNumber = _data["sequenceNumber"];
            this.newFlag = _data["newFlag"];
            this.fileUpload = _data["fileUpload"] ? FileUpload.fromJS(_data["fileUpload"]) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProductAttachmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductAttachmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productGroupId"] = this.productGroupId;
        data["location"] = this.location;
        data["comments"] = this.comments;
        data["attachmentTypeClassificationValueId"] = this.attachmentTypeClassificationValueId;
        data["sequenceNumber"] = this.sequenceNumber;
        data["newFlag"] = this.newFlag;
        data["fileUpload"] = this.fileUpload ? this.fileUpload.toJSON() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): ProductAttachmentDto {
        const json = this.toJSON();
        let result = new ProductAttachmentDto();
        result.init(json);
        return result;
    }
}

export interface IProductAttachmentDto {
    productGroupId: string | undefined;
    location: string | undefined;
    comments: string | undefined;
    attachmentTypeClassificationValueId: string | undefined;
    sequenceNumber: number | undefined;
    newFlag: boolean | undefined;
    fileUpload: FileUpload | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    id: string | undefined;
}

export class FileUpload implements IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;

    constructor(data?: IFileUpload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileDescription = _data["fileDescription"];
            this.fileType = _data["fileType"];
            this.base64FileContent = _data["base64FileContent"];
            this.location = _data["location"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.newFlag = _data["newFlag"];
        }
    }

    static fromJS(data: any): FileUpload {
        data = typeof data === 'object' ? data : {};
        let result = new FileUpload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileDescription"] = this.fileDescription;
        data["fileType"] = this.fileType;
        data["base64FileContent"] = this.base64FileContent;
        data["location"] = this.location;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["newFlag"] = this.newFlag;
        return data; 
    }

    clone(): FileUpload {
        const json = this.toJSON();
        let result = new FileUpload();
        result.init(json);
        return result;
    }
}

export interface IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
}

export class ProductGroupSearchFilterDto implements IProductGroupSearchFilterDto {
    productGroupName: string | undefined;
    clientProductGroupId: string | undefined;
    wmsProductName: string | undefined;
    wmsProductID: string | undefined;
    sortPriorityFlags: boolean[] | undefined;
    currentStatusClassificationValueIds: string[] | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: IProductGroupSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productGroupName = _data["productGroupName"];
            this.clientProductGroupId = _data["clientProductGroupId"];
            this.wmsProductName = _data["wmsProductName"];
            this.wmsProductID = _data["wmsProductID"];
            if (Array.isArray(_data["sortPriorityFlags"])) {
                this.sortPriorityFlags = [] as any;
                for (let item of _data["sortPriorityFlags"])
                    this.sortPriorityFlags.push(item);
            }
            if (Array.isArray(_data["currentStatusClassificationValueIds"])) {
                this.currentStatusClassificationValueIds = [] as any;
                for (let item of _data["currentStatusClassificationValueIds"])
                    this.currentStatusClassificationValueIds.push(item);
            }
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): ProductGroupSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductGroupSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productGroupName"] = this.productGroupName;
        data["clientProductGroupId"] = this.clientProductGroupId;
        data["wmsProductName"] = this.wmsProductName;
        data["wmsProductID"] = this.wmsProductID;
        if (Array.isArray(this.sortPriorityFlags)) {
            data["sortPriorityFlags"] = [];
            for (let item of this.sortPriorityFlags)
                data["sortPriorityFlags"].push(item);
        }
        if (Array.isArray(this.currentStatusClassificationValueIds)) {
            data["currentStatusClassificationValueIds"] = [];
            for (let item of this.currentStatusClassificationValueIds)
                data["currentStatusClassificationValueIds"].push(item);
        }
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): ProductGroupSearchFilterDto {
        const json = this.toJSON();
        let result = new ProductGroupSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface IProductGroupSearchFilterDto {
    productGroupName: string | undefined;
    clientProductGroupId: string | undefined;
    wmsProductName: string | undefined;
    wmsProductID: string | undefined;
    sortPriorityFlags: boolean[] | undefined;
    currentStatusClassificationValueIds: string[] | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPagedResultOfProductGroupSearchDto implements IAjaxResponseOfPagedResultOfProductGroupSearchDto {
    result: PagedResultOfProductGroupSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPagedResultOfProductGroupSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfProductGroupSearchDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultOfProductGroupSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultOfProductGroupSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPagedResultOfProductGroupSearchDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPagedResultOfProductGroupSearchDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPagedResultOfProductGroupSearchDto {
    result: PagedResultOfProductGroupSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PagedResultOfProductGroupSearchDto implements IPagedResultOfProductGroupSearchDto {
    totalCount: number | undefined;
    items: ProductGroupSearchDto[] | undefined;

    constructor(data?: IPagedResultOfProductGroupSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(ProductGroupSearchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfProductGroupSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfProductGroupSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultOfProductGroupSearchDto {
        const json = this.toJSON();
        let result = new PagedResultOfProductGroupSearchDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultOfProductGroupSearchDto {
    totalCount: number | undefined;
    items: ProductGroupSearchDto[] | undefined;
}

export class ProductGroupSearchDto implements IProductGroupSearchDto {
    id: string | undefined;
    productGroupCode: string | undefined;
    productGroupName: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    productGroupTypeClassificationValueId: string | undefined;
    sortPriorityFlag: boolean | undefined;
    hasBeenActivatedFlag: boolean | undefined;
    clientProductGroupId: string | undefined;
    productsCount: number | undefined;
    activeProgramsCount: number | undefined;

    constructor(data?: IProductGroupSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productGroupCode = _data["productGroupCode"];
            this.productGroupName = _data["productGroupName"];
            this.currentStatusClassificationValueId = _data["currentStatusClassificationValueId"];
            this.productGroupTypeClassificationValueId = _data["productGroupTypeClassificationValueId"];
            this.sortPriorityFlag = _data["sortPriorityFlag"];
            this.hasBeenActivatedFlag = _data["hasBeenActivatedFlag"];
            this.clientProductGroupId = _data["clientProductGroupId"];
            this.productsCount = _data["productsCount"];
            this.activeProgramsCount = _data["activeProgramsCount"];
        }
    }

    static fromJS(data: any): ProductGroupSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductGroupSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productGroupCode"] = this.productGroupCode;
        data["productGroupName"] = this.productGroupName;
        data["currentStatusClassificationValueId"] = this.currentStatusClassificationValueId;
        data["productGroupTypeClassificationValueId"] = this.productGroupTypeClassificationValueId;
        data["sortPriorityFlag"] = this.sortPriorityFlag;
        data["hasBeenActivatedFlag"] = this.hasBeenActivatedFlag;
        data["clientProductGroupId"] = this.clientProductGroupId;
        data["productsCount"] = this.productsCount;
        data["activeProgramsCount"] = this.activeProgramsCount;
        return data; 
    }

    clone(): ProductGroupSearchDto {
        const json = this.toJSON();
        let result = new ProductGroupSearchDto();
        result.init(json);
        return result;
    }
}

export interface IProductGroupSearchDto {
    id: string | undefined;
    productGroupCode: string | undefined;
    productGroupName: string | undefined;
    currentStatusClassificationValueId: string | undefined;
    productGroupTypeClassificationValueId: string | undefined;
    sortPriorityFlag: boolean | undefined;
    hasBeenActivatedFlag: boolean | undefined;
    clientProductGroupId: string | undefined;
    productsCount: number | undefined;
    activeProgramsCount: number | undefined;
}

export class AjaxResponse implements IAjaxResponse {
    result: any | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponse {
        const json = this.toJSON();
        let result = new AjaxResponse();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponse {
    result: any | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfIListOfProductGroupDto implements IAjaxResponseOfIListOfProductGroupDto {
    result: ProductGroupDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfProductGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(ProductGroupDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfProductGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfProductGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfProductGroupDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfProductGroupDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfProductGroupDto {
    result: ProductGroupDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfListOfSimpleProductGroupDto implements IAjaxResponseOfListOfSimpleProductGroupDto {
    result: SimpleProductGroupDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfListOfSimpleProductGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(SimpleProductGroupDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfSimpleProductGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfSimpleProductGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfListOfSimpleProductGroupDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfListOfSimpleProductGroupDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfListOfSimpleProductGroupDto {
    result: SimpleProductGroupDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class SimpleProductGroupDto implements ISimpleProductGroupDto {
    id: string | undefined;
    productGroupName: string | undefined;

    constructor(data?: ISimpleProductGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productGroupName = _data["productGroupName"];
        }
    }

    static fromJS(data: any): SimpleProductGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleProductGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productGroupName"] = this.productGroupName;
        return data; 
    }

    clone(): SimpleProductGroupDto {
        const json = this.toJSON();
        let result = new SimpleProductGroupDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleProductGroupDto {
    id: string | undefined;
    productGroupName: string | undefined;
}

export enum LocalizedValueLanguage {
    _0 = 0,
    _1 = 1,
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}
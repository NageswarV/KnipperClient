/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.5.0.0 (NJsonSchema v10.1.15.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
import { __decorate, __extends, __metadata, __param, __values } from "tslib";
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';
import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
export var TENANT_API_BASE_URL = new InjectionToken('TENANT_API_BASE_URL');
var ServiceBaseConfig = /** @class */ (function () {
    function ServiceBaseConfig() {
    }
    return ServiceBaseConfig;
}());
export { ServiceBaseConfig };
var ServiceBase = /** @class */ (function () {
    function ServiceBase(config) {
        this.apimHeaderName = 'Ocp-Apim-Subscription-Key';
        this.tenantIdHeaderName = 'TenantId';
        this.tenantIdLocalStorageKey = 'samplicity-dtp-current-client';
        this.idTokenKey = 'samplicity-id-token';
        this.apiKey = config.key;
    }
    ServiceBase.prototype.transformOptions = function (options) {
        var headers = options.headers;
        if (this.apiKey) {
            headers = headers.append(this.apimHeaderName, this.apiKey);
        }
        var tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
        if (tenantId) {
            headers = headers.append(this.tenantIdHeaderName, tenantId);
        }
        var token = localStorage.getItem(this.idTokenKey);
        if (token) {
            headers = headers.append('Authorization', 'Bearer ' + token);
        }
        options.headers = headers;
        return Promise.resolve(options);
    };
    return ServiceBase;
}());
export { ServiceBase };
var Tenant = /** @class */ (function (_super) {
    __extends(Tenant, _super);
    function Tenant(configuration, http, baseUrl) {
        var _this = _super.call(this, configuration) || this;
        _this.jsonParseReviver = undefined;
        _this.http = http;
        _this.baseUrl = baseUrl ? baseUrl : "";
        return _this;
    }
    /**
     * @param tenantId (optional)
     * @return Success
     */
    Tenant.prototype.getTenantInfoById = function (tenantId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantInfoById?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("get", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processGetTenantInfoById(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetTenantInfoById(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processGetTenantInfoById = function (response) {
        var e_1, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param tenantId (optional)
     * @return Success
     */
    Tenant.prototype.getTenantById = function (tenantId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantById?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("get", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processGetTenantById(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetTenantById(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processGetTenantById = function (response) {
        var e_2, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param url (optional)
     * @return Success
     */
    Tenant.prototype.getTenantByUrl = function (url) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantByUrl?";
        if (url !== undefined && url !== null)
            url_ += "url=" + encodeURIComponent("" + url) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("get", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processGetTenantByUrl(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetTenantByUrl(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processGetTenantByUrl = function (response) {
        var e_3, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param name (optional)
     * @return Success
     */
    Tenant.prototype.getTenantByName = function (name) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantByName?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("get", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processGetTenantByName(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetTenantByName(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processGetTenantByName = function (response) {
        var e_4, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param daxId (optional)
     * @return Success
     */
    Tenant.prototype.getTenantByDaxId = function (daxId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantByDaxId?";
        if (daxId !== undefined && daxId !== null)
            url_ += "daxId=" + encodeURIComponent("" + daxId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("get", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processGetTenantByDaxId(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetTenantByDaxId(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processGetTenantByDaxId = function (response) {
        var e_5, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param abbreviation (optional)
     * @return Success
     */
    Tenant.prototype.getTenantByAbbreviation = function (abbreviation) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantByAbbreviation?";
        if (abbreviation !== undefined && abbreviation !== null)
            url_ += "abbreviation=" + encodeURIComponent("" + abbreviation) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("get", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processGetTenantByAbbreviation(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetTenantByAbbreviation(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processGetTenantByAbbreviation = function (response) {
        var e_6, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param includeActiveOnly (optional)
     * @return Success
     */
    Tenant.prototype.getActiveSimpleTenants = function (includeActiveOnly) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetActiveSimpleTenants?";
        if (includeActiveOnly !== undefined && includeActiveOnly !== null)
            url_ += "includeActiveOnly=" + encodeURIComponent("" + includeActiveOnly) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("get", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processGetActiveSimpleTenants(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetActiveSimpleTenants(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processGetActiveSimpleTenants = function (response) {
        var e_7, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfIReadOnlyListOfSimpleTenantDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param tenantIdCollection (optional)
     * @param getAllTenants (optional)
     * @return Success
     */
    Tenant.prototype.getSimpleTenants = function (tenantIdCollection, getAllTenants) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetSimpleTenants?";
        if (tenantIdCollection !== undefined && tenantIdCollection !== null)
            tenantIdCollection && tenantIdCollection.forEach(function (item) { url_ += "tenantIdCollection=" + encodeURIComponent("" + item) + "&"; });
        if (getAllTenants !== undefined && getAllTenants !== null)
            url_ += "getAllTenants=" + encodeURIComponent("" + getAllTenants) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("get", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processGetSimpleTenants(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetSimpleTenants(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processGetSimpleTenants = function (response) {
        var e_8, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfIReadOnlyListOfSimpleTenantDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param filter (optional)
     * @return Success
     */
    Tenant.prototype.searchTenants = function (filter) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/SearchTenants";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(filter);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("post", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processSearchTenants(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processSearchTenants(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processSearchTenants = function (response) {
        var e_9, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfPagedResultOfTenantDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param filter (optional)
     * @return Success
     */
    Tenant.prototype.searchPmsClients = function (filter) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/SearchPmsClients";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(filter);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("post", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processSearchPmsClients(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processSearchPmsClients(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processSearchPmsClients = function (response) {
        var e_10, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfIListOfPmsClientDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param filter (optional)
     * @return Success
     */
    Tenant.prototype.validatePmsClient = function (filter) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/ValidatePmsClient";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(filter);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("post", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processValidatePmsClient(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processValidatePmsClient(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processValidatePmsClient = function (response) {
        var e_11, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfValidatedPmsClientDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param prefix (optional)
     * @return Success
     */
    Tenant.prototype.checkTenantPrefixExists = function (prefix) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/CheckTenantPrefixExists?";
        if (prefix !== undefined && prefix !== null)
            url_ += "prefix=" + encodeURIComponent("" + prefix) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("post", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processCheckTenantPrefixExists(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processCheckTenantPrefixExists(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processCheckTenantPrefixExists = function (response) {
        var e_12, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_12) throw e_12.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfBoolean.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param tenantDto (optional)
     * @return Success
     */
    Tenant.prototype.createTenant = function (tenantDto) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/CreateTenant";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(tenantDto);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("post", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processCreateTenant(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processCreateTenant(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processCreateTenant = function (response) {
        var e_13, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_13_1) { e_13 = { error: e_13_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_13) throw e_13.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponse.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param tenantId (optional)
     * @return Success
     */
    Tenant.prototype.getTenantDetails = function (tenantId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantDetails?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("get", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processGetTenantDetails(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetTenantDetails(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processGetTenantDetails = function (response) {
        var e_14, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_14_1) { e_14 = { error: e_14_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_14) throw e_14.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfTenantDetailsDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param src (optional)
     * @return Success
     */
    Tenant.prototype.updateOrActivateTenant = function (src) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/UpdateOrActivateTenant";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(src);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("put", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processUpdateOrActivateTenant(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processUpdateOrActivateTenant(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processUpdateOrActivateTenant = function (response) {
        var e_15, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_15_1) { e_15 = { error: e_15_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_15) throw e_15.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfTenantDetailsDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param tenantId (optional)
     * @return Success
     */
    Tenant.prototype.refreshTenantData = function (tenantId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/RefreshTenantData?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("post", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processRefreshTenantData(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processRefreshTenantData(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processRefreshTenantData = function (response) {
        var e_16, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_16_1) { e_16 = { error: e_16_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_16) throw e_16.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfTenantDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param tenantId (optional)
     * @return Success
     */
    Tenant.prototype.deactivateTenantForDtp = function (tenantId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/DeactivateTenantForDtp?";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("post", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processDeactivateTenantForDtp(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processDeactivateTenantForDtp(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processDeactivateTenantForDtp = function (response) {
        var e_17, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_17_1) { e_17 = { error: e_17_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_17) throw e_17.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfTenantDetailsDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    Tenant.prototype.getTenantAttachmentById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantAttachment/GetTenantAttachmentById?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("get", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processGetTenantAttachmentById(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processGetTenantAttachmentById(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processGetTenantAttachmentById = function (response) {
        var e_18, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_18_1) { e_18 = { error: e_18_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_18) throw e_18.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponseOfTenantAttachmentDto.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param tenantIntId (optional)
     * @param tenantId (optional)
     * @param attachmentName (optional)
     * @param attachmentLocation (optional)
     * @param commentsText (optional)
     * @param attachmentDesc (optional)
     * @param tenantAttachmentTypeClassificationValueId (optional)
     * @param rowVersion (optional)
     * @param isDeleted (optional)
     * @param deleterUserId (optional)
     * @param deletionTime (optional)
     * @param lastModificationTime (optional)
     * @param lastModifierUserId (optional)
     * @param creationTime (optional)
     * @param creatorUserId (optional)
     * @param id (optional)
     * @param blobDeletionFlag (optional)
     * @return Success
     */
    Tenant.prototype.deleteTenantAttachment = function (tenantIntId, tenantId, attachmentName, attachmentLocation, commentsText, attachmentDesc, tenantAttachmentTypeClassificationValueId, rowVersion, isDeleted, deleterUserId, deletionTime, lastModificationTime, lastModifierUserId, creationTime, creatorUserId, id, blobDeletionFlag) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantAttachment/DeleteTenantAttachment?";
        if (tenantIntId !== undefined && tenantIntId !== null)
            url_ += "tenantIntId=" + encodeURIComponent("" + tenantIntId) + "&";
        if (tenantId !== undefined && tenantId !== null)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&";
        if (attachmentName !== undefined && attachmentName !== null)
            url_ += "AttachmentName=" + encodeURIComponent("" + attachmentName) + "&";
        if (attachmentLocation !== undefined && attachmentLocation !== null)
            url_ += "AttachmentLocation=" + encodeURIComponent("" + attachmentLocation) + "&";
        if (commentsText !== undefined && commentsText !== null)
            url_ += "CommentsText=" + encodeURIComponent("" + commentsText) + "&";
        if (attachmentDesc !== undefined && attachmentDesc !== null)
            url_ += "AttachmentDesc=" + encodeURIComponent("" + attachmentDesc) + "&";
        if (tenantAttachmentTypeClassificationValueId !== undefined && tenantAttachmentTypeClassificationValueId !== null)
            url_ += "TenantAttachmentTypeClassificationValueId=" + encodeURIComponent("" + tenantAttachmentTypeClassificationValueId) + "&";
        if (rowVersion !== undefined && rowVersion !== null)
            url_ += "RowVersion=" + encodeURIComponent("" + rowVersion) + "&";
        if (isDeleted !== undefined && isDeleted !== null)
            url_ += "IsDeleted=" + encodeURIComponent("" + isDeleted) + "&";
        if (deleterUserId !== undefined && deleterUserId !== null)
            url_ += "DeleterUserId=" + encodeURIComponent("" + deleterUserId) + "&";
        if (deletionTime !== undefined && deletionTime !== null)
            url_ += "DeletionTime=" + encodeURIComponent(deletionTime ? "" + deletionTime.toJSON() : "") + "&";
        if (lastModificationTime !== undefined && lastModificationTime !== null)
            url_ += "LastModificationTime=" + encodeURIComponent(lastModificationTime ? "" + lastModificationTime.toJSON() : "") + "&";
        if (lastModifierUserId !== undefined && lastModifierUserId !== null)
            url_ += "LastModifierUserId=" + encodeURIComponent("" + lastModifierUserId) + "&";
        if (creationTime !== undefined && creationTime !== null)
            url_ += "CreationTime=" + encodeURIComponent(creationTime ? "" + creationTime.toJSON() : "") + "&";
        if (creatorUserId !== undefined && creatorUserId !== null)
            url_ += "CreatorUserId=" + encodeURIComponent("" + creatorUserId) + "&";
        if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (blobDeletionFlag !== undefined && blobDeletionFlag !== null)
            url_ += "blobDeletionFlag=" + encodeURIComponent("" + blobDeletionFlag) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("delete", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processDeleteTenantAttachment(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processDeleteTenantAttachment(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processDeleteTenantAttachment = function (response) {
        var e_19, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_19_1) { e_19 = { error: e_19_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_19) throw e_19.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponse.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    /**
     * @param tenantIntId (optional)
     * @param tenantAttachmentDto (optional)
     * @return Success
     */
    Tenant.prototype.createTenantLogoAttachment = function (tenantIntId, tenantAttachmentDto) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantAttachment/CreateTenantLogoAttachment?";
        if (tenantIntId !== undefined && tenantIntId !== null)
            url_ += "tenantIntId=" + encodeURIComponent("" + tenantIntId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(tenantAttachmentDto);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return Observable.fromPromise(this.transformOptions(options_)).flatMap(function (transformedOptions_) {
            return _this.http.request("post", url_, transformedOptions_);
        }).flatMap(function (response_) {
            return _this.processCreateTenantLogoAttachment(response_);
        }).catch(function (response_) {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return _this.processCreateTenantLogoAttachment(response_);
                }
                catch (e) {
                    return Observable.throw(e);
                }
            }
            else
                return Observable.throw(response_);
        });
    };
    Tenant.prototype.processCreateTenantLogoAttachment = function (response) {
        var e_20, _a;
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            try {
                for (var _b = __values(response.headers.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _headers[key] = response.headers.get(key);
                }
            }
            catch (e_20_1) { e_20 = { error: e_20_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_20) throw e_20.error; }
            }
        }
        if (status === 200) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = AjaxResponse.fromJS(resultData200);
                return Observable.of(result200);
            });
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of(null);
    };
    Tenant = __decorate([
        Injectable(),
        __param(0, Inject(ServiceBaseConfig)), __param(1, Inject(HttpClient)), __param(2, Optional()), __param(2, Inject(TENANT_API_BASE_URL)),
        __metadata("design:paramtypes", [ServiceBaseConfig, HttpClient, String])
    ], Tenant);
    return Tenant;
}(ServiceBase));
export { Tenant };
var AjaxResponseOfTenantDto = /** @class */ (function () {
    function AjaxResponseOfTenantDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AjaxResponseOfTenantDto.prototype.init = function (_data) {
        if (_data) {
            this.result = _data["result"] ? TenantDto.fromJS(_data["result"]) : undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            this.__abp = _data["__abp"];
        }
    };
    AjaxResponseOfTenantDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AjaxResponseOfTenantDto();
        result.init(data);
        return result;
    };
    AjaxResponseOfTenantDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data;
    };
    AjaxResponseOfTenantDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AjaxResponseOfTenantDto();
        result.init(json);
        return result;
    };
    return AjaxResponseOfTenantDto;
}());
export { AjaxResponseOfTenantDto };
var TenantDto = /** @class */ (function () {
    function TenantDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantDto.prototype.init = function (_data) {
        var e_21, _a, e_22, _b, e_23, _c;
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.tenancyName = _data["tenancyName"];
            this.daxId = _data["daxId"];
            this.blobStorageContainerName = _data["blobStorageContainerName"];
            this.connectionString = _data["connectionString"];
            this.isActive = _data["isActive"];
            this.statusClassificationValueId = _data["statusClassificationValueId"];
            this.prefix = _data["prefix"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : undefined;
            if (Array.isArray(_data["tenantModules"])) {
                this.tenantModules = [];
                try {
                    for (var _d = __values(_data["tenantModules"]), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var item = _e.value;
                        this.tenantModules.push(TenantModuleDto.fromJS(item));
                    }
                }
                catch (e_21_1) { e_21 = { error: e_21_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                    }
                    finally { if (e_21) throw e_21.error; }
                }
            }
            if (Array.isArray(_data["tenantSettings"])) {
                this.tenantSettings = [];
                try {
                    for (var _f = __values(_data["tenantSettings"]), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var item = _g.value;
                        this.tenantSettings.push(TenantSettingDto.fromJS(item));
                    }
                }
                catch (e_22_1) { e_22 = { error: e_22_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_22) throw e_22.error; }
                }
            }
            if (Array.isArray(_data["tenantAttachments"])) {
                this.tenantAttachments = [];
                try {
                    for (var _h = __values(_data["tenantAttachments"]), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var item = _j.value;
                        this.tenantAttachments.push(TenantSimpleAttachmentDto.fromJS(item));
                    }
                }
                catch (e_23_1) { e_23 = { error: e_23_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                    }
                    finally { if (e_23) throw e_23.error; }
                }
            }
            this.id = _data["id"];
        }
    };
    TenantDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantDto();
        result.init(data);
        return result;
    };
    TenantDto.prototype.toJSON = function (data) {
        var e_24, _a, e_25, _b, e_26, _c;
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["tenancyName"] = this.tenancyName;
        data["daxId"] = this.daxId;
        data["blobStorageContainerName"] = this.blobStorageContainerName;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["statusClassificationValueId"] = this.statusClassificationValueId;
        data["prefix"] = this.prefix;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        if (Array.isArray(this.tenantModules)) {
            data["tenantModules"] = [];
            try {
                for (var _d = __values(this.tenantModules), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var item = _e.value;
                    data["tenantModules"].push(item.toJSON());
                }
            }
            catch (e_24_1) { e_24 = { error: e_24_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_24) throw e_24.error; }
            }
        }
        if (Array.isArray(this.tenantSettings)) {
            data["tenantSettings"] = [];
            try {
                for (var _f = __values(this.tenantSettings), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var item = _g.value;
                    data["tenantSettings"].push(item.toJSON());
                }
            }
            catch (e_25_1) { e_25 = { error: e_25_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_25) throw e_25.error; }
            }
        }
        if (Array.isArray(this.tenantAttachments)) {
            data["tenantAttachments"] = [];
            try {
                for (var _h = __values(this.tenantAttachments), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var item = _j.value;
                    data["tenantAttachments"].push(item.toJSON());
                }
            }
            catch (e_26_1) { e_26 = { error: e_26_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                }
                finally { if (e_26) throw e_26.error; }
            }
        }
        data["id"] = this.id;
        return data;
    };
    TenantDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantDto();
        result.init(json);
        return result;
    };
    return TenantDto;
}());
export { TenantDto };
var ErrorInfo = /** @class */ (function () {
    function ErrorInfo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ErrorInfo.prototype.init = function (_data) {
        var e_27, _a;
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            this.details = _data["details"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [];
                try {
                    for (var _b = __values(_data["validationErrors"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.validationErrors.push(ValidationErrorInfo.fromJS(item));
                    }
                }
                catch (e_27_1) { e_27 = { error: e_27_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_27) throw e_27.error; }
                }
            }
        }
    };
    ErrorInfo.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ErrorInfo();
        result.init(data);
        return result;
    };
    ErrorInfo.prototype.toJSON = function (data) {
        var e_28, _a;
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            try {
                for (var _b = __values(this.validationErrors), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["validationErrors"].push(item.toJSON());
                }
            }
            catch (e_28_1) { e_28 = { error: e_28_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_28) throw e_28.error; }
            }
        }
        return data;
    };
    ErrorInfo.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ErrorInfo();
        result.init(json);
        return result;
    };
    return ErrorInfo;
}());
export { ErrorInfo };
var TenantModuleDto = /** @class */ (function () {
    function TenantModuleDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantModuleDto.prototype.init = function (_data) {
        if (_data) {
            this.moduleId = _data["moduleId"];
            this.tenantModuleStatusClassificationValueId = _data["tenantModuleStatusClassificationValueId"];
            this.tenantModuleUrlText = _data["tenantModuleUrlText"];
            this.slnValidationSourceClassificationValueId = _data["slnValidationSourceClassificationValueId"];
            this.clientPriorityTierClassificationValueId = _data["clientPriorityTierClassificationValueId"];
            this.hcpUniverseProvidedFlag = _data["hcpUniverseProvidedFlag"];
            this.id = _data["id"];
        }
    };
    TenantModuleDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantModuleDto();
        result.init(data);
        return result;
    };
    TenantModuleDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["moduleId"] = this.moduleId;
        data["tenantModuleStatusClassificationValueId"] = this.tenantModuleStatusClassificationValueId;
        data["tenantModuleUrlText"] = this.tenantModuleUrlText;
        data["slnValidationSourceClassificationValueId"] = this.slnValidationSourceClassificationValueId;
        data["clientPriorityTierClassificationValueId"] = this.clientPriorityTierClassificationValueId;
        data["hcpUniverseProvidedFlag"] = this.hcpUniverseProvidedFlag;
        data["id"] = this.id;
        return data;
    };
    TenantModuleDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantModuleDto();
        result.init(json);
        return result;
    };
    return TenantModuleDto;
}());
export { TenantModuleDto };
var TenantSettingDto = /** @class */ (function () {
    function TenantSettingDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantSettingDto.prototype.init = function (_data) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
            this.description = _data["description"];
            this.id = _data["id"];
        }
    };
    TenantSettingDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantSettingDto();
        result.init(data);
        return result;
    };
    TenantSettingDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        data["description"] = this.description;
        data["id"] = this.id;
        return data;
    };
    TenantSettingDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantSettingDto();
        result.init(json);
        return result;
    };
    return TenantSettingDto;
}());
export { TenantSettingDto };
var TenantSimpleAttachmentDto = /** @class */ (function () {
    function TenantSimpleAttachmentDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantSimpleAttachmentDto.prototype.init = function (_data) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.attachmentTypeClassificationValue = _data["attachmentTypeClassificationValue"];
            this.location = _data["location"];
            this.comments = _data["comments"];
            this.fileName = _data["fileName"];
            this.fileDescription = _data["fileDescription"];
            this.id = _data["id"];
        }
    };
    TenantSimpleAttachmentDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantSimpleAttachmentDto();
        result.init(data);
        return result;
    };
    TenantSimpleAttachmentDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["attachmentTypeClassificationValue"] = this.attachmentTypeClassificationValue;
        data["location"] = this.location;
        data["comments"] = this.comments;
        data["fileName"] = this.fileName;
        data["fileDescription"] = this.fileDescription;
        data["id"] = this.id;
        return data;
    };
    TenantSimpleAttachmentDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantSimpleAttachmentDto();
        result.init(json);
        return result;
    };
    return TenantSimpleAttachmentDto;
}());
export { TenantSimpleAttachmentDto };
var ValidationErrorInfo = /** @class */ (function () {
    function ValidationErrorInfo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ValidationErrorInfo.prototype.init = function (_data) {
        var e_29, _a;
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["members"])) {
                this.members = [];
                try {
                    for (var _b = __values(_data["members"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.members.push(item);
                    }
                }
                catch (e_29_1) { e_29 = { error: e_29_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_29) throw e_29.error; }
                }
            }
        }
    };
    ValidationErrorInfo.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ValidationErrorInfo();
        result.init(data);
        return result;
    };
    ValidationErrorInfo.prototype.toJSON = function (data) {
        var e_30, _a;
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            try {
                for (var _b = __values(this.members), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["members"].push(item);
                }
            }
            catch (e_30_1) { e_30 = { error: e_30_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_30) throw e_30.error; }
            }
        }
        return data;
    };
    ValidationErrorInfo.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ValidationErrorInfo();
        result.init(json);
        return result;
    };
    return ValidationErrorInfo;
}());
export { ValidationErrorInfo };
var AjaxResponseOfIReadOnlyListOfSimpleTenantDto = /** @class */ (function () {
    function AjaxResponseOfIReadOnlyListOfSimpleTenantDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AjaxResponseOfIReadOnlyListOfSimpleTenantDto.prototype.init = function (_data) {
        var e_31, _a;
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [];
                try {
                    for (var _b = __values(_data["result"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.result.push(SimpleTenantDto.fromJS(item));
                    }
                }
                catch (e_31_1) { e_31 = { error: e_31_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_31) throw e_31.error; }
                }
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            this.__abp = _data["__abp"];
        }
    };
    AjaxResponseOfIReadOnlyListOfSimpleTenantDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AjaxResponseOfIReadOnlyListOfSimpleTenantDto();
        result.init(data);
        return result;
    };
    AjaxResponseOfIReadOnlyListOfSimpleTenantDto.prototype.toJSON = function (data) {
        var e_32, _a;
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            try {
                for (var _b = __values(this.result), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["result"].push(item.toJSON());
                }
            }
            catch (e_32_1) { e_32 = { error: e_32_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_32) throw e_32.error; }
            }
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data;
    };
    AjaxResponseOfIReadOnlyListOfSimpleTenantDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AjaxResponseOfIReadOnlyListOfSimpleTenantDto();
        result.init(json);
        return result;
    };
    return AjaxResponseOfIReadOnlyListOfSimpleTenantDto;
}());
export { AjaxResponseOfIReadOnlyListOfSimpleTenantDto };
var SimpleTenantDto = /** @class */ (function () {
    function SimpleTenantDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SimpleTenantDto.prototype.init = function (_data) {
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.daxId = _data["daxId"];
            this.prefix = _data["prefix"];
            this.moduleStatus = _data["moduleStatus"];
        }
    };
    SimpleTenantDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SimpleTenantDto();
        result.init(data);
        return result;
    };
    SimpleTenantDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["daxId"] = this.daxId;
        data["prefix"] = this.prefix;
        data["moduleStatus"] = this.moduleStatus;
        return data;
    };
    SimpleTenantDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SimpleTenantDto();
        result.init(json);
        return result;
    };
    return SimpleTenantDto;
}());
export { SimpleTenantDto };
var TenantSearchInputDto = /** @class */ (function () {
    function TenantSearchInputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantSearchInputDto.prototype.init = function (_data) {
        if (_data) {
            this.clientNameFilterText = _data["clientNameFilterText"];
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    };
    TenantSearchInputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantSearchInputDto();
        result.init(data);
        return result;
    };
    TenantSearchInputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["clientNameFilterText"] = this.clientNameFilterText;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data;
    };
    TenantSearchInputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantSearchInputDto();
        result.init(json);
        return result;
    };
    return TenantSearchInputDto;
}());
export { TenantSearchInputDto };
var AjaxResponseOfPagedResultOfTenantDto = /** @class */ (function () {
    function AjaxResponseOfPagedResultOfTenantDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AjaxResponseOfPagedResultOfTenantDto.prototype.init = function (_data) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfTenantDto.fromJS(_data["result"]) : undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            this.__abp = _data["__abp"];
        }
    };
    AjaxResponseOfPagedResultOfTenantDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AjaxResponseOfPagedResultOfTenantDto();
        result.init(data);
        return result;
    };
    AjaxResponseOfPagedResultOfTenantDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data;
    };
    AjaxResponseOfPagedResultOfTenantDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AjaxResponseOfPagedResultOfTenantDto();
        result.init(json);
        return result;
    };
    return AjaxResponseOfPagedResultOfTenantDto;
}());
export { AjaxResponseOfPagedResultOfTenantDto };
var PagedResultOfTenantDto = /** @class */ (function () {
    function PagedResultOfTenantDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultOfTenantDto.prototype.init = function (_data) {
        var e_33, _a;
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [];
                try {
                    for (var _b = __values(_data["items"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.items.push(TenantDto.fromJS(item));
                    }
                }
                catch (e_33_1) { e_33 = { error: e_33_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_33) throw e_33.error; }
                }
            }
        }
    };
    PagedResultOfTenantDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultOfTenantDto();
        result.init(data);
        return result;
    };
    PagedResultOfTenantDto.prototype.toJSON = function (data) {
        var e_34, _a;
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            try {
                for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["items"].push(item.toJSON());
                }
            }
            catch (e_34_1) { e_34 = { error: e_34_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_34) throw e_34.error; }
            }
        }
        return data;
    };
    PagedResultOfTenantDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultOfTenantDto();
        result.init(json);
        return result;
    };
    return PagedResultOfTenantDto;
}());
export { PagedResultOfTenantDto };
var PmsClientSearchInputDto = /** @class */ (function () {
    function PmsClientSearchInputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PmsClientSearchInputDto.prototype.init = function (_data) {
        if (_data) {
            this.pmsClientId = _data["pmsClientId"];
            this.pmsClientName = _data["pmsClientName"];
        }
    };
    PmsClientSearchInputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PmsClientSearchInputDto();
        result.init(data);
        return result;
    };
    PmsClientSearchInputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["pmsClientId"] = this.pmsClientId;
        data["pmsClientName"] = this.pmsClientName;
        return data;
    };
    PmsClientSearchInputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PmsClientSearchInputDto();
        result.init(json);
        return result;
    };
    return PmsClientSearchInputDto;
}());
export { PmsClientSearchInputDto };
var AjaxResponseOfIListOfPmsClientDto = /** @class */ (function () {
    function AjaxResponseOfIListOfPmsClientDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AjaxResponseOfIListOfPmsClientDto.prototype.init = function (_data) {
        var e_35, _a;
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [];
                try {
                    for (var _b = __values(_data["result"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        this.result.push(PmsClientDto.fromJS(item));
                    }
                }
                catch (e_35_1) { e_35 = { error: e_35_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_35) throw e_35.error; }
                }
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            this.__abp = _data["__abp"];
        }
    };
    AjaxResponseOfIListOfPmsClientDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AjaxResponseOfIListOfPmsClientDto();
        result.init(data);
        return result;
    };
    AjaxResponseOfIListOfPmsClientDto.prototype.toJSON = function (data) {
        var e_36, _a;
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            try {
                for (var _b = __values(this.result), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    data["result"].push(item.toJSON());
                }
            }
            catch (e_36_1) { e_36 = { error: e_36_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_36) throw e_36.error; }
            }
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data;
    };
    AjaxResponseOfIListOfPmsClientDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AjaxResponseOfIListOfPmsClientDto();
        result.init(json);
        return result;
    };
    return AjaxResponseOfIListOfPmsClientDto;
}());
export { AjaxResponseOfIListOfPmsClientDto };
var PmsClientDto = /** @class */ (function () {
    function PmsClientDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PmsClientDto.prototype.init = function (_data) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.pmsClientId = _data["pmsClientId"];
            this.pmsClientName = _data["pmsClientName"];
            this.prefix = _data["prefix"];
        }
    };
    PmsClientDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PmsClientDto();
        result.init(data);
        return result;
    };
    PmsClientDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["pmsClientId"] = this.pmsClientId;
        data["pmsClientName"] = this.pmsClientName;
        data["prefix"] = this.prefix;
        return data;
    };
    PmsClientDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PmsClientDto();
        result.init(json);
        return result;
    };
    return PmsClientDto;
}());
export { PmsClientDto };
var AjaxResponseOfValidatedPmsClientDto = /** @class */ (function () {
    function AjaxResponseOfValidatedPmsClientDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AjaxResponseOfValidatedPmsClientDto.prototype.init = function (_data) {
        if (_data) {
            this.result = _data["result"] ? ValidatedPmsClientDto.fromJS(_data["result"]) : undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            this.__abp = _data["__abp"];
        }
    };
    AjaxResponseOfValidatedPmsClientDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AjaxResponseOfValidatedPmsClientDto();
        result.init(data);
        return result;
    };
    AjaxResponseOfValidatedPmsClientDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data;
    };
    AjaxResponseOfValidatedPmsClientDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AjaxResponseOfValidatedPmsClientDto();
        result.init(json);
        return result;
    };
    return AjaxResponseOfValidatedPmsClientDto;
}());
export { AjaxResponseOfValidatedPmsClientDto };
var ValidatedPmsClientDto = /** @class */ (function () {
    function ValidatedPmsClientDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ValidatedPmsClientDto.prototype.init = function (_data) {
        if (_data) {
            this.axaptaDaxIsValid = _data["axaptaDaxIsValid"];
            this.axaptaDaxClientId = _data["axaptaDaxClientId"];
            this.axaptaDaxClientName = _data["axaptaDaxClientName"];
            this.axaptaDaxClientNotFound = _data["axaptaDaxClientNotFound"];
            this.wmsIsValid = _data["wmsIsValid"];
            this.wmsClientId = _data["wmsClientId"];
            this.wmsClientName = _data["wmsClientName"];
            this.wmsClientNotFound = _data["wmsClientNotFound"];
            this.tenantId = _data["tenantId"];
            this.pmsClientId = _data["pmsClientId"];
            this.pmsClientName = _data["pmsClientName"];
            this.prefix = _data["prefix"];
        }
    };
    ValidatedPmsClientDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ValidatedPmsClientDto();
        result.init(data);
        return result;
    };
    ValidatedPmsClientDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["axaptaDaxIsValid"] = this.axaptaDaxIsValid;
        data["axaptaDaxClientId"] = this.axaptaDaxClientId;
        data["axaptaDaxClientName"] = this.axaptaDaxClientName;
        data["axaptaDaxClientNotFound"] = this.axaptaDaxClientNotFound;
        data["wmsIsValid"] = this.wmsIsValid;
        data["wmsClientId"] = this.wmsClientId;
        data["wmsClientName"] = this.wmsClientName;
        data["wmsClientNotFound"] = this.wmsClientNotFound;
        data["tenantId"] = this.tenantId;
        data["pmsClientId"] = this.pmsClientId;
        data["pmsClientName"] = this.pmsClientName;
        data["prefix"] = this.prefix;
        return data;
    };
    ValidatedPmsClientDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ValidatedPmsClientDto();
        result.init(json);
        return result;
    };
    return ValidatedPmsClientDto;
}());
export { ValidatedPmsClientDto };
var AjaxResponseOfBoolean = /** @class */ (function () {
    function AjaxResponseOfBoolean(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AjaxResponseOfBoolean.prototype.init = function (_data) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            this.__abp = _data["__abp"];
        }
    };
    AjaxResponseOfBoolean.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AjaxResponseOfBoolean();
        result.init(data);
        return result;
    };
    AjaxResponseOfBoolean.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data;
    };
    AjaxResponseOfBoolean.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AjaxResponseOfBoolean();
        result.init(json);
        return result;
    };
    return AjaxResponseOfBoolean;
}());
export { AjaxResponseOfBoolean };
var AjaxResponse = /** @class */ (function () {
    function AjaxResponse(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AjaxResponse.prototype.init = function (_data) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            this.__abp = _data["__abp"];
        }
    };
    AjaxResponse.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AjaxResponse();
        result.init(data);
        return result;
    };
    AjaxResponse.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data;
    };
    AjaxResponse.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AjaxResponse();
        result.init(json);
        return result;
    };
    return AjaxResponse;
}());
export { AjaxResponse };
var AjaxResponseOfTenantDetailsDto = /** @class */ (function () {
    function AjaxResponseOfTenantDetailsDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AjaxResponseOfTenantDetailsDto.prototype.init = function (_data) {
        if (_data) {
            this.result = _data["result"] ? TenantDetailsDto.fromJS(_data["result"]) : undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            this.__abp = _data["__abp"];
        }
    };
    AjaxResponseOfTenantDetailsDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AjaxResponseOfTenantDetailsDto();
        result.init(data);
        return result;
    };
    AjaxResponseOfTenantDetailsDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data;
    };
    AjaxResponseOfTenantDetailsDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AjaxResponseOfTenantDetailsDto();
        result.init(json);
        return result;
    };
    return AjaxResponseOfTenantDetailsDto;
}());
export { AjaxResponseOfTenantDetailsDto };
var TenantDetailsDto = /** @class */ (function () {
    function TenantDetailsDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantDetailsDto.prototype.init = function (_data) {
        var e_37, _a, e_38, _b;
        if (_data) {
            this.id = _data["id"];
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.daxId = _data["daxId"];
            this.slnValidationSource = _data["slnValidationSource"];
            this.clientPriorityTierClassificationValueId = _data["clientPriorityTierClassificationValueId"];
            this.hcpUniverseProvidedFlag = _data["hcpUniverseProvidedFlag"];
            this.prefix = _data["prefix"];
            this.hcpsUrl = _data["hcpsUrl"];
            this.doNotHonorExclusionsUrl = _data["doNotHonorExclusionsUrl"];
            this.programsUrl = _data["programsUrl"];
            this.imageUpload = _data["imageUpload"] ? FileUpload.fromJS(_data["imageUpload"]) : undefined;
            this.imageDescription = _data["imageDescription"];
            if (Array.isArray(_data["logos"])) {
                this.logos = [];
                try {
                    for (var _c = __values(_data["logos"]), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var item = _d.value;
                        this.logos.push(TenantAttachmentDto.fromJS(item));
                    }
                }
                catch (e_37_1) { e_37 = { error: e_37_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_37) throw e_37.error; }
                }
            }
            if (Array.isArray(_data["tenantModules"])) {
                this.tenantModules = [];
                try {
                    for (var _e = __values(_data["tenantModules"]), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var item = _f.value;
                        this.tenantModules.push(TenantModuleDto.fromJS(item));
                    }
                }
                catch (e_38_1) { e_38 = { error: e_38_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_38) throw e_38.error; }
                }
            }
        }
    };
    TenantDetailsDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantDetailsDto();
        result.init(data);
        return result;
    };
    TenantDetailsDto.prototype.toJSON = function (data) {
        var e_39, _a, e_40, _b;
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["daxId"] = this.daxId;
        data["slnValidationSource"] = this.slnValidationSource;
        data["clientPriorityTierClassificationValueId"] = this.clientPriorityTierClassificationValueId;
        data["hcpUniverseProvidedFlag"] = this.hcpUniverseProvidedFlag;
        data["prefix"] = this.prefix;
        data["hcpsUrl"] = this.hcpsUrl;
        data["doNotHonorExclusionsUrl"] = this.doNotHonorExclusionsUrl;
        data["programsUrl"] = this.programsUrl;
        data["imageUpload"] = this.imageUpload ? this.imageUpload.toJSON() : undefined;
        data["imageDescription"] = this.imageDescription;
        if (Array.isArray(this.logos)) {
            data["logos"] = [];
            try {
                for (var _c = __values(this.logos), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var item = _d.value;
                    data["logos"].push(item.toJSON());
                }
            }
            catch (e_39_1) { e_39 = { error: e_39_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_39) throw e_39.error; }
            }
        }
        if (Array.isArray(this.tenantModules)) {
            data["tenantModules"] = [];
            try {
                for (var _e = __values(this.tenantModules), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var item = _f.value;
                    data["tenantModules"].push(item.toJSON());
                }
            }
            catch (e_40_1) { e_40 = { error: e_40_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_40) throw e_40.error; }
            }
        }
        return data;
    };
    TenantDetailsDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantDetailsDto();
        result.init(json);
        return result;
    };
    return TenantDetailsDto;
}());
export { TenantDetailsDto };
var FileUpload = /** @class */ (function () {
    function FileUpload(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    FileUpload.prototype.init = function (_data) {
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileDescription = _data["fileDescription"];
            this.fileType = _data["fileType"];
            this.base64FileContent = _data["base64FileContent"];
            this.location = _data["location"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.newFlag = _data["newFlag"];
            this.duplicateFileName = _data["duplicateFileName"];
        }
    };
    FileUpload.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new FileUpload();
        result.init(data);
        return result;
    };
    FileUpload.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileDescription"] = this.fileDescription;
        data["fileType"] = this.fileType;
        data["base64FileContent"] = this.base64FileContent;
        data["location"] = this.location;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["newFlag"] = this.newFlag;
        data["duplicateFileName"] = this.duplicateFileName;
        return data;
    };
    FileUpload.prototype.clone = function () {
        var json = this.toJSON();
        var result = new FileUpload();
        result.init(json);
        return result;
    };
    return FileUpload;
}());
export { FileUpload };
var TenantAttachmentDto = /** @class */ (function () {
    function TenantAttachmentDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantAttachmentDto.prototype.init = function (_data) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.attachmentTypeClassificationValue = _data["attachmentTypeClassificationValue"];
            this.location = _data["location"];
            this.comments = _data["comments"];
            this.fileName = _data["fileName"];
            this.fileDescription = _data["fileDescription"];
            this.fileType = _data["fileType"];
            this.creatorUserId = _data["creatorUserId"];
            this.newFlag = _data["newFlag"];
            this.base64FileContent = _data["base64FileContent"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.id = _data["id"];
        }
    };
    TenantAttachmentDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantAttachmentDto();
        result.init(data);
        return result;
    };
    TenantAttachmentDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["attachmentTypeClassificationValue"] = this.attachmentTypeClassificationValue;
        data["location"] = this.location;
        data["comments"] = this.comments;
        data["fileName"] = this.fileName;
        data["fileDescription"] = this.fileDescription;
        data["fileType"] = this.fileType;
        data["creatorUserId"] = this.creatorUserId;
        data["newFlag"] = this.newFlag;
        data["base64FileContent"] = this.base64FileContent;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["id"] = this.id;
        return data;
    };
    TenantAttachmentDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantAttachmentDto();
        result.init(json);
        return result;
    };
    return TenantAttachmentDto;
}());
export { TenantAttachmentDto };
var AjaxResponseOfTenantAttachmentDto = /** @class */ (function () {
    function AjaxResponseOfTenantAttachmentDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AjaxResponseOfTenantAttachmentDto.prototype.init = function (_data) {
        if (_data) {
            this.result = _data["result"] ? TenantAttachmentDto.fromJS(_data["result"]) : undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            this.__abp = _data["__abp"];
        }
    };
    AjaxResponseOfTenantAttachmentDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AjaxResponseOfTenantAttachmentDto();
        result.init(data);
        return result;
    };
    AjaxResponseOfTenantAttachmentDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data;
    };
    AjaxResponseOfTenantAttachmentDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AjaxResponseOfTenantAttachmentDto();
        result.init(json);
        return result;
    };
    return AjaxResponseOfTenantAttachmentDto;
}());
export { AjaxResponseOfTenantAttachmentDto };
var SwaggerException = /** @class */ (function (_super) {
    __extends(SwaggerException, _super);
    function SwaggerException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isSwaggerException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    SwaggerException.isSwaggerException = function (obj) {
        return obj.isSwaggerException === true;
    };
    return SwaggerException;
}(Error));
export { SwaggerException };
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}
function blobToText(blob) {
    return new Observable(function (observer) {
        if (!blob) {
            observer.next("");
            observer.complete();
        }
        else {
            var reader = new FileReader();
            reader.onload = function (event) {
                observer.next(event.target.result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
//# sourceMappingURL=tenant.js.map
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.2.0 (NJsonSchema v10.1.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const OM_OFFER_API_BASE_URL = new InjectionToken<string>('OM_OFFER_API_BASE_URL');

export class ServiceBaseConfig {
  public key: string;
}

export class ServiceBase {
  private readonly apiKey: string;
  private readonly apimHeaderName: string = 'Ocp-Apim-Subscription-Key';
  private readonly tenantIdHeaderName: string = 'TenantId';
  private readonly tenantIdLocalStorageKey: string = 'samplicity-dtp-current-client';
  private readonly idTokenKey: string = 'samplicity-id-token';

  constructor(config: ServiceBaseConfig) {
    this.apiKey = config.key;
  }

  protected transformOptions(options: any) {
    let headers: HttpHeaders = options.headers;

    if (this.apiKey) {
      headers = headers.append(this.apimHeaderName, this.apiKey);
    }

    const tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
    if (tenantId) {
      headers = headers.append(this.tenantIdHeaderName, tenantId);
    }

    const token = localStorage.getItem(this.idTokenKey);
    if (token) {
      headers = headers.append('Authorization', 'Bearer ' + token);
    }

    options.headers = headers;

    return Promise.resolve(options);
  }
}

@Injectable()
export class OrderManagementOffer extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(ServiceBaseConfig) configuration: ServiceBaseConfig, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(OM_OFFER_API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param id (optional) 
     * @param filterLinesByLiveProgramConfiguration (optional) 
     * @return Success
     */
    getOffer(id: string | null | undefined, filterLinesByLiveProgramConfiguration: boolean | null | undefined): Observable<AjaxResponseOfOfferDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Offer/GetOffer?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (filterLinesByLiveProgramConfiguration !== undefined)
            url_ += "filterLinesByLiveProgramConfiguration=" + encodeURIComponent("" + filterLinesByLiveProgramConfiguration) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOffer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOffer(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfOfferDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfOfferDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOffer(response: HttpResponseBase): Observable<AjaxResponseOfOfferDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfOfferDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfOfferDetailsDto>(<any>null);
    }

    /**
     * @param options (optional) 
     * @return Success
     */
    resendSrf(options: OfferResendSrfOptionsDto | null | undefined): Observable<AjaxResponseOfOfferDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Offer/ResendSrf";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(options);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processResendSrf(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResendSrf(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfOfferDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfOfferDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processResendSrf(response: HttpResponseBase): Observable<AjaxResponseOfOfferDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfOfferDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfOfferDetailsDto>(<any>null);
    }

    /**
     * @param offerId (optional) 
     * @return Success
     */
    viewSrf(offerId: string | null | undefined): Observable<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/Offer/ViewSrf?";
        if (offerId !== undefined)
            url_ += "offerId=" + encodeURIComponent("" + offerId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processViewSrf(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processViewSrf(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfString>><any>Observable.throw(response_);
        });
    }

    protected processViewSrf(response: HttpResponseBase): Observable<AjaxResponseOfString> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfString.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param offerId (optional) 
     * @return Success
     */
    regenerateSrf(offerId: string | null | undefined): Observable<AjaxResponseOfOfferDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Offer/RegenerateSrf?";
        if (offerId !== undefined)
            url_ += "offerId=" + encodeURIComponent("" + offerId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processRegenerateSrf(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegenerateSrf(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfOfferDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfOfferDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processRegenerateSrf(response: HttpResponseBase): Observable<AjaxResponseOfOfferDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfOfferDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfOfferDetailsDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchOffers(filter: OfferSearchFilterDto | null | undefined): Observable<AjaxResponseOfPagedResultOfOfferSearchDto> {
        let url_ = this.baseUrl + "/api/services/app/Offer/SearchOffers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchOffers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchOffers(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPagedResultOfOfferSearchDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPagedResultOfOfferSearchDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchOffers(response: HttpResponseBase): Observable<AjaxResponseOfPagedResultOfOfferSearchDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPagedResultOfOfferSearchDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPagedResultOfOfferSearchDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchOfferByFormId(filter: OfferByFormIdSearchFilterDto | null | undefined): Observable<AjaxResponseOfListOfSearchOfferByFormIdResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Offer/SearchOfferByFormId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchOfferByFormId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchOfferByFormId(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfSearchOfferByFormIdResultDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfSearchOfferByFormIdResultDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchOfferByFormId(response: HttpResponseBase): Observable<AjaxResponseOfListOfSearchOfferByFormIdResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfSearchOfferByFormIdResultDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfSearchOfferByFormIdResultDto>(<any>null);
    }

    /**
     * @param programId (optional) 
     * @return Success
     */
    generateOfferDataFromTarget(programId: string | null | undefined): Observable<AjaxResponseOfGenerateOfferResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Offer/GenerateOfferDataFromTarget?";
        if (programId !== undefined)
            url_ += "programId=" + encodeURIComponent("" + programId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGenerateOfferDataFromTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateOfferDataFromTarget(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfGenerateOfferResultDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfGenerateOfferResultDto>><any>Observable.throw(response_);
        });
    }

    protected processGenerateOfferDataFromTarget(response: HttpResponseBase): Observable<AjaxResponseOfGenerateOfferResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfGenerateOfferResultDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfGenerateOfferResultDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    uploadOfferFile(dto: OfferFileUploadDto | null | undefined): Observable<AjaxResponseOfOfferFileUploadDto> {
        let url_ = this.baseUrl + "/api/services/app/Offer/UploadOfferFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUploadOfferFile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadOfferFile(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfOfferFileUploadDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfOfferFileUploadDto>><any>Observable.throw(response_);
        });
    }

    protected processUploadOfferFile(response: HttpResponseBase): Observable<AjaxResponseOfOfferFileUploadDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfOfferFileUploadDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfOfferFileUploadDto>(<any>null);
    }
}

export class AjaxResponseOfOfferDetailsDto implements IAjaxResponseOfOfferDetailsDto {
    result: OfferDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfOfferDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? OfferDetailsDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfOfferDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfOfferDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfOfferDetailsDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfOfferDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfOfferDetailsDto {
    result: OfferDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class OfferDetailsDto implements IOfferDetailsDto {
    id: string | undefined;
    requestDate: Date | undefined;
    offerId: string | undefined;
    parentOffer: SimpleOfferDto | undefined;
    childOffers: SimpleOfferDto[] | undefined;
    formId: string | undefined;
    externalOfferId: string | undefined;
    resendInitiated: boolean | undefined;
    srfSentDate: string | undefined;
    offerStatusClassificationValueId: string | undefined;
    programStatusId: string | undefined;
    isOfferStatusError: boolean | undefined;
    isViewSrfAvailable: boolean | undefined;
    isRegenerateSrfAvailable: boolean | undefined;
    institutionFlag: boolean | undefined;
    repDrivenFlag: boolean | undefined;
    offerLifeCycle: StepperLifeCycleStageDto[] | undefined;
    offerLines: OfferLineDto[] | undefined;
    requestorHcpId: string | undefined;
    requestorKnipperHcpId: string | undefined;
    requestorCompanyName: string | undefined;
    requestorName: string | undefined;
    requestorFirstName: string | undefined;
    requestorMiddleName: string | undefined;
    requestorLastName: string | undefined;
    requestorSuffixId: string | undefined;
    requestorProfessionalDesignationId: string | undefined;
    requestorSpecialtyClassificationValueId: string | undefined;
    requestorStateLicenseNbr: string | undefined;
    requestorStateLicenseStateCode: string | undefined;
    requestorDEANbr: string | undefined;
    requestorSAN: string | undefined;
    requestorAddress1Text: string | undefined;
    requestorAddress2Text: string | undefined;
    requestorAddress3Text: string | undefined;
    requestorAddress4Text: string | undefined;
    requestorCityName: string | undefined;
    requestorZipCode: string | undefined;
    requestorStateCode: string | undefined;
    requestorEmailAddressText: string | undefined;
    requestorPhoneNbr: string | undefined;
    requestorPhoneExtensionNbr: string | undefined;
    requestorFaxNbr: string | undefined;
    recipientHcpId: string | undefined;
    recipientKnipperHcpId: string | undefined;
    recipientCompanyName: string | undefined;
    recipientName: string | undefined;
    recipientFirstName: string | undefined;
    recipientMiddleName: string | undefined;
    recipientLastName: string | undefined;
    recipientSuffixId: string | undefined;
    recipientProfessionalDesignationId: string | undefined;
    recipientSpecialtyClassificationValueId: string | undefined;
    recipientStateLicenseNbr: string | undefined;
    recipientStateLicenseStateCode: string | undefined;
    recipientDEANbr: string | undefined;
    recipientSAN: string | undefined;
    recipientAddress1Text: string | undefined;
    recipientAddress2Text: string | undefined;
    recipientAddress3Text: string | undefined;
    recipientAddress4Text: string | undefined;
    recipientCityName: string | undefined;
    recipientZipCode: string | undefined;
    recipientStateCode: string | undefined;
    recipientEmailAddressText: string | undefined;
    recipientPhoneNbr: string | undefined;
    recipientPhoneExtensionNbr: string | undefined;
    recipientFaxNbr: string | undefined;
    salesRepName: string | undefined;
    salesRepFirstName: string | undefined;
    salesRepLastName: string | undefined;
    salesRepEmailAddressText: string | undefined;
    salesRepNbr: string | undefined;
    territoryCode: string | undefined;
    offerHistory: OfferHistoryDto[] | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IOfferDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.requestDate = _data["requestDate"] ? new Date(_data["requestDate"].toString()) : <any>undefined;
            this.offerId = _data["offerId"];
            this.parentOffer = _data["parentOffer"] ? SimpleOfferDto.fromJS(_data["parentOffer"]) : <any>undefined;
            if (Array.isArray(_data["childOffers"])) {
                this.childOffers = [] as any;
                for (let item of _data["childOffers"])
                    this.childOffers.push(SimpleOfferDto.fromJS(item));
            }
            this.formId = _data["formId"];
            this.externalOfferId = _data["externalOfferId"];
            this.resendInitiated = _data["resendInitiated"];
            this.srfSentDate = _data["srfSentDate"];
            this.offerStatusClassificationValueId = _data["offerStatusClassificationValueId"];
            this.programStatusId = _data["programStatusId"];
            this.isOfferStatusError = _data["isOfferStatusError"];
            this.isViewSrfAvailable = _data["isViewSrfAvailable"];
            this.isRegenerateSrfAvailable = _data["isRegenerateSrfAvailable"];
            this.institutionFlag = _data["institutionFlag"];
            this.repDrivenFlag = _data["repDrivenFlag"];
            if (Array.isArray(_data["offerLifeCycle"])) {
                this.offerLifeCycle = [] as any;
                for (let item of _data["offerLifeCycle"])
                    this.offerLifeCycle.push(StepperLifeCycleStageDto.fromJS(item));
            }
            if (Array.isArray(_data["offerLines"])) {
                this.offerLines = [] as any;
                for (let item of _data["offerLines"])
                    this.offerLines.push(OfferLineDto.fromJS(item));
            }
            this.requestorHcpId = _data["requestorHcpId"];
            this.requestorKnipperHcpId = _data["requestorKnipperHcpId"];
            this.requestorCompanyName = _data["requestorCompanyName"];
            this.requestorName = _data["requestorName"];
            this.requestorFirstName = _data["requestorFirstName"];
            this.requestorMiddleName = _data["requestorMiddleName"];
            this.requestorLastName = _data["requestorLastName"];
            this.requestorSuffixId = _data["requestorSuffixId"];
            this.requestorProfessionalDesignationId = _data["requestorProfessionalDesignationId"];
            this.requestorSpecialtyClassificationValueId = _data["requestorSpecialtyClassificationValueId"];
            this.requestorStateLicenseNbr = _data["requestorStateLicenseNbr"];
            this.requestorStateLicenseStateCode = _data["requestorStateLicenseStateCode"];
            this.requestorDEANbr = _data["requestorDEANbr"];
            this.requestorSAN = _data["requestorSAN"];
            this.requestorAddress1Text = _data["requestorAddress1Text"];
            this.requestorAddress2Text = _data["requestorAddress2Text"];
            this.requestorAddress3Text = _data["requestorAddress3Text"];
            this.requestorAddress4Text = _data["requestorAddress4Text"];
            this.requestorCityName = _data["requestorCityName"];
            this.requestorZipCode = _data["requestorZipCode"];
            this.requestorStateCode = _data["requestorStateCode"];
            this.requestorEmailAddressText = _data["requestorEmailAddressText"];
            this.requestorPhoneNbr = _data["requestorPhoneNbr"];
            this.requestorPhoneExtensionNbr = _data["requestorPhoneExtensionNbr"];
            this.requestorFaxNbr = _data["requestorFaxNbr"];
            this.recipientHcpId = _data["recipientHcpId"];
            this.recipientKnipperHcpId = _data["recipientKnipperHcpId"];
            this.recipientCompanyName = _data["recipientCompanyName"];
            this.recipientName = _data["recipientName"];
            this.recipientFirstName = _data["recipientFirstName"];
            this.recipientMiddleName = _data["recipientMiddleName"];
            this.recipientLastName = _data["recipientLastName"];
            this.recipientSuffixId = _data["recipientSuffixId"];
            this.recipientProfessionalDesignationId = _data["recipientProfessionalDesignationId"];
            this.recipientSpecialtyClassificationValueId = _data["recipientSpecialtyClassificationValueId"];
            this.recipientStateLicenseNbr = _data["recipientStateLicenseNbr"];
            this.recipientStateLicenseStateCode = _data["recipientStateLicenseStateCode"];
            this.recipientDEANbr = _data["recipientDEANbr"];
            this.recipientSAN = _data["recipientSAN"];
            this.recipientAddress1Text = _data["recipientAddress1Text"];
            this.recipientAddress2Text = _data["recipientAddress2Text"];
            this.recipientAddress3Text = _data["recipientAddress3Text"];
            this.recipientAddress4Text = _data["recipientAddress4Text"];
            this.recipientCityName = _data["recipientCityName"];
            this.recipientZipCode = _data["recipientZipCode"];
            this.recipientStateCode = _data["recipientStateCode"];
            this.recipientEmailAddressText = _data["recipientEmailAddressText"];
            this.recipientPhoneNbr = _data["recipientPhoneNbr"];
            this.recipientPhoneExtensionNbr = _data["recipientPhoneExtensionNbr"];
            this.recipientFaxNbr = _data["recipientFaxNbr"];
            this.salesRepName = _data["salesRepName"];
            this.salesRepFirstName = _data["salesRepFirstName"];
            this.salesRepLastName = _data["salesRepLastName"];
            this.salesRepEmailAddressText = _data["salesRepEmailAddressText"];
            this.salesRepNbr = _data["salesRepNbr"];
            this.territoryCode = _data["territoryCode"];
            if (Array.isArray(_data["offerHistory"])) {
                this.offerHistory = [] as any;
                for (let item of _data["offerHistory"])
                    this.offerHistory.push(OfferHistoryDto.fromJS(item));
            }
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OfferDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OfferDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["offerId"] = this.offerId;
        data["parentOffer"] = this.parentOffer ? this.parentOffer.toJSON() : <any>undefined;
        if (Array.isArray(this.childOffers)) {
            data["childOffers"] = [];
            for (let item of this.childOffers)
                data["childOffers"].push(item.toJSON());
        }
        data["formId"] = this.formId;
        data["externalOfferId"] = this.externalOfferId;
        data["resendInitiated"] = this.resendInitiated;
        data["srfSentDate"] = this.srfSentDate;
        data["offerStatusClassificationValueId"] = this.offerStatusClassificationValueId;
        data["programStatusId"] = this.programStatusId;
        data["isOfferStatusError"] = this.isOfferStatusError;
        data["isViewSrfAvailable"] = this.isViewSrfAvailable;
        data["isRegenerateSrfAvailable"] = this.isRegenerateSrfAvailable;
        data["institutionFlag"] = this.institutionFlag;
        data["repDrivenFlag"] = this.repDrivenFlag;
        if (Array.isArray(this.offerLifeCycle)) {
            data["offerLifeCycle"] = [];
            for (let item of this.offerLifeCycle)
                data["offerLifeCycle"].push(item.toJSON());
        }
        if (Array.isArray(this.offerLines)) {
            data["offerLines"] = [];
            for (let item of this.offerLines)
                data["offerLines"].push(item.toJSON());
        }
        data["requestorHcpId"] = this.requestorHcpId;
        data["requestorKnipperHcpId"] = this.requestorKnipperHcpId;
        data["requestorCompanyName"] = this.requestorCompanyName;
        data["requestorName"] = this.requestorName;
        data["requestorFirstName"] = this.requestorFirstName;
        data["requestorMiddleName"] = this.requestorMiddleName;
        data["requestorLastName"] = this.requestorLastName;
        data["requestorSuffixId"] = this.requestorSuffixId;
        data["requestorProfessionalDesignationId"] = this.requestorProfessionalDesignationId;
        data["requestorSpecialtyClassificationValueId"] = this.requestorSpecialtyClassificationValueId;
        data["requestorStateLicenseNbr"] = this.requestorStateLicenseNbr;
        data["requestorStateLicenseStateCode"] = this.requestorStateLicenseStateCode;
        data["requestorDEANbr"] = this.requestorDEANbr;
        data["requestorSAN"] = this.requestorSAN;
        data["requestorAddress1Text"] = this.requestorAddress1Text;
        data["requestorAddress2Text"] = this.requestorAddress2Text;
        data["requestorAddress3Text"] = this.requestorAddress3Text;
        data["requestorAddress4Text"] = this.requestorAddress4Text;
        data["requestorCityName"] = this.requestorCityName;
        data["requestorZipCode"] = this.requestorZipCode;
        data["requestorStateCode"] = this.requestorStateCode;
        data["requestorEmailAddressText"] = this.requestorEmailAddressText;
        data["requestorPhoneNbr"] = this.requestorPhoneNbr;
        data["requestorPhoneExtensionNbr"] = this.requestorPhoneExtensionNbr;
        data["requestorFaxNbr"] = this.requestorFaxNbr;
        data["recipientHcpId"] = this.recipientHcpId;
        data["recipientKnipperHcpId"] = this.recipientKnipperHcpId;
        data["recipientCompanyName"] = this.recipientCompanyName;
        data["recipientName"] = this.recipientName;
        data["recipientFirstName"] = this.recipientFirstName;
        data["recipientMiddleName"] = this.recipientMiddleName;
        data["recipientLastName"] = this.recipientLastName;
        data["recipientSuffixId"] = this.recipientSuffixId;
        data["recipientProfessionalDesignationId"] = this.recipientProfessionalDesignationId;
        data["recipientSpecialtyClassificationValueId"] = this.recipientSpecialtyClassificationValueId;
        data["recipientStateLicenseNbr"] = this.recipientStateLicenseNbr;
        data["recipientStateLicenseStateCode"] = this.recipientStateLicenseStateCode;
        data["recipientDEANbr"] = this.recipientDEANbr;
        data["recipientSAN"] = this.recipientSAN;
        data["recipientAddress1Text"] = this.recipientAddress1Text;
        data["recipientAddress2Text"] = this.recipientAddress2Text;
        data["recipientAddress3Text"] = this.recipientAddress3Text;
        data["recipientAddress4Text"] = this.recipientAddress4Text;
        data["recipientCityName"] = this.recipientCityName;
        data["recipientZipCode"] = this.recipientZipCode;
        data["recipientStateCode"] = this.recipientStateCode;
        data["recipientEmailAddressText"] = this.recipientEmailAddressText;
        data["recipientPhoneNbr"] = this.recipientPhoneNbr;
        data["recipientPhoneExtensionNbr"] = this.recipientPhoneExtensionNbr;
        data["recipientFaxNbr"] = this.recipientFaxNbr;
        data["salesRepName"] = this.salesRepName;
        data["salesRepFirstName"] = this.salesRepFirstName;
        data["salesRepLastName"] = this.salesRepLastName;
        data["salesRepEmailAddressText"] = this.salesRepEmailAddressText;
        data["salesRepNbr"] = this.salesRepNbr;
        data["territoryCode"] = this.territoryCode;
        if (Array.isArray(this.offerHistory)) {
            data["offerHistory"] = [];
            for (let item of this.offerHistory)
                data["offerHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): OfferDetailsDto {
        const json = this.toJSON();
        let result = new OfferDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IOfferDetailsDto {
    id: string | undefined;
    requestDate: Date | undefined;
    offerId: string | undefined;
    parentOffer: SimpleOfferDto | undefined;
    childOffers: SimpleOfferDto[] | undefined;
    formId: string | undefined;
    externalOfferId: string | undefined;
    resendInitiated: boolean | undefined;
    srfSentDate: string | undefined;
    offerStatusClassificationValueId: string | undefined;
    programStatusId: string | undefined;
    isOfferStatusError: boolean | undefined;
    isViewSrfAvailable: boolean | undefined;
    isRegenerateSrfAvailable: boolean | undefined;
    institutionFlag: boolean | undefined;
    repDrivenFlag: boolean | undefined;
    offerLifeCycle: StepperLifeCycleStageDto[] | undefined;
    offerLines: OfferLineDto[] | undefined;
    requestorHcpId: string | undefined;
    requestorKnipperHcpId: string | undefined;
    requestorCompanyName: string | undefined;
    requestorName: string | undefined;
    requestorFirstName: string | undefined;
    requestorMiddleName: string | undefined;
    requestorLastName: string | undefined;
    requestorSuffixId: string | undefined;
    requestorProfessionalDesignationId: string | undefined;
    requestorSpecialtyClassificationValueId: string | undefined;
    requestorStateLicenseNbr: string | undefined;
    requestorStateLicenseStateCode: string | undefined;
    requestorDEANbr: string | undefined;
    requestorSAN: string | undefined;
    requestorAddress1Text: string | undefined;
    requestorAddress2Text: string | undefined;
    requestorAddress3Text: string | undefined;
    requestorAddress4Text: string | undefined;
    requestorCityName: string | undefined;
    requestorZipCode: string | undefined;
    requestorStateCode: string | undefined;
    requestorEmailAddressText: string | undefined;
    requestorPhoneNbr: string | undefined;
    requestorPhoneExtensionNbr: string | undefined;
    requestorFaxNbr: string | undefined;
    recipientHcpId: string | undefined;
    recipientKnipperHcpId: string | undefined;
    recipientCompanyName: string | undefined;
    recipientName: string | undefined;
    recipientFirstName: string | undefined;
    recipientMiddleName: string | undefined;
    recipientLastName: string | undefined;
    recipientSuffixId: string | undefined;
    recipientProfessionalDesignationId: string | undefined;
    recipientSpecialtyClassificationValueId: string | undefined;
    recipientStateLicenseNbr: string | undefined;
    recipientStateLicenseStateCode: string | undefined;
    recipientDEANbr: string | undefined;
    recipientSAN: string | undefined;
    recipientAddress1Text: string | undefined;
    recipientAddress2Text: string | undefined;
    recipientAddress3Text: string | undefined;
    recipientAddress4Text: string | undefined;
    recipientCityName: string | undefined;
    recipientZipCode: string | undefined;
    recipientStateCode: string | undefined;
    recipientEmailAddressText: string | undefined;
    recipientPhoneNbr: string | undefined;
    recipientPhoneExtensionNbr: string | undefined;
    recipientFaxNbr: string | undefined;
    salesRepName: string | undefined;
    salesRepFirstName: string | undefined;
    salesRepLastName: string | undefined;
    salesRepEmailAddressText: string | undefined;
    salesRepNbr: string | undefined;
    territoryCode: string | undefined;
    offerHistory: OfferHistoryDto[] | undefined;
    names: LocalizedValue[] | undefined;
}

export class ErrorInfo implements IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;

    constructor(data?: IErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            this.details = _data["details"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors.push(ValidationErrorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ErrorInfo {
        const json = this.toJSON();
        let result = new ErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;
}

export class SimpleOfferDto implements ISimpleOfferDto {
    id: string | undefined;
    offerId: string | undefined;

    constructor(data?: ISimpleOfferDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.offerId = _data["offerId"];
        }
    }

    static fromJS(data: any): SimpleOfferDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleOfferDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["offerId"] = this.offerId;
        return data; 
    }

    clone(): SimpleOfferDto {
        const json = this.toJSON();
        let result = new SimpleOfferDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleOfferDto {
    id: string | undefined;
    offerId: string | undefined;
}

export class StepperLifeCycleStageDto implements IStepperLifeCycleStageDto {
    classificationValueId: string | undefined;
    index: number | undefined;
    status: StepperLifeCycleStageDtoStatus | undefined;

    constructor(data?: IStepperLifeCycleStageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.classificationValueId = _data["classificationValueId"];
            this.index = _data["index"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): StepperLifeCycleStageDto {
        data = typeof data === 'object' ? data : {};
        let result = new StepperLifeCycleStageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["classificationValueId"] = this.classificationValueId;
        data["index"] = this.index;
        data["status"] = this.status;
        return data; 
    }

    clone(): StepperLifeCycleStageDto {
        const json = this.toJSON();
        let result = new StepperLifeCycleStageDto();
        result.init(json);
        return result;
    }
}

export interface IStepperLifeCycleStageDto {
    classificationValueId: string | undefined;
    index: number | undefined;
    status: StepperLifeCycleStageDtoStatus | undefined;
}

export class OfferLineDto implements IOfferLineDto {
    id: string | undefined;
    productId: string | undefined;
    wmsProductId: string | undefined;
    wmsProductName: string | undefined;
    offeredQty: string | undefined;
    distributionUoMClassificationValueId: string | undefined;
    displayQuantity: string | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IOfferLineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productId = _data["productId"];
            this.wmsProductId = _data["wmsProductId"];
            this.wmsProductName = _data["wmsProductName"];
            this.offeredQty = _data["offeredQty"];
            this.distributionUoMClassificationValueId = _data["distributionUoMClassificationValueId"];
            this.displayQuantity = _data["displayQuantity"];
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OfferLineDto {
        data = typeof data === 'object' ? data : {};
        let result = new OfferLineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productId"] = this.productId;
        data["wmsProductId"] = this.wmsProductId;
        data["wmsProductName"] = this.wmsProductName;
        data["offeredQty"] = this.offeredQty;
        data["distributionUoMClassificationValueId"] = this.distributionUoMClassificationValueId;
        data["displayQuantity"] = this.displayQuantity;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): OfferLineDto {
        const json = this.toJSON();
        let result = new OfferLineDto();
        result.init(json);
        return result;
    }
}

export interface IOfferLineDto {
    id: string | undefined;
    productId: string | undefined;
    wmsProductId: string | undefined;
    wmsProductName: string | undefined;
    offeredQty: string | undefined;
    distributionUoMClassificationValueId: string | undefined;
    displayQuantity: string | undefined;
    names: LocalizedValue[] | undefined;
}

export class OfferHistoryDto implements IOfferHistoryDto {
    id: string | undefined;
    isOfferStatusError: boolean | undefined;
    offerStatusClassificationValueId: string | undefined;
    activityTypeClassificationValueId: string | undefined;
    contactMethodDescription: string | undefined;
    creationTime: Date | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IOfferHistoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isOfferStatusError = _data["isOfferStatusError"];
            this.offerStatusClassificationValueId = _data["offerStatusClassificationValueId"];
            this.activityTypeClassificationValueId = _data["activityTypeClassificationValueId"];
            this.contactMethodDescription = _data["contactMethodDescription"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OfferHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new OfferHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isOfferStatusError"] = this.isOfferStatusError;
        data["offerStatusClassificationValueId"] = this.offerStatusClassificationValueId;
        data["activityTypeClassificationValueId"] = this.activityTypeClassificationValueId;
        data["contactMethodDescription"] = this.contactMethodDescription;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): OfferHistoryDto {
        const json = this.toJSON();
        let result = new OfferHistoryDto();
        result.init(json);
        return result;
    }
}

export interface IOfferHistoryDto {
    id: string | undefined;
    isOfferStatusError: boolean | undefined;
    offerStatusClassificationValueId: string | undefined;
    activityTypeClassificationValueId: string | undefined;
    contactMethodDescription: string | undefined;
    creationTime: Date | undefined;
    names: LocalizedValue[] | undefined;
}

export class LocalizedValue implements ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;

    constructor(data?: ILocalizedValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LocalizedValue {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language;
        data["value"] = this.value;
        return data; 
    }

    clone(): LocalizedValue {
        const json = this.toJSON();
        let result = new LocalizedValue();
        result.init(json);
        return result;
    }
}

export interface ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;
}

export class ValidationErrorInfo implements IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;

    constructor(data?: IValidationErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members.push(item);
            }
        }
    }

    static fromJS(data: any): ValidationErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }

    clone(): ValidationErrorInfo {
        const json = this.toJSON();
        let result = new ValidationErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;
}

export class OfferResendSrfOptionsDto implements IOfferResendSrfOptionsDto {
    contactMethodTypeId: string | undefined;
    contactMethodDescription: string | undefined;
    id: string | undefined;

    constructor(data?: IOfferResendSrfOptionsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.contactMethodTypeId = _data["contactMethodTypeId"];
            this.contactMethodDescription = _data["contactMethodDescription"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OfferResendSrfOptionsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OfferResendSrfOptionsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contactMethodTypeId"] = this.contactMethodTypeId;
        data["contactMethodDescription"] = this.contactMethodDescription;
        data["id"] = this.id;
        return data; 
    }

    clone(): OfferResendSrfOptionsDto {
        const json = this.toJSON();
        let result = new OfferResendSrfOptionsDto();
        result.init(json);
        return result;
    }
}

export interface IOfferResendSrfOptionsDto {
    contactMethodTypeId: string | undefined;
    contactMethodDescription: string | undefined;
    id: string | undefined;
}

export class AjaxResponseOfString implements IAjaxResponseOfString {
    result: string | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfString {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfString {
        const json = this.toJSON();
        let result = new AjaxResponseOfString();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfString {
    result: string | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class OfferSearchFilterDto implements IOfferSearchFilterDto {
    programId: string | undefined;
    offerId: string | undefined;
    externalOfferId: string | undefined;
    formId: string | undefined;
    offerStatusClassificationValueIds: string[] | undefined;
    srfGenerationSourceIds: string[] | undefined;
    requestorHcpLastName: string | undefined;
    requestorHcpFirstName: string | undefined;
    requestorHcpKId: string | undefined;
    salesRepFirstName: string | undefined;
    salesRepLastName: string | undefined;
    salesRepId: string | undefined;
    recipientInstitutionName: string | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: IOfferSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.offerId = _data["offerId"];
            this.externalOfferId = _data["externalOfferId"];
            this.formId = _data["formId"];
            if (Array.isArray(_data["offerStatusClassificationValueIds"])) {
                this.offerStatusClassificationValueIds = [] as any;
                for (let item of _data["offerStatusClassificationValueIds"])
                    this.offerStatusClassificationValueIds.push(item);
            }
            if (Array.isArray(_data["srfGenerationSourceIds"])) {
                this.srfGenerationSourceIds = [] as any;
                for (let item of _data["srfGenerationSourceIds"])
                    this.srfGenerationSourceIds.push(item);
            }
            this.requestorHcpLastName = _data["requestorHcpLastName"];
            this.requestorHcpFirstName = _data["requestorHcpFirstName"];
            this.requestorHcpKId = _data["requestorHcpKId"];
            this.salesRepFirstName = _data["salesRepFirstName"];
            this.salesRepLastName = _data["salesRepLastName"];
            this.salesRepId = _data["salesRepId"];
            this.recipientInstitutionName = _data["recipientInstitutionName"];
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): OfferSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new OfferSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["offerId"] = this.offerId;
        data["externalOfferId"] = this.externalOfferId;
        data["formId"] = this.formId;
        if (Array.isArray(this.offerStatusClassificationValueIds)) {
            data["offerStatusClassificationValueIds"] = [];
            for (let item of this.offerStatusClassificationValueIds)
                data["offerStatusClassificationValueIds"].push(item);
        }
        if (Array.isArray(this.srfGenerationSourceIds)) {
            data["srfGenerationSourceIds"] = [];
            for (let item of this.srfGenerationSourceIds)
                data["srfGenerationSourceIds"].push(item);
        }
        data["requestorHcpLastName"] = this.requestorHcpLastName;
        data["requestorHcpFirstName"] = this.requestorHcpFirstName;
        data["requestorHcpKId"] = this.requestorHcpKId;
        data["salesRepFirstName"] = this.salesRepFirstName;
        data["salesRepLastName"] = this.salesRepLastName;
        data["salesRepId"] = this.salesRepId;
        data["recipientInstitutionName"] = this.recipientInstitutionName;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): OfferSearchFilterDto {
        const json = this.toJSON();
        let result = new OfferSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface IOfferSearchFilterDto {
    programId: string | undefined;
    offerId: string | undefined;
    externalOfferId: string | undefined;
    formId: string | undefined;
    offerStatusClassificationValueIds: string[] | undefined;
    srfGenerationSourceIds: string[] | undefined;
    requestorHcpLastName: string | undefined;
    requestorHcpFirstName: string | undefined;
    requestorHcpKId: string | undefined;
    salesRepFirstName: string | undefined;
    salesRepLastName: string | undefined;
    salesRepId: string | undefined;
    recipientInstitutionName: string | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPagedResultOfOfferSearchDto implements IAjaxResponseOfPagedResultOfOfferSearchDto {
    result: PagedResultOfOfferSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPagedResultOfOfferSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfOfferSearchDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultOfOfferSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultOfOfferSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPagedResultOfOfferSearchDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPagedResultOfOfferSearchDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPagedResultOfOfferSearchDto {
    result: PagedResultOfOfferSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PagedResultOfOfferSearchDto implements IPagedResultOfOfferSearchDto {
    totalCount: number | undefined;
    items: OfferSearchDto[] | undefined;

    constructor(data?: IPagedResultOfOfferSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(OfferSearchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfOfferSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfOfferSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultOfOfferSearchDto {
        const json = this.toJSON();
        let result = new PagedResultOfOfferSearchDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultOfOfferSearchDto {
    totalCount: number | undefined;
    items: OfferSearchDto[] | undefined;
}

export class OfferSearchDto implements IOfferSearchDto {
    id: string | undefined;
    offerId: string | undefined;
    offerStatus: string | undefined;
    externalOfferId: string | undefined;
    formId: string | undefined;
    requestorHcpName: string | undefined;
    requestorHcpKId: string | undefined;
    salesRepName: string | undefined;
    salesRepId: string | undefined;
    institutionName: string | undefined;
    isOfferStatusError: boolean | undefined;
    newFlag: boolean | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IOfferSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.offerId = _data["offerId"];
            this.offerStatus = _data["offerStatus"];
            this.externalOfferId = _data["externalOfferId"];
            this.formId = _data["formId"];
            this.requestorHcpName = _data["requestorHcpName"];
            this.requestorHcpKId = _data["requestorHcpKId"];
            this.salesRepName = _data["salesRepName"];
            this.salesRepId = _data["salesRepId"];
            this.institutionName = _data["institutionName"];
            this.isOfferStatusError = _data["isOfferStatusError"];
            this.newFlag = _data["newFlag"];
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OfferSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new OfferSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["offerId"] = this.offerId;
        data["offerStatus"] = this.offerStatus;
        data["externalOfferId"] = this.externalOfferId;
        data["formId"] = this.formId;
        data["requestorHcpName"] = this.requestorHcpName;
        data["requestorHcpKId"] = this.requestorHcpKId;
        data["salesRepName"] = this.salesRepName;
        data["salesRepId"] = this.salesRepId;
        data["institutionName"] = this.institutionName;
        data["isOfferStatusError"] = this.isOfferStatusError;
        data["newFlag"] = this.newFlag;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): OfferSearchDto {
        const json = this.toJSON();
        let result = new OfferSearchDto();
        result.init(json);
        return result;
    }
}

export interface IOfferSearchDto {
    id: string | undefined;
    offerId: string | undefined;
    offerStatus: string | undefined;
    externalOfferId: string | undefined;
    formId: string | undefined;
    requestorHcpName: string | undefined;
    requestorHcpKId: string | undefined;
    salesRepName: string | undefined;
    salesRepId: string | undefined;
    institutionName: string | undefined;
    isOfferStatusError: boolean | undefined;
    newFlag: boolean | undefined;
    names: LocalizedValue[] | undefined;
}

export class OfferByFormIdSearchFilterDto implements IOfferByFormIdSearchFilterDto {
    formId: string | undefined;

    constructor(data?: IOfferByFormIdSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.formId = _data["formId"];
        }
    }

    static fromJS(data: any): OfferByFormIdSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new OfferByFormIdSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["formId"] = this.formId;
        return data; 
    }

    clone(): OfferByFormIdSearchFilterDto {
        const json = this.toJSON();
        let result = new OfferByFormIdSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface IOfferByFormIdSearchFilterDto {
    formId: string | undefined;
}

export class AjaxResponseOfListOfSearchOfferByFormIdResultDto implements IAjaxResponseOfListOfSearchOfferByFormIdResultDto {
    result: SearchOfferByFormIdResultDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfListOfSearchOfferByFormIdResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(SearchOfferByFormIdResultDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfSearchOfferByFormIdResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfSearchOfferByFormIdResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfListOfSearchOfferByFormIdResultDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfListOfSearchOfferByFormIdResultDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfListOfSearchOfferByFormIdResultDto {
    result: SearchOfferByFormIdResultDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class SearchOfferByFormIdResultDto implements ISearchOfferByFormIdResultDto {
    offerId: string | undefined;
    offerNumber: string | undefined;
    formId: string | undefined;

    constructor(data?: ISearchOfferByFormIdResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offerId = _data["offerId"];
            this.offerNumber = _data["offerNumber"];
            this.formId = _data["formId"];
        }
    }

    static fromJS(data: any): SearchOfferByFormIdResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchOfferByFormIdResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offerId"] = this.offerId;
        data["offerNumber"] = this.offerNumber;
        data["formId"] = this.formId;
        return data; 
    }

    clone(): SearchOfferByFormIdResultDto {
        const json = this.toJSON();
        let result = new SearchOfferByFormIdResultDto();
        result.init(json);
        return result;
    }
}

export interface ISearchOfferByFormIdResultDto {
    offerId: string | undefined;
    offerNumber: string | undefined;
    formId: string | undefined;
}

export class AjaxResponseOfGenerateOfferResultDto implements IAjaxResponseOfGenerateOfferResultDto {
    result: GenerateOfferResultDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfGenerateOfferResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? GenerateOfferResultDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfGenerateOfferResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfGenerateOfferResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfGenerateOfferResultDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfGenerateOfferResultDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfGenerateOfferResultDto {
    result: GenerateOfferResultDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class GenerateOfferResultDto implements IGenerateOfferResultDto {
    offerGeneratedCount: number | undefined;
    totalTargetRecordCount: number | undefined;
    processedTargetRecordCount: number | undefined;
    failedTargetRecordCount: number | undefined;
    resultCode: GenerateOfferResultDtoResultCode | undefined;
    readonly resultCodeStr: string | undefined;
    generatedOfferIds: string[] | undefined;

    constructor(data?: IGenerateOfferResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offerGeneratedCount = _data["offerGeneratedCount"];
            this.totalTargetRecordCount = _data["totalTargetRecordCount"];
            this.processedTargetRecordCount = _data["processedTargetRecordCount"];
            this.failedTargetRecordCount = _data["failedTargetRecordCount"];
            this.resultCode = _data["resultCode"];
            (<any>this).resultCodeStr = _data["resultCodeStr"];
            if (Array.isArray(_data["generatedOfferIds"])) {
                this.generatedOfferIds = [] as any;
                for (let item of _data["generatedOfferIds"])
                    this.generatedOfferIds.push(item);
            }
        }
    }

    static fromJS(data: any): GenerateOfferResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new GenerateOfferResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offerGeneratedCount"] = this.offerGeneratedCount;
        data["totalTargetRecordCount"] = this.totalTargetRecordCount;
        data["processedTargetRecordCount"] = this.processedTargetRecordCount;
        data["failedTargetRecordCount"] = this.failedTargetRecordCount;
        data["resultCode"] = this.resultCode;
        data["resultCodeStr"] = this.resultCodeStr;
        if (Array.isArray(this.generatedOfferIds)) {
            data["generatedOfferIds"] = [];
            for (let item of this.generatedOfferIds)
                data["generatedOfferIds"].push(item);
        }
        return data; 
    }

    clone(): GenerateOfferResultDto {
        const json = this.toJSON();
        let result = new GenerateOfferResultDto();
        result.init(json);
        return result;
    }
}

export interface IGenerateOfferResultDto {
    offerGeneratedCount: number | undefined;
    totalTargetRecordCount: number | undefined;
    processedTargetRecordCount: number | undefined;
    failedTargetRecordCount: number | undefined;
    resultCode: GenerateOfferResultDtoResultCode | undefined;
    resultCodeStr: string | undefined;
    generatedOfferIds: string[] | undefined;
}

export class OfferFileUploadDto implements IOfferFileUploadDto {
    programId: string | undefined;
    fileUpload: FileUpload | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    uploadedOfferIds: string[] | undefined;
    offersLoaded: number | undefined;
    offersInvalid: number | undefined;
    offersTotal: number | undefined;
    errorMessage: string | undefined;

    constructor(data?: IOfferFileUploadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.fileUpload = _data["fileUpload"] ? FileUpload.fromJS(_data["fileUpload"]) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["uploadedOfferIds"])) {
                this.uploadedOfferIds = [] as any;
                for (let item of _data["uploadedOfferIds"])
                    this.uploadedOfferIds.push(item);
            }
            this.offersLoaded = _data["offersLoaded"];
            this.offersInvalid = _data["offersInvalid"];
            this.offersTotal = _data["offersTotal"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): OfferFileUploadDto {
        data = typeof data === 'object' ? data : {};
        let result = new OfferFileUploadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["fileUpload"] = this.fileUpload ? this.fileUpload.toJSON() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        if (Array.isArray(this.uploadedOfferIds)) {
            data["uploadedOfferIds"] = [];
            for (let item of this.uploadedOfferIds)
                data["uploadedOfferIds"].push(item);
        }
        data["offersLoaded"] = this.offersLoaded;
        data["offersInvalid"] = this.offersInvalid;
        data["offersTotal"] = this.offersTotal;
        data["errorMessage"] = this.errorMessage;
        return data; 
    }

    clone(): OfferFileUploadDto {
        const json = this.toJSON();
        let result = new OfferFileUploadDto();
        result.init(json);
        return result;
    }
}

export interface IOfferFileUploadDto {
    programId: string | undefined;
    fileUpload: FileUpload | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    uploadedOfferIds: string[] | undefined;
    offersLoaded: number | undefined;
    offersInvalid: number | undefined;
    offersTotal: number | undefined;
    errorMessage: string | undefined;
}

export class FileUpload implements IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    duplicateFileName: boolean | undefined;

    constructor(data?: IFileUpload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileDescription = _data["fileDescription"];
            this.fileType = _data["fileType"];
            this.base64FileContent = _data["base64FileContent"];
            this.location = _data["location"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.newFlag = _data["newFlag"];
            this.duplicateFileName = _data["duplicateFileName"];
        }
    }

    static fromJS(data: any): FileUpload {
        data = typeof data === 'object' ? data : {};
        let result = new FileUpload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileDescription"] = this.fileDescription;
        data["fileType"] = this.fileType;
        data["base64FileContent"] = this.base64FileContent;
        data["location"] = this.location;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["newFlag"] = this.newFlag;
        data["duplicateFileName"] = this.duplicateFileName;
        return data; 
    }

    clone(): FileUpload {
        const json = this.toJSON();
        let result = new FileUpload();
        result.init(json);
        return result;
    }
}

export interface IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    duplicateFileName: boolean | undefined;
}

export class AjaxResponseOfOfferFileUploadDto implements IAjaxResponseOfOfferFileUploadDto {
    result: OfferFileUploadDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfOfferFileUploadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? OfferFileUploadDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfOfferFileUploadDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfOfferFileUploadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfOfferFileUploadDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfOfferFileUploadDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfOfferFileUploadDto {
    result: OfferFileUploadDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export enum StepperLifeCycleStageDtoStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum LocalizedValueLanguage {
    _0 = 0,
    _1 = 1,
}

export enum GenerateOfferResultDtoResultCode {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.2.0 (NJsonSchema v10.1.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const OM_ORDER_API_BASE_URL = new InjectionToken<string>('OM_ORDER_API_BASE_URL');

export class ServiceBaseConfig {
  public key: string;
}

export class ServiceBase {
  private readonly apiKey: string;
  private readonly apimHeaderName: string = 'Ocp-Apim-Subscription-Key';
  private readonly tenantIdHeaderName: string = 'TenantId';
  private readonly tenantIdLocalStorageKey: string = 'samplicity-dtp-current-client';
  private readonly idTokenKey: string = 'samplicity-id-token';

  constructor(config: ServiceBaseConfig) {
    this.apiKey = config.key;
  }

  protected transformOptions(options: any) {
    let headers: HttpHeaders = options.headers;

    if (this.apiKey) {
      headers = headers.append(this.apimHeaderName, this.apiKey);
    }

    const tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
    if (tenantId) {
      headers = headers.append(this.tenantIdHeaderName, tenantId);
    }

    const token = localStorage.getItem(this.idTokenKey);
    if (token) {
      headers = headers.append('Authorization', 'Bearer ' + token);
    }

    options.headers = headers;

    return Promise.resolve(options);
  }
}

@Injectable()
export class OrderManagementOrder extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(ServiceBaseConfig) configuration: ServiceBaseConfig, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(OM_ORDER_API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchOrders(filter?: OrderSearchFilterDto | null | undefined): Observable<AjaxResponseOfPagedResultOfOrderSearchDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/SearchOrders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchOrders(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchOrders(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPagedResultOfOrderSearchDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPagedResultOfOrderSearchDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchOrders(response: HttpResponseBase): Observable<AjaxResponseOfPagedResultOfOrderSearchDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPagedResultOfOrderSearchDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPagedResultOfOrderSearchDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchMitigationOrders(filter?: MitigationOrderSearchFilterDto | null | undefined): Observable<AjaxResponseOfPagedResultOfMitigationOrderSearchDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/SearchMitigationOrders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchMitigationOrders(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchMitigationOrders(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPagedResultOfMitigationOrderSearchDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPagedResultOfMitigationOrderSearchDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchMitigationOrders(response: HttpResponseBase): Observable<AjaxResponseOfPagedResultOfMitigationOrderSearchDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPagedResultOfMitigationOrderSearchDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPagedResultOfMitigationOrderSearchDto>(<any>null);
    }

    /**
     * @param filter (optional) 
     * @return Success
     */
    searchDataEntryOrders(filter?: DataEntryOrdersSearchFilterDto | null | undefined): Observable<AjaxResponseOfPagedResultOfDataEntryOrderSearchDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/SearchDataEntryOrders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSearchDataEntryOrders(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchDataEntryOrders(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPagedResultOfDataEntryOrderSearchDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPagedResultOfDataEntryOrderSearchDto>><any>Observable.throw(response_);
        });
    }

    protected processSearchDataEntryOrders(response: HttpResponseBase): Observable<AjaxResponseOfPagedResultOfDataEntryOrderSearchDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPagedResultOfDataEntryOrderSearchDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPagedResultOfDataEntryOrderSearchDto>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @return Success
     */
    getOrderInvestigation(orderId?: string | null | undefined): Observable<AjaxResponseOfPageValidationOfInvestigationDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetOrderInvestigation?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderInvestigation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderInvestigation(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfInvestigationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfInvestigationDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderInvestigation(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfInvestigationDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfInvestigationDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfInvestigationDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    saveOrderInvestigation(src?: InvestigationDto | null | undefined): Observable<AjaxResponseOfPageValidationOfInvestigationDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/SaveOrderInvestigation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSaveOrderInvestigation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveOrderInvestigation(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfInvestigationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfInvestigationDto>><any>Observable.throw(response_);
        });
    }

    protected processSaveOrderInvestigation(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfInvestigationDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfInvestigationDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfInvestigationDto>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @param offerStatusId (optional) 
     * @param activityTypeId (optional) 
     * @param formId (optional) 
     * @return Success
     */
    updateOfferStatus(orderId?: string | null | undefined, offerStatusId?: string | null | undefined, activityTypeId?: string | null | undefined, formId?: string | null | undefined): Observable<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/Order/UpdateOfferStatus?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        if (offerStatusId !== undefined)
            url_ += "offerStatusId=" + encodeURIComponent("" + offerStatusId) + "&"; 
        if (activityTypeId !== undefined)
            url_ += "activityTypeId=" + encodeURIComponent("" + activityTypeId) + "&"; 
        if (formId !== undefined)
            url_ += "formId=" + encodeURIComponent("" + formId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateOfferStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOfferStatus(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfString>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOfferStatus(response: HttpResponseBase): Observable<AjaxResponseOfString> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfString.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param ruleCode (optional) 
     * @param orderId (optional) 
     * @param orderLineId (optional) 
     * @return Success
     */
    getInvestigationCurrentValueDto(ruleCode?: string | null | undefined, orderId?: string | null | undefined, orderLineId?: string | null | undefined): Observable<AjaxResponseOfInvestigationCurrentValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetInvestigationCurrentValueDto?";
        if (ruleCode !== undefined)
            url_ += "RuleCode=" + encodeURIComponent("" + ruleCode) + "&"; 
        if (orderId !== undefined)
            url_ += "OrderId=" + encodeURIComponent("" + orderId) + "&"; 
        if (orderLineId !== undefined)
            url_ += "OrderLineId=" + encodeURIComponent("" + orderLineId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetInvestigationCurrentValueDto(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInvestigationCurrentValueDto(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfInvestigationCurrentValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfInvestigationCurrentValueDto>><any>Observable.throw(response_);
        });
    }

    protected processGetInvestigationCurrentValueDto(response: HttpResponseBase): Observable<AjaxResponseOfInvestigationCurrentValueDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfInvestigationCurrentValueDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfInvestigationCurrentValueDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getOrderById(id?: string | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetOrderById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderById(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getOrderHcpSalesRepDetailsById(id?: string | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderHcpSalesRepDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetOrderHcpSalesRepDetailsById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderHcpSalesRepDetailsById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderHcpSalesRepDetailsById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderHcpSalesRepDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderHcpSalesRepDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderHcpSalesRepDetailsById(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderHcpSalesRepDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderHcpSalesRepDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderHcpSalesRepDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    updateHcpSalesRepDetails(src?: OrderHcpSalesRepDto | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderHcpSalesRepDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/UpdateHcpSalesRepDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateHcpSalesRepDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateHcpSalesRepDetails(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderHcpSalesRepDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderHcpSalesRepDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateHcpSalesRepDetails(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderHcpSalesRepDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderHcpSalesRepDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderHcpSalesRepDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getOrderAttachmentsAndCommentsByOrderId(id?: string | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetOrderAttachmentsAndCommentsByOrderId?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderAttachmentsAndCommentsByOrderId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderAttachmentsAndCommentsByOrderId(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderAttachmentsAndCommentsByOrderId(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    updateOrderAttachmentsAndComments(dto?: OrderAttachmentAndCommentUpdateDto | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/UpdateOrderAttachmentsAndComments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateOrderAttachmentsAndComments(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrderAttachmentsAndComments(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrderAttachmentsAndComments(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getOrderDetailsById(id?: string | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetOrderDetailsById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderDetailsById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderDetailsById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderDetailsById(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderDetailsDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    updateOrderHeader(dto?: OrderDto | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/UpdateOrderHeader";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateOrderHeader(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrderHeader(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrderHeader(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderDetailsDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    updateOrderDetails(dto?: OrderDetailsDto | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/UpdateOrderDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateOrderDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrderDetails(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrderDetails(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderDetailsDto>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @return Success
     */
    getOrderCancelRequestStatus(orderId?: string | null | undefined): Observable<AjaxResponseOfCancelOrderRequestStatusDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetOrderCancelRequestStatus?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderCancelRequestStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderCancelRequestStatus(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfCancelOrderRequestStatusDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfCancelOrderRequestStatusDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderCancelRequestStatus(response: HttpResponseBase): Observable<AjaxResponseOfCancelOrderRequestStatusDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfCancelOrderRequestStatusDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfCancelOrderRequestStatusDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    requestToCancelOrder(dto?: CancelOrderRequestDto | null | undefined): Observable<AjaxResponseOfCancelOrderRequestStatusDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/RequestToCancelOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processRequestToCancelOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestToCancelOrder(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfCancelOrderRequestStatusDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfCancelOrderRequestStatusDto>><any>Observable.throw(response_);
        });
    }

    protected processRequestToCancelOrder(response: HttpResponseBase): Observable<AjaxResponseOfCancelOrderRequestStatusDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfCancelOrderRequestStatusDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfCancelOrderRequestStatusDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    cancelOrder(dto?: CancelOrderInSamplicityRequestDto | null | undefined): Observable<AjaxResponseOfCancelOrderInSamplicityResultDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/CancelOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processCancelOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelOrder(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfCancelOrderInSamplicityResultDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfCancelOrderInSamplicityResultDto>><any>Observable.throw(response_);
        });
    }

    protected processCancelOrder(response: HttpResponseBase): Observable<AjaxResponseOfCancelOrderInSamplicityResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfCancelOrderInSamplicityResultDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfCancelOrderInSamplicityResultDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    bulkCancelOrder(dto?: BulkCancelOrderInSamplicityRequestDto | null | undefined): Observable<AjaxResponseOfBulkCancelOrderInSamplicityResponseDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/BulkCancelOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processBulkCancelOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBulkCancelOrder(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfBulkCancelOrderInSamplicityResponseDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfBulkCancelOrderInSamplicityResponseDto>><any>Observable.throw(response_);
        });
    }

    protected processBulkCancelOrder(response: HttpResponseBase): Observable<AjaxResponseOfBulkCancelOrderInSamplicityResponseDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfBulkCancelOrderInSamplicityResponseDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfBulkCancelOrderInSamplicityResponseDto>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @return Success
     */
    generateOfferSrfDocumentForOrder(orderId?: string | null | undefined): Observable<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/Order/GenerateOfferSrfDocumentForOrder?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGenerateOfferSrfDocumentForOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateOfferSrfDocumentForOrder(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfString>><any>Observable.throw(response_);
        });
    }

    protected processGenerateOfferSrfDocumentForOrder(response: HttpResponseBase): Observable<AjaxResponseOfString> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfString.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    saveSelectDayVerification(dto?: SelectDayVerificationDto | null | undefined): Observable<AjaxResponseOfTask> {
        let url_ = this.baseUrl + "/api/services/app/Order/SaveSelectDayVerification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSaveSelectDayVerification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveSelectDayVerification(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTask>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTask>><any>Observable.throw(response_);
        });
    }

    protected processSaveSelectDayVerification(response: HttpResponseBase): Observable<AjaxResponseOfTask> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTask.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTask>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @return Success
     */
    getSelectDayVerificationInformation(orderId?: string | null | undefined): Observable<AjaxResponseOfSelectDayVerificationDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetSelectDayVerificationInformation?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetSelectDayVerificationInformation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSelectDayVerificationInformation(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfSelectDayVerificationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfSelectDayVerificationDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSelectDayVerificationInformation(response: HttpResponseBase): Observable<AjaxResponseOfSelectDayVerificationDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfSelectDayVerificationDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfSelectDayVerificationDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    createOrderPlitInvestigation(dto?: OrderPlitInvestigationDto | null | undefined): Observable<AjaxResponseOfTask> {
        let url_ = this.baseUrl + "/api/services/app/Order/CreateOrderPlitInvestigation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processCreateOrderPlitInvestigation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrderPlitInvestigation(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTask>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTask>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrderPlitInvestigation(response: HttpResponseBase): Observable<AjaxResponseOfTask> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTask.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTask>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @return Success
     */
    getLostInTransitEventConfirmation(orderId?: string | null | undefined): Observable<AjaxResponseOfLostInTransitConfirmationDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetLostInTransitEventConfirmation?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetLostInTransitEventConfirmation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLostInTransitEventConfirmation(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfLostInTransitConfirmationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfLostInTransitConfirmationDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLostInTransitEventConfirmation(response: HttpResponseBase): Observable<AjaxResponseOfLostInTransitConfirmationDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfLostInTransitConfirmationDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfLostInTransitConfirmationDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    saveLostInTransitEventConfirmation(dto?: LostInTransitConfirmationDto | null | undefined): Observable<AjaxResponseOfTask> {
        let url_ = this.baseUrl + "/api/services/app/Order/SaveLostInTransitEventConfirmation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSaveLostInTransitEventConfirmation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveLostInTransitEventConfirmation(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfTask>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfTask>><any>Observable.throw(response_);
        });
    }

    protected processSaveLostInTransitEventConfirmation(response: HttpResponseBase): Observable<AjaxResponseOfTask> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfTask.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfTask>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getOrderDeliveryDetailsById(id?: string | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetOrderDeliveryDetailsById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderDeliveryDetailsById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderDeliveryDetailsById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderDeliveryDetailsById(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    updateOrderDeliveryDetails(dto?: OrderDeliveryDetailsDto | null | undefined): Observable<AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/UpdateOrderDeliveryDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateOrderDeliveryDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrderDeliveryDetails(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrderDeliveryDetails(response: HttpResponseBase): Observable<AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @return Success
     */
    getShippingAddressRequiresReformattingOrderExceptionDetails(orderId?: string | null | undefined): Observable<AjaxResponseOfShippingAddressWithFieldContraintsDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetShippingAddressRequiresReformattingOrderExceptionDetails?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetShippingAddressRequiresReformattingOrderExceptionDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetShippingAddressRequiresReformattingOrderExceptionDetails(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfShippingAddressWithFieldContraintsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfShippingAddressWithFieldContraintsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetShippingAddressRequiresReformattingOrderExceptionDetails(response: HttpResponseBase): Observable<AjaxResponseOfShippingAddressWithFieldContraintsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfShippingAddressWithFieldContraintsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfShippingAddressWithFieldContraintsDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    handleShippingAddressRequiresReformattingOrderException(src?: ShippingAddressDto | null | undefined): Observable<AjaxResponseOfShippingAddressDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/HandleShippingAddressRequiresReformattingOrderException";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processHandleShippingAddressRequiresReformattingOrderException(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandleShippingAddressRequiresReformattingOrderException(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfShippingAddressDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfShippingAddressDto>><any>Observable.throw(response_);
        });
    }

    protected processHandleShippingAddressRequiresReformattingOrderException(response: HttpResponseBase): Observable<AjaxResponseOfShippingAddressDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfShippingAddressDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfShippingAddressDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    handleInactiveHCPOrderException(src?: InactiveHCPOrderExceptionHandlerDto | null | undefined): Observable<AjaxResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/services/app/Order/HandleInactiveHCPOrderException";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processHandleInactiveHCPOrderException(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHandleInactiveHCPOrderException(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(response_);
        });
    }

    protected processHandleInactiveHCPOrderException(response: HttpResponseBase): Observable<AjaxResponseOfBoolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfBoolean.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfBoolean>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @return Success
     */
    getBackorderLineItemDetails(orderId?: string | null | undefined): Observable<AjaxResponseOfBackorderAdjustmentDetailsDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetBackorderLineItemDetails?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetBackorderLineItemDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBackorderLineItemDetails(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfBackorderAdjustmentDetailsDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfBackorderAdjustmentDetailsDto>><any>Observable.throw(response_);
        });
    }

    protected processGetBackorderLineItemDetails(response: HttpResponseBase): Observable<AjaxResponseOfBackorderAdjustmentDetailsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfBackorderAdjustmentDetailsDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfBackorderAdjustmentDetailsDto>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    submitBackorderAdjustmentForRevalidation(src?: BackorderAdjustmentSubmitForRevalidationDto | null | undefined): Observable<AjaxResponse> {
        let url_ = this.baseUrl + "/api/services/app/Order/SubmitBackorderAdjustmentForRevalidation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSubmitBackorderAdjustmentForRevalidation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSubmitBackorderAdjustmentForRevalidation(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponse>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponse>><any>Observable.throw(response_);
        });
    }

    protected processSubmitBackorderAdjustmentForRevalidation(response: HttpResponseBase): Observable<AjaxResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponse.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponse>(<any>null);
    }

    /**
     * @param src (optional) 
     * @return Success
     */
    releaseOrderFromBlackoutHold(src?: OrderBlackoutHoldReleaseReasonDto | null | undefined): Observable<AjaxResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/services/app/Order/ReleaseOrderFromBlackoutHold";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(src);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processReleaseOrderFromBlackoutHold(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReleaseOrderFromBlackoutHold(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(response_);
        });
    }

    protected processReleaseOrderFromBlackoutHold(response: HttpResponseBase): Observable<AjaxResponseOfBoolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfBoolean.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfBoolean>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @return Success
     */
    replaceOrder(orderId?: string | null | undefined): Observable<AjaxResponseOfGuid> {
        let url_ = this.baseUrl + "/api/services/app/Order/ReplaceOrder?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processReplaceOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReplaceOrder(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfGuid>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfGuid>><any>Observable.throw(response_);
        });
    }

    protected processReplaceOrder(response: HttpResponseBase): Observable<AjaxResponseOfGuid> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfGuid.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfGuid>(<any>null);
    }

    /**
     * @param aocId (optional) 
     * @return Success
     */
    getAocInvestigationById(aocId?: string | null | undefined): Observable<AjaxResponseOfAocInvestigationDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetAocInvestigationById?";
        if (aocId !== undefined)
            url_ += "aocId=" + encodeURIComponent("" + aocId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetAocInvestigationById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAocInvestigationById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfAocInvestigationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfAocInvestigationDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAocInvestigationById(response: HttpResponseBase): Observable<AjaxResponseOfAocInvestigationDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfAocInvestigationDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfAocInvestigationDto>(<any>null);
    }

    /**
     * @param aoc (optional) 
     * @return Success
     */
    updateAocInvestigationById(aoc?: AocInvestigationDto | null | undefined): Observable<AjaxResponseOfAocInvestigationDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/UpdateAocInvestigationById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(aoc);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateAocInvestigationById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAocInvestigationById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfAocInvestigationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfAocInvestigationDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAocInvestigationById(response: HttpResponseBase): Observable<AjaxResponseOfAocInvestigationDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfAocInvestigationDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfAocInvestigationDto>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @param communicationId (optional) 
     * @return Success
     */
    generateEAocDorForCommunication(orderId?: string | null | undefined, communicationId?: string | null | undefined): Observable<AjaxResponseOfString> {
        let url_ = this.baseUrl + "/api/services/app/Order/GenerateEAocDorForCommunication?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        if (communicationId !== undefined)
            url_ += "communicationId=" + encodeURIComponent("" + communicationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGenerateEAocDorForCommunication(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateEAocDorForCommunication(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfString>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfString>><any>Observable.throw(response_);
        });
    }

    protected processGenerateEAocDorForCommunication(response: HttpResponseBase): Observable<AjaxResponseOfString> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfString.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfString>(<any>null);
    }

    /**
     * @param svlId (optional) 
     * @return Success
     */
    getSvlInvestigationById(svlId?: string | null | undefined): Observable<AjaxResponseOfSvlInvestigationDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetSvlInvestigationById?";
        if (svlId !== undefined)
            url_ += "svlId=" + encodeURIComponent("" + svlId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetSvlInvestigationById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSvlInvestigationById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfSvlInvestigationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfSvlInvestigationDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSvlInvestigationById(response: HttpResponseBase): Observable<AjaxResponseOfSvlInvestigationDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfSvlInvestigationDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfSvlInvestigationDto>(<any>null);
    }

    /**
     * @param svl (optional) 
     * @return Success
     */
    updateSvlInvestigationById(svl?: SvlInvestigationDto | null | undefined): Observable<AjaxResponseOfSvlInvestigationDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/UpdateSvlInvestigationById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(svl);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateSvlInvestigationById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSvlInvestigationById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfSvlInvestigationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfSvlInvestigationDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateSvlInvestigationById(response: HttpResponseBase): Observable<AjaxResponseOfSvlInvestigationDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfSvlInvestigationDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfSvlInvestigationDto>(<any>null);
    }

    /**
     * @param svlId (optional) 
     * @return Success
     */
    getNegativeResponseCommentsById(svlId?: string | null | undefined): Observable<AjaxResponseOfSvlNegativeResponseCommentHistoryDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetNegativeResponseCommentsById?";
        if (svlId !== undefined)
            url_ += "svlId=" + encodeURIComponent("" + svlId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetNegativeResponseCommentsById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNegativeResponseCommentsById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfSvlNegativeResponseCommentHistoryDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfSvlNegativeResponseCommentHistoryDto>><any>Observable.throw(response_);
        });
    }

    protected processGetNegativeResponseCommentsById(response: HttpResponseBase): Observable<AjaxResponseOfSvlNegativeResponseCommentHistoryDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfSvlNegativeResponseCommentHistoryDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfSvlNegativeResponseCommentHistoryDto>(<any>null);
    }

    /**
     * @param svlNegativeComment (optional) 
     * @return Success
     */
    updateSvlNegativeResponseComments(svlNegativeComment?: SvlNegativeResponseCommentDto | null | undefined): Observable<AjaxResponseOfSvlNegativeResponseCommentHistoryDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/UpdateSvlNegativeResponseComments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(svlNegativeComment);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("put", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUpdateSvlNegativeResponseComments(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSvlNegativeResponseComments(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfSvlNegativeResponseCommentHistoryDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfSvlNegativeResponseCommentHistoryDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateSvlNegativeResponseComments(response: HttpResponseBase): Observable<AjaxResponseOfSvlNegativeResponseCommentHistoryDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfSvlNegativeResponseCommentHistoryDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfSvlNegativeResponseCommentHistoryDto>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @return Success
     */
    getDataEntryOrderDetailsById(orderId?: string | null | undefined): Observable<AjaxResponseOfDataEntryOrderDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetDataEntryOrderDetailsById?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetDataEntryOrderDetailsById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDataEntryOrderDetailsById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfDataEntryOrderDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfDataEntryOrderDto>><any>Observable.throw(response_);
        });
    }

    protected processGetDataEntryOrderDetailsById(response: HttpResponseBase): Observable<AjaxResponseOfDataEntryOrderDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfDataEntryOrderDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfDataEntryOrderDto>(<any>null);
    }

    /**
     * @param dataEntryOrder (optional) 
     * @return Success
     */
    saveDataEntryOrderDetails(dataEntryOrder?: DataEntryOrderDto | null | undefined): Observable<AjaxResponseOfDataEntryOrderDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/SaveDataEntryOrderDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dataEntryOrder);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processSaveDataEntryOrderDetails(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveDataEntryOrderDetails(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfDataEntryOrderDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfDataEntryOrderDto>><any>Observable.throw(response_);
        });
    }

    protected processSaveDataEntryOrderDetails(response: HttpResponseBase): Observable<AjaxResponseOfDataEntryOrderDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfDataEntryOrderDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfDataEntryOrderDto>(<any>null);
    }

    /**
     * @param dto (optional) 
     * @return Success
     */
    uploadOrderFile(dto?: OrderFileUploadDto | null | undefined): Observable<AjaxResponseOfOrderFileUploadDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/UploadOrderFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUploadOrderFile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadOrderFile(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfOrderFileUploadDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfOrderFileUploadDto>><any>Observable.throw(response_);
        });
    }

    protected processUploadOrderFile(response: HttpResponseBase): Observable<AjaxResponseOfOrderFileUploadDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfOrderFileUploadDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfOrderFileUploadDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @param extendLock (optional) 
     * @return Success
     */
    lockOrderById(id?: string | null | undefined, extendLock?: boolean | null | undefined): Observable<AjaxResponseOfLockAckDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/LockOrderById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (extendLock !== undefined)
            url_ += "extendLock=" + encodeURIComponent("" + extendLock) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processLockOrderById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLockOrderById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfLockAckDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfLockAckDto>><any>Observable.throw(response_);
        });
    }

    protected processLockOrderById(response: HttpResponseBase): Observable<AjaxResponseOfLockAckDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfLockAckDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfLockAckDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    unlockOrderById(id?: string | null | undefined): Observable<AjaxResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/services/app/Order/UnlockOrderById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processUnlockOrderById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnlockOrderById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(response_);
        });
    }

    protected processUnlockOrderById(response: HttpResponseBase): Observable<AjaxResponseOfBoolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfBoolean.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfBoolean>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    adminUnlockOrderById(id?: string | null | undefined): Observable<AjaxResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/services/app/Order/AdminUnlockOrderById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processAdminUnlockOrderById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdminUnlockOrderById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfBoolean>><any>Observable.throw(response_);
        });
    }

    protected processAdminUnlockOrderById(response: HttpResponseBase): Observable<AjaxResponseOfBoolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfBoolean.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfBoolean>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getOrderLockInfo(id?: string | null | undefined): Observable<AjaxResponseOfLockInfoDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetOrderLockInfo?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderLockInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderLockInfo(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfLockInfoDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfLockInfoDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderLockInfo(response: HttpResponseBase): Observable<AjaxResponseOfLockInfoDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfLockInfoDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfLockInfoDto>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @return Success
     */
    getOrderMitigationHistory(orderId?: string | null | undefined): Observable<AjaxResponseOfListOfInvestigationDto> {
        let url_ = this.baseUrl + "/api/services/app/OrderMitigation/GetOrderMitigationHistory?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderMitigationHistory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderMitigationHistory(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfListOfInvestigationDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfListOfInvestigationDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderMitigationHistory(response: HttpResponseBase): Observable<AjaxResponseOfListOfInvestigationDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfListOfInvestigationDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfListOfInvestigationDto>(<any>null);
    }

    /**
     * @param orderId (optional) 
     * @param orderLineId (optional) 
     * @return Success
     */
    getOrderValidationResultModal(orderId?: string | null | undefined, orderLineId?: string | null | undefined): Observable<AjaxResponseOfOrderValidationResultDto> {
        let url_ = this.baseUrl + "/api/services/app/OrderMitigation/GetOrderValidationResultModal?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        if (orderLineId !== undefined)
            url_ += "orderLineId=" + encodeURIComponent("" + orderLineId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetOrderValidationResultModal(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderValidationResultModal(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfOrderValidationResultDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfOrderValidationResultDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrderValidationResultModal(response: HttpResponseBase): Observable<AjaxResponseOfOrderValidationResultDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfOrderValidationResultDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfOrderValidationResultDto>(<any>null);
    }
}

export class OrderSearchFilterDto implements IOrderSearchFilterDto {
    programName: string | undefined;
    jobNumber: string | undefined;
    formId: string | undefined;
    orderNumber: string | undefined;
    externalOrderNumber: string | undefined;
    orderStatusIds: string[] | undefined;
    orderStatusReasonTypeIds: string[] | undefined;
    orderDateFrom: Date | undefined;
    orderDateTo: Date | undefined;
    hcpFirstName: string | undefined;
    hcpLastName: string | undefined;
    hcpKidNumber: string | undefined;
    stateIds: string[] | undefined;
    repFirstName: string | undefined;
    repLastName: string | undefined;
    repId: string | undefined;
    repTerritoryCode: string | undefined;
    institutionName: string | undefined;
    brandName: string | undefined;
    productName: string | undefined;
    productId: string | undefined;
    rush: boolean | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: IOrderSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programName = _data["programName"];
            this.jobNumber = _data["jobNumber"];
            this.formId = _data["formId"];
            this.orderNumber = _data["orderNumber"];
            this.externalOrderNumber = _data["externalOrderNumber"];
            if (Array.isArray(_data["orderStatusIds"])) {
                this.orderStatusIds = [] as any;
                for (let item of _data["orderStatusIds"])
                    this.orderStatusIds.push(item);
            }
            if (Array.isArray(_data["orderStatusReasonTypeIds"])) {
                this.orderStatusReasonTypeIds = [] as any;
                for (let item of _data["orderStatusReasonTypeIds"])
                    this.orderStatusReasonTypeIds.push(item);
            }
            this.orderDateFrom = _data["orderDateFrom"] ? new Date(_data["orderDateFrom"].toString()) : <any>undefined;
            this.orderDateTo = _data["orderDateTo"] ? new Date(_data["orderDateTo"].toString()) : <any>undefined;
            this.hcpFirstName = _data["hcpFirstName"];
            this.hcpLastName = _data["hcpLastName"];
            this.hcpKidNumber = _data["hcpKidNumber"];
            if (Array.isArray(_data["stateIds"])) {
                this.stateIds = [] as any;
                for (let item of _data["stateIds"])
                    this.stateIds.push(item);
            }
            this.repFirstName = _data["repFirstName"];
            this.repLastName = _data["repLastName"];
            this.repId = _data["repId"];
            this.repTerritoryCode = _data["repTerritoryCode"];
            this.institutionName = _data["institutionName"];
            this.brandName = _data["brandName"];
            this.productName = _data["productName"];
            this.productId = _data["productId"];
            this.rush = _data["rush"];
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): OrderSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programName"] = this.programName;
        data["jobNumber"] = this.jobNumber;
        data["formId"] = this.formId;
        data["orderNumber"] = this.orderNumber;
        data["externalOrderNumber"] = this.externalOrderNumber;
        if (Array.isArray(this.orderStatusIds)) {
            data["orderStatusIds"] = [];
            for (let item of this.orderStatusIds)
                data["orderStatusIds"].push(item);
        }
        if (Array.isArray(this.orderStatusReasonTypeIds)) {
            data["orderStatusReasonTypeIds"] = [];
            for (let item of this.orderStatusReasonTypeIds)
                data["orderStatusReasonTypeIds"].push(item);
        }
        data["orderDateFrom"] = this.orderDateFrom ? this.orderDateFrom.toISOString() : <any>undefined;
        data["orderDateTo"] = this.orderDateTo ? this.orderDateTo.toISOString() : <any>undefined;
        data["hcpFirstName"] = this.hcpFirstName;
        data["hcpLastName"] = this.hcpLastName;
        data["hcpKidNumber"] = this.hcpKidNumber;
        if (Array.isArray(this.stateIds)) {
            data["stateIds"] = [];
            for (let item of this.stateIds)
                data["stateIds"].push(item);
        }
        data["repFirstName"] = this.repFirstName;
        data["repLastName"] = this.repLastName;
        data["repId"] = this.repId;
        data["repTerritoryCode"] = this.repTerritoryCode;
        data["institutionName"] = this.institutionName;
        data["brandName"] = this.brandName;
        data["productName"] = this.productName;
        data["productId"] = this.productId;
        data["rush"] = this.rush;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): OrderSearchFilterDto {
        const json = this.toJSON();
        let result = new OrderSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface IOrderSearchFilterDto {
    programName: string | undefined;
    jobNumber: string | undefined;
    formId: string | undefined;
    orderNumber: string | undefined;
    externalOrderNumber: string | undefined;
    orderStatusIds: string[] | undefined;
    orderStatusReasonTypeIds: string[] | undefined;
    orderDateFrom: Date | undefined;
    orderDateTo: Date | undefined;
    hcpFirstName: string | undefined;
    hcpLastName: string | undefined;
    hcpKidNumber: string | undefined;
    stateIds: string[] | undefined;
    repFirstName: string | undefined;
    repLastName: string | undefined;
    repId: string | undefined;
    repTerritoryCode: string | undefined;
    institutionName: string | undefined;
    brandName: string | undefined;
    productName: string | undefined;
    productId: string | undefined;
    rush: boolean | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPagedResultOfOrderSearchDto implements IAjaxResponseOfPagedResultOfOrderSearchDto {
    result: PagedResultOfOrderSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPagedResultOfOrderSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfOrderSearchDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultOfOrderSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultOfOrderSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPagedResultOfOrderSearchDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPagedResultOfOrderSearchDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPagedResultOfOrderSearchDto {
    result: PagedResultOfOrderSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PagedResultOfOrderSearchDto implements IPagedResultOfOrderSearchDto {
    totalCount: number | undefined;
    items: OrderSearchDto[] | undefined;

    constructor(data?: IPagedResultOfOrderSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(OrderSearchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfOrderSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfOrderSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultOfOrderSearchDto {
        const json = this.toJSON();
        let result = new PagedResultOfOrderSearchDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultOfOrderSearchDto {
    totalCount: number | undefined;
    items: OrderSearchDto[] | undefined;
}

export class ErrorInfo implements IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;

    constructor(data?: IErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            this.details = _data["details"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors.push(ValidationErrorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ErrorInfo {
        const json = this.toJSON();
        let result = new ErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;
}

export class OrderSearchDto implements IOrderSearchDto {
    id: string | undefined;
    orderNumber: string | undefined;
    externalOrderNumber: string | undefined;
    orderDate: Date | undefined;
    hcpNameAndKid: string | undefined;
    program: string | undefined;
    orderStatusId: string | undefined;
    orderStatusReasonTypeId: string[] | undefined;
    rush: boolean | undefined;
    stateId: string | undefined;
    salesRep: string | undefined;
    salesRepTerritories: string[] | undefined;
    readonly salesRepTerritoryCode: string | undefined;
    institutionName: string | undefined;
    locked: boolean | undefined;
    hcpKid: string | undefined;
    programJobId: string | undefined;
    salesRepId: string | undefined;
    isSelectableForCancel: boolean | undefined;
    newFlag: boolean | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: IOrderSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.externalOrderNumber = _data["externalOrderNumber"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.hcpNameAndKid = _data["hcpNameAndKid"];
            this.program = _data["program"];
            this.orderStatusId = _data["orderStatusId"];
            if (Array.isArray(_data["orderStatusReasonTypeId"])) {
                this.orderStatusReasonTypeId = [] as any;
                for (let item of _data["orderStatusReasonTypeId"])
                    this.orderStatusReasonTypeId.push(item);
            }
            this.rush = _data["rush"];
            this.stateId = _data["stateId"];
            this.salesRep = _data["salesRep"];
            if (Array.isArray(_data["salesRepTerritories"])) {
                this.salesRepTerritories = [] as any;
                for (let item of _data["salesRepTerritories"])
                    this.salesRepTerritories.push(item);
            }
            (<any>this).salesRepTerritoryCode = _data["salesRepTerritoryCode"];
            this.institutionName = _data["institutionName"];
            this.locked = _data["locked"];
            this.hcpKid = _data["hcpKid"];
            this.programJobId = _data["programJobId"];
            this.salesRepId = _data["salesRepId"];
            this.isSelectableForCancel = _data["isSelectableForCancel"];
            this.newFlag = _data["newFlag"];
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): OrderSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["externalOrderNumber"] = this.externalOrderNumber;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["hcpNameAndKid"] = this.hcpNameAndKid;
        data["program"] = this.program;
        data["orderStatusId"] = this.orderStatusId;
        if (Array.isArray(this.orderStatusReasonTypeId)) {
            data["orderStatusReasonTypeId"] = [];
            for (let item of this.orderStatusReasonTypeId)
                data["orderStatusReasonTypeId"].push(item);
        }
        data["rush"] = this.rush;
        data["stateId"] = this.stateId;
        data["salesRep"] = this.salesRep;
        if (Array.isArray(this.salesRepTerritories)) {
            data["salesRepTerritories"] = [];
            for (let item of this.salesRepTerritories)
                data["salesRepTerritories"].push(item);
        }
        data["salesRepTerritoryCode"] = this.salesRepTerritoryCode;
        data["institutionName"] = this.institutionName;
        data["locked"] = this.locked;
        data["hcpKid"] = this.hcpKid;
        data["programJobId"] = this.programJobId;
        data["salesRepId"] = this.salesRepId;
        data["isSelectableForCancel"] = this.isSelectableForCancel;
        data["newFlag"] = this.newFlag;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): OrderSearchDto {
        const json = this.toJSON();
        let result = new OrderSearchDto();
        result.init(json);
        return result;
    }
}

export interface IOrderSearchDto {
    id: string | undefined;
    orderNumber: string | undefined;
    externalOrderNumber: string | undefined;
    orderDate: Date | undefined;
    hcpNameAndKid: string | undefined;
    program: string | undefined;
    orderStatusId: string | undefined;
    orderStatusReasonTypeId: string[] | undefined;
    rush: boolean | undefined;
    stateId: string | undefined;
    salesRep: string | undefined;
    salesRepTerritories: string[] | undefined;
    salesRepTerritoryCode: string | undefined;
    institutionName: string | undefined;
    locked: boolean | undefined;
    hcpKid: string | undefined;
    programJobId: string | undefined;
    salesRepId: string | undefined;
    isSelectableForCancel: boolean | undefined;
    newFlag: boolean | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class ValidationErrorInfo implements IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;

    constructor(data?: IValidationErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members.push(item);
            }
        }
    }

    static fromJS(data: any): ValidationErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }

    clone(): ValidationErrorInfo {
        const json = this.toJSON();
        let result = new ValidationErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;
}

export class MitigationOrderSearchFilterDto implements IMitigationOrderSearchFilterDto {
    programId: string | undefined;
    formId: string | undefined;
    orderNumber: string | undefined;
    statusReasonTypeClassificationValueIds: string[] | undefined;
    orderReceivedFrom: Date | undefined;
    orderReceivedTo: Date | undefined;
    requestorHcpLastName: string | undefined;
    requestorHcpFirstName: string | undefined;
    requestorHcpKId: string | undefined;
    rushOrderFlag: boolean | undefined;
    unlockedForEditingFlag: boolean | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: IMitigationOrderSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.formId = _data["formId"];
            this.orderNumber = _data["orderNumber"];
            if (Array.isArray(_data["statusReasonTypeClassificationValueIds"])) {
                this.statusReasonTypeClassificationValueIds = [] as any;
                for (let item of _data["statusReasonTypeClassificationValueIds"])
                    this.statusReasonTypeClassificationValueIds.push(item);
            }
            this.orderReceivedFrom = _data["orderReceivedFrom"] ? new Date(_data["orderReceivedFrom"].toString()) : <any>undefined;
            this.orderReceivedTo = _data["orderReceivedTo"] ? new Date(_data["orderReceivedTo"].toString()) : <any>undefined;
            this.requestorHcpLastName = _data["requestorHcpLastName"];
            this.requestorHcpFirstName = _data["requestorHcpFirstName"];
            this.requestorHcpKId = _data["requestorHcpKId"];
            this.rushOrderFlag = _data["rushOrderFlag"];
            this.unlockedForEditingFlag = _data["unlockedForEditingFlag"];
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): MitigationOrderSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new MitigationOrderSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["formId"] = this.formId;
        data["orderNumber"] = this.orderNumber;
        if (Array.isArray(this.statusReasonTypeClassificationValueIds)) {
            data["statusReasonTypeClassificationValueIds"] = [];
            for (let item of this.statusReasonTypeClassificationValueIds)
                data["statusReasonTypeClassificationValueIds"].push(item);
        }
        data["orderReceivedFrom"] = this.orderReceivedFrom ? this.orderReceivedFrom.toISOString() : <any>undefined;
        data["orderReceivedTo"] = this.orderReceivedTo ? this.orderReceivedTo.toISOString() : <any>undefined;
        data["requestorHcpLastName"] = this.requestorHcpLastName;
        data["requestorHcpFirstName"] = this.requestorHcpFirstName;
        data["requestorHcpKId"] = this.requestorHcpKId;
        data["rushOrderFlag"] = this.rushOrderFlag;
        data["unlockedForEditingFlag"] = this.unlockedForEditingFlag;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): MitigationOrderSearchFilterDto {
        const json = this.toJSON();
        let result = new MitigationOrderSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface IMitigationOrderSearchFilterDto {
    programId: string | undefined;
    formId: string | undefined;
    orderNumber: string | undefined;
    statusReasonTypeClassificationValueIds: string[] | undefined;
    orderReceivedFrom: Date | undefined;
    orderReceivedTo: Date | undefined;
    requestorHcpLastName: string | undefined;
    requestorHcpFirstName: string | undefined;
    requestorHcpKId: string | undefined;
    rushOrderFlag: boolean | undefined;
    unlockedForEditingFlag: boolean | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPagedResultOfMitigationOrderSearchDto implements IAjaxResponseOfPagedResultOfMitigationOrderSearchDto {
    result: PagedResultOfMitigationOrderSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPagedResultOfMitigationOrderSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfMitigationOrderSearchDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultOfMitigationOrderSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultOfMitigationOrderSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPagedResultOfMitigationOrderSearchDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPagedResultOfMitigationOrderSearchDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPagedResultOfMitigationOrderSearchDto {
    result: PagedResultOfMitigationOrderSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PagedResultOfMitigationOrderSearchDto implements IPagedResultOfMitigationOrderSearchDto {
    totalCount: number | undefined;
    items: MitigationOrderSearchDto[] | undefined;

    constructor(data?: IPagedResultOfMitigationOrderSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(MitigationOrderSearchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfMitigationOrderSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfMitigationOrderSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultOfMitigationOrderSearchDto {
        const json = this.toJSON();
        let result = new PagedResultOfMitigationOrderSearchDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultOfMitigationOrderSearchDto {
    totalCount: number | undefined;
    items: MitigationOrderSearchDto[] | undefined;
}

export class MitigationOrderSearchDto implements IMitigationOrderSearchDto {
    id: string | undefined;
    receivedDate: Date | undefined;
    orderNumber: string | undefined;
    requestorHcpName: string | undefined;
    requestorHcpKId: string | undefined;
    statusReasonTypeClassificationValueIds: string[] | undefined;
    rushOrderFlag: boolean | undefined;
    lockedForEditingFlag: boolean | undefined;

    constructor(data?: IMitigationOrderSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.receivedDate = _data["receivedDate"] ? new Date(_data["receivedDate"].toString()) : <any>undefined;
            this.orderNumber = _data["orderNumber"];
            this.requestorHcpName = _data["requestorHcpName"];
            this.requestorHcpKId = _data["requestorHcpKId"];
            if (Array.isArray(_data["statusReasonTypeClassificationValueIds"])) {
                this.statusReasonTypeClassificationValueIds = [] as any;
                for (let item of _data["statusReasonTypeClassificationValueIds"])
                    this.statusReasonTypeClassificationValueIds.push(item);
            }
            this.rushOrderFlag = _data["rushOrderFlag"];
            this.lockedForEditingFlag = _data["lockedForEditingFlag"];
        }
    }

    static fromJS(data: any): MitigationOrderSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new MitigationOrderSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["receivedDate"] = this.receivedDate ? this.receivedDate.toISOString() : <any>undefined;
        data["orderNumber"] = this.orderNumber;
        data["requestorHcpName"] = this.requestorHcpName;
        data["requestorHcpKId"] = this.requestorHcpKId;
        if (Array.isArray(this.statusReasonTypeClassificationValueIds)) {
            data["statusReasonTypeClassificationValueIds"] = [];
            for (let item of this.statusReasonTypeClassificationValueIds)
                data["statusReasonTypeClassificationValueIds"].push(item);
        }
        data["rushOrderFlag"] = this.rushOrderFlag;
        data["lockedForEditingFlag"] = this.lockedForEditingFlag;
        return data; 
    }

    clone(): MitigationOrderSearchDto {
        const json = this.toJSON();
        let result = new MitigationOrderSearchDto();
        result.init(json);
        return result;
    }
}

export interface IMitigationOrderSearchDto {
    id: string | undefined;
    receivedDate: Date | undefined;
    orderNumber: string | undefined;
    requestorHcpName: string | undefined;
    requestorHcpKId: string | undefined;
    statusReasonTypeClassificationValueIds: string[] | undefined;
    rushOrderFlag: boolean | undefined;
    lockedForEditingFlag: boolean | undefined;
}

export class DataEntryOrdersSearchFilterDto implements IDataEntryOrdersSearchFilterDto {
    programName: string | undefined;
    jobNumber: string | undefined;
    orderNumber: string | undefined;
    orderDateFrom: Date | undefined;
    orderDateTo: Date | undefined;
    hcpFirstName: string | undefined;
    hcpLastName: string | undefined;
    hcpKidNumber: string | undefined;
    rushFlag: boolean | undefined;
    unlockedForEditingFlag: boolean | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: IDataEntryOrdersSearchFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programName = _data["programName"];
            this.jobNumber = _data["jobNumber"];
            this.orderNumber = _data["orderNumber"];
            this.orderDateFrom = _data["orderDateFrom"] ? new Date(_data["orderDateFrom"].toString()) : <any>undefined;
            this.orderDateTo = _data["orderDateTo"] ? new Date(_data["orderDateTo"].toString()) : <any>undefined;
            this.hcpFirstName = _data["hcpFirstName"];
            this.hcpLastName = _data["hcpLastName"];
            this.hcpKidNumber = _data["hcpKidNumber"];
            this.rushFlag = _data["rushFlag"];
            this.unlockedForEditingFlag = _data["unlockedForEditingFlag"];
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): DataEntryOrdersSearchFilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataEntryOrdersSearchFilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programName"] = this.programName;
        data["jobNumber"] = this.jobNumber;
        data["orderNumber"] = this.orderNumber;
        data["orderDateFrom"] = this.orderDateFrom ? this.orderDateFrom.toISOString() : <any>undefined;
        data["orderDateTo"] = this.orderDateTo ? this.orderDateTo.toISOString() : <any>undefined;
        data["hcpFirstName"] = this.hcpFirstName;
        data["hcpLastName"] = this.hcpLastName;
        data["hcpKidNumber"] = this.hcpKidNumber;
        data["rushFlag"] = this.rushFlag;
        data["unlockedForEditingFlag"] = this.unlockedForEditingFlag;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): DataEntryOrdersSearchFilterDto {
        const json = this.toJSON();
        let result = new DataEntryOrdersSearchFilterDto();
        result.init(json);
        return result;
    }
}

export interface IDataEntryOrdersSearchFilterDto {
    programName: string | undefined;
    jobNumber: string | undefined;
    orderNumber: string | undefined;
    orderDateFrom: Date | undefined;
    orderDateTo: Date | undefined;
    hcpFirstName: string | undefined;
    hcpLastName: string | undefined;
    hcpKidNumber: string | undefined;
    rushFlag: boolean | undefined;
    unlockedForEditingFlag: boolean | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPagedResultOfDataEntryOrderSearchDto implements IAjaxResponseOfPagedResultOfDataEntryOrderSearchDto {
    result: PagedResultOfDataEntryOrderSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPagedResultOfDataEntryOrderSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PagedResultOfDataEntryOrderSearchDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPagedResultOfDataEntryOrderSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPagedResultOfDataEntryOrderSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPagedResultOfDataEntryOrderSearchDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPagedResultOfDataEntryOrderSearchDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPagedResultOfDataEntryOrderSearchDto {
    result: PagedResultOfDataEntryOrderSearchDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PagedResultOfDataEntryOrderSearchDto implements IPagedResultOfDataEntryOrderSearchDto {
    totalCount: number | undefined;
    items: DataEntryOrderSearchDto[] | undefined;

    constructor(data?: IPagedResultOfDataEntryOrderSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(DataEntryOrderSearchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfDataEntryOrderSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfDataEntryOrderSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultOfDataEntryOrderSearchDto {
        const json = this.toJSON();
        let result = new PagedResultOfDataEntryOrderSearchDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultOfDataEntryOrderSearchDto {
    totalCount: number | undefined;
    items: DataEntryOrderSearchDto[] | undefined;
}

export class DataEntryOrderSearchDto implements IDataEntryOrderSearchDto {
    id: string | undefined;
    orderNumber: string | undefined;
    program: string | undefined;
    programJobId: string | undefined;
    orderReceivedDate: Date | undefined;
    hcpName: string | undefined;
    hcpKid: string | undefined;
    modifiedBy: number | undefined;
    rush: boolean | undefined;
    locked: boolean | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;

    constructor(data?: IDataEntryOrderSearchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.program = _data["program"];
            this.programJobId = _data["programJobId"];
            this.orderReceivedDate = _data["orderReceivedDate"] ? new Date(_data["orderReceivedDate"].toString()) : <any>undefined;
            this.hcpName = _data["hcpName"];
            this.hcpKid = _data["hcpKid"];
            this.modifiedBy = _data["modifiedBy"];
            this.rush = _data["rush"];
            this.locked = _data["locked"];
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.sortBy = _data["sortBy"];
            this.filterString = _data["filterString"];
        }
    }

    static fromJS(data: any): DataEntryOrderSearchDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataEntryOrderSearchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["program"] = this.program;
        data["programJobId"] = this.programJobId;
        data["orderReceivedDate"] = this.orderReceivedDate ? this.orderReceivedDate.toISOString() : <any>undefined;
        data["hcpName"] = this.hcpName;
        data["hcpKid"] = this.hcpKid;
        data["modifiedBy"] = this.modifiedBy;
        data["rush"] = this.rush;
        data["locked"] = this.locked;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["sortBy"] = this.sortBy;
        data["filterString"] = this.filterString;
        return data; 
    }

    clone(): DataEntryOrderSearchDto {
        const json = this.toJSON();
        let result = new DataEntryOrderSearchDto();
        result.init(json);
        return result;
    }
}

export interface IDataEntryOrderSearchDto {
    id: string | undefined;
    orderNumber: string | undefined;
    program: string | undefined;
    programJobId: string | undefined;
    orderReceivedDate: Date | undefined;
    hcpName: string | undefined;
    hcpKid: string | undefined;
    modifiedBy: number | undefined;
    rush: boolean | undefined;
    locked: boolean | undefined;
    pageSize: number | undefined;
    pageNumber: number | undefined;
    sortBy: string | undefined;
    filterString: string | undefined;
}

export class AjaxResponseOfPageValidationOfInvestigationDto implements IAjaxResponseOfPageValidationOfInvestigationDto {
    result: PageValidationOfInvestigationDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfInvestigationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfInvestigationDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfInvestigationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfInvestigationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfInvestigationDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfInvestigationDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfInvestigationDto {
    result: PageValidationOfInvestigationDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfInvestigationDto implements IPageValidationOfInvestigationDto {
    dataDto: InvestigationDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfInvestigationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? InvestigationDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfInvestigationDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfInvestigationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfInvestigationDto {
        const json = this.toJSON();
        let result = new PageValidationOfInvestigationDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfInvestigationDto {
    dataDto: InvestigationDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

/** DTO for Order Mitigation Screen */
export class InvestigationDto implements IInvestigationDto {
    orderId: string | undefined;
    orderValidationId: string | undefined;
    summary: InvestigationSummaryDto | undefined;
    orderLevelValidationResults: InvestigationValidationResultDto[] | undefined;
    productLevelValidationResults: InvestigationValidationResultDto[] | undefined;
    unauthorizedFormChanges: OrderUnauthorizedFormChangeValidationDto | undefined;
    orderAttachment: OrderAttachmentDto | undefined;
    mitigationTierTypeId: string | undefined;
    mitigationComment: string | undefined;
    mitigatedBy: number | undefined;
    mitigationSubmissionDateTime: Date | undefined;

    constructor(data?: IInvestigationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.orderValidationId = _data["orderValidationId"];
            this.summary = _data["summary"] ? InvestigationSummaryDto.fromJS(_data["summary"]) : <any>undefined;
            if (Array.isArray(_data["orderLevelValidationResults"])) {
                this.orderLevelValidationResults = [] as any;
                for (let item of _data["orderLevelValidationResults"])
                    this.orderLevelValidationResults.push(InvestigationValidationResultDto.fromJS(item));
            }
            if (Array.isArray(_data["productLevelValidationResults"])) {
                this.productLevelValidationResults = [] as any;
                for (let item of _data["productLevelValidationResults"])
                    this.productLevelValidationResults.push(InvestigationValidationResultDto.fromJS(item));
            }
            this.unauthorizedFormChanges = _data["unauthorizedFormChanges"] ? OrderUnauthorizedFormChangeValidationDto.fromJS(_data["unauthorizedFormChanges"]) : <any>undefined;
            this.orderAttachment = _data["orderAttachment"] ? OrderAttachmentDto.fromJS(_data["orderAttachment"]) : <any>undefined;
            this.mitigationTierTypeId = _data["mitigationTierTypeId"];
            this.mitigationComment = _data["mitigationComment"];
            this.mitigatedBy = _data["mitigatedBy"];
            this.mitigationSubmissionDateTime = _data["mitigationSubmissionDateTime"] ? new Date(_data["mitigationSubmissionDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): InvestigationDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvestigationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["orderValidationId"] = this.orderValidationId;
        data["summary"] = this.summary ? this.summary.toJSON() : <any>undefined;
        if (Array.isArray(this.orderLevelValidationResults)) {
            data["orderLevelValidationResults"] = [];
            for (let item of this.orderLevelValidationResults)
                data["orderLevelValidationResults"].push(item.toJSON());
        }
        if (Array.isArray(this.productLevelValidationResults)) {
            data["productLevelValidationResults"] = [];
            for (let item of this.productLevelValidationResults)
                data["productLevelValidationResults"].push(item.toJSON());
        }
        data["unauthorizedFormChanges"] = this.unauthorizedFormChanges ? this.unauthorizedFormChanges.toJSON() : <any>undefined;
        data["orderAttachment"] = this.orderAttachment ? this.orderAttachment.toJSON() : <any>undefined;
        data["mitigationTierTypeId"] = this.mitigationTierTypeId;
        data["mitigationComment"] = this.mitigationComment;
        data["mitigatedBy"] = this.mitigatedBy;
        data["mitigationSubmissionDateTime"] = this.mitigationSubmissionDateTime ? this.mitigationSubmissionDateTime.toISOString() : <any>undefined;
        return data; 
    }

    clone(): InvestigationDto {
        const json = this.toJSON();
        let result = new InvestigationDto();
        result.init(json);
        return result;
    }
}

/** DTO for Order Mitigation Screen */
export interface IInvestigationDto {
    orderId: string | undefined;
    orderValidationId: string | undefined;
    summary: InvestigationSummaryDto | undefined;
    orderLevelValidationResults: InvestigationValidationResultDto[] | undefined;
    productLevelValidationResults: InvestigationValidationResultDto[] | undefined;
    unauthorizedFormChanges: OrderUnauthorizedFormChangeValidationDto | undefined;
    orderAttachment: OrderAttachmentDto | undefined;
    mitigationTierTypeId: string | undefined;
    mitigationComment: string | undefined;
    mitigatedBy: number | undefined;
    mitigationSubmissionDateTime: Date | undefined;
}

export class SectionValidation implements ISectionValidation {
    parent: SectionValidation | undefined;
    state: string | undefined;
    name: string | undefined;
    selectedFlag: boolean | undefined;
    crossPageError: boolean | undefined;
    omitValidation: boolean | undefined;

    constructor(data?: ISectionValidation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parent = _data["parent"] ? SectionValidation.fromJS(_data["parent"]) : <any>undefined;
            this.state = _data["state"];
            this.name = _data["name"];
            this.selectedFlag = _data["selectedFlag"];
            this.crossPageError = _data["crossPageError"];
            this.omitValidation = _data["omitValidation"];
        }
    }

    static fromJS(data: any): SectionValidation {
        data = typeof data === 'object' ? data : {};
        let result = new SectionValidation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        data["state"] = this.state;
        data["name"] = this.name;
        data["selectedFlag"] = this.selectedFlag;
        data["crossPageError"] = this.crossPageError;
        data["omitValidation"] = this.omitValidation;
        return data; 
    }

    clone(): SectionValidation {
        const json = this.toJSON();
        let result = new SectionValidation();
        result.init(json);
        return result;
    }
}

export interface ISectionValidation {
    parent: SectionValidation | undefined;
    state: string | undefined;
    name: string | undefined;
    selectedFlag: boolean | undefined;
    crossPageError: boolean | undefined;
    omitValidation: boolean | undefined;
}

export class InvestigationSummaryDto implements IInvestigationSummaryDto {
    failedRuleCount: number | undefined;
    relatedRulesForReviewCount: number | undefined;

    constructor(data?: IInvestigationSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.failedRuleCount = _data["failedRuleCount"];
            this.relatedRulesForReviewCount = _data["relatedRulesForReviewCount"];
        }
    }

    static fromJS(data: any): InvestigationSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvestigationSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["failedRuleCount"] = this.failedRuleCount;
        data["relatedRulesForReviewCount"] = this.relatedRulesForReviewCount;
        return data; 
    }

    clone(): InvestigationSummaryDto {
        const json = this.toJSON();
        let result = new InvestigationSummaryDto();
        result.init(json);
        return result;
    }
}

export interface IInvestigationSummaryDto {
    failedRuleCount: number | undefined;
    relatedRulesForReviewCount: number | undefined;
}

export class InvestigationValidationResultDto implements IInvestigationValidationResultDto {
    ruleCode: string | undefined;
    ruleName: string | undefined;
    wmsProductId: string | undefined;
    orderId: string | undefined;
    orderLineId: string | undefined;
    orderValidationRuleOutcomeId: string | undefined;
    ruleFailureTypeId: string | undefined;
    submittedValue: InvestigationSubmittedValueDto | undefined;
    validationReference: InvestigationValidationReferenceDto | undefined;
    investigationAction: InvestigationActionDto | undefined;
    investigationResolutionId: string | undefined;

    constructor(data?: IInvestigationValidationResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.wmsProductId = _data["wmsProductId"];
            this.orderId = _data["orderId"];
            this.orderLineId = _data["orderLineId"];
            this.orderValidationRuleOutcomeId = _data["orderValidationRuleOutcomeId"];
            this.ruleFailureTypeId = _data["ruleFailureTypeId"];
            this.submittedValue = _data["submittedValue"] ? InvestigationSubmittedValueDto.fromJS(_data["submittedValue"]) : <any>undefined;
            this.validationReference = _data["validationReference"] ? InvestigationValidationReferenceDto.fromJS(_data["validationReference"]) : <any>undefined;
            this.investigationAction = _data["investigationAction"] ? InvestigationActionDto.fromJS(_data["investigationAction"]) : <any>undefined;
            this.investigationResolutionId = _data["investigationResolutionId"];
        }
    }

    static fromJS(data: any): InvestigationValidationResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvestigationValidationResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["wmsProductId"] = this.wmsProductId;
        data["orderId"] = this.orderId;
        data["orderLineId"] = this.orderLineId;
        data["orderValidationRuleOutcomeId"] = this.orderValidationRuleOutcomeId;
        data["ruleFailureTypeId"] = this.ruleFailureTypeId;
        data["submittedValue"] = this.submittedValue ? this.submittedValue.toJSON() : <any>undefined;
        data["validationReference"] = this.validationReference ? this.validationReference.toJSON() : <any>undefined;
        data["investigationAction"] = this.investigationAction ? this.investigationAction.toJSON() : <any>undefined;
        data["investigationResolutionId"] = this.investigationResolutionId;
        return data; 
    }

    clone(): InvestigationValidationResultDto {
        const json = this.toJSON();
        let result = new InvestigationValidationResultDto();
        result.init(json);
        return result;
    }
}

export interface IInvestigationValidationResultDto {
    ruleCode: string | undefined;
    ruleName: string | undefined;
    wmsProductId: string | undefined;
    orderId: string | undefined;
    orderLineId: string | undefined;
    orderValidationRuleOutcomeId: string | undefined;
    ruleFailureTypeId: string | undefined;
    submittedValue: InvestigationSubmittedValueDto | undefined;
    validationReference: InvestigationValidationReferenceDto | undefined;
    investigationAction: InvestigationActionDto | undefined;
    investigationResolutionId: string | undefined;
}

export class OrderUnauthorizedFormChangeValidationDto implements IOrderUnauthorizedFormChangeValidationDto {
    formFields: OrderUnauthorizedFormChangeValidationItemDto[] | undefined;
    orderValidationRuleOutcomeId: string | undefined;
    investigationResolutionId: string | undefined;

    constructor(data?: IOrderUnauthorizedFormChangeValidationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["formFields"])) {
                this.formFields = [] as any;
                for (let item of _data["formFields"])
                    this.formFields.push(OrderUnauthorizedFormChangeValidationItemDto.fromJS(item));
            }
            this.orderValidationRuleOutcomeId = _data["orderValidationRuleOutcomeId"];
            this.investigationResolutionId = _data["investigationResolutionId"];
        }
    }

    static fromJS(data: any): OrderUnauthorizedFormChangeValidationDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderUnauthorizedFormChangeValidationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.formFields)) {
            data["formFields"] = [];
            for (let item of this.formFields)
                data["formFields"].push(item.toJSON());
        }
        data["orderValidationRuleOutcomeId"] = this.orderValidationRuleOutcomeId;
        data["investigationResolutionId"] = this.investigationResolutionId;
        return data; 
    }

    clone(): OrderUnauthorizedFormChangeValidationDto {
        const json = this.toJSON();
        let result = new OrderUnauthorizedFormChangeValidationDto();
        result.init(json);
        return result;
    }
}

export interface IOrderUnauthorizedFormChangeValidationDto {
    formFields: OrderUnauthorizedFormChangeValidationItemDto[] | undefined;
    orderValidationRuleOutcomeId: string | undefined;
    investigationResolutionId: string | undefined;
}

export class OrderAttachmentDto implements IOrderAttachmentDto {
    orderId: string | undefined;
    location: string | undefined;
    comments: string | undefined;
    attachmentTypeClassificationValueId: string | undefined;
    sequenceNumber: number | undefined;
    newFlag: boolean | undefined;
    fileUpload: FileUpload | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    id: string | undefined;

    constructor(data?: IOrderAttachmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.location = _data["location"];
            this.comments = _data["comments"];
            this.attachmentTypeClassificationValueId = _data["attachmentTypeClassificationValueId"];
            this.sequenceNumber = _data["sequenceNumber"];
            this.newFlag = _data["newFlag"];
            this.fileUpload = _data["fileUpload"] ? FileUpload.fromJS(_data["fileUpload"]) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OrderAttachmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderAttachmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["location"] = this.location;
        data["comments"] = this.comments;
        data["attachmentTypeClassificationValueId"] = this.attachmentTypeClassificationValueId;
        data["sequenceNumber"] = this.sequenceNumber;
        data["newFlag"] = this.newFlag;
        data["fileUpload"] = this.fileUpload ? this.fileUpload.toJSON() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): OrderAttachmentDto {
        const json = this.toJSON();
        let result = new OrderAttachmentDto();
        result.init(json);
        return result;
    }
}

export interface IOrderAttachmentDto {
    orderId: string | undefined;
    location: string | undefined;
    comments: string | undefined;
    attachmentTypeClassificationValueId: string | undefined;
    sequenceNumber: number | undefined;
    newFlag: boolean | undefined;
    fileUpload: FileUpload | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    id: string | undefined;
}

export class InvestigationSubmittedValueDto implements IInvestigationSubmittedValueDto {
    textValue: TextInvestigationValue | undefined;
    booleanValue: BooleanInvestigationValue | undefined;
    dateTimeValue: DateTimeInvestigationValue | undefined;
    lookupValue: LookupInvestigationValue | undefined;
    addressValue: AddressInvestigationValue | undefined;
    readonly mode: InvestigationSubmittedValueDtoMode | undefined;

    constructor(data?: IInvestigationSubmittedValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.textValue = _data["textValue"] ? TextInvestigationValue.fromJS(_data["textValue"]) : <any>undefined;
            this.booleanValue = _data["booleanValue"] ? BooleanInvestigationValue.fromJS(_data["booleanValue"]) : <any>undefined;
            this.dateTimeValue = _data["dateTimeValue"] ? DateTimeInvestigationValue.fromJS(_data["dateTimeValue"]) : <any>undefined;
            this.lookupValue = _data["lookupValue"] ? LookupInvestigationValue.fromJS(_data["lookupValue"]) : <any>undefined;
            this.addressValue = _data["addressValue"] ? AddressInvestigationValue.fromJS(_data["addressValue"]) : <any>undefined;
            (<any>this).mode = _data["mode"];
        }
    }

    static fromJS(data: any): InvestigationSubmittedValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvestigationSubmittedValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["textValue"] = this.textValue ? this.textValue.toJSON() : <any>undefined;
        data["booleanValue"] = this.booleanValue ? this.booleanValue.toJSON() : <any>undefined;
        data["dateTimeValue"] = this.dateTimeValue ? this.dateTimeValue.toJSON() : <any>undefined;
        data["lookupValue"] = this.lookupValue ? this.lookupValue.toJSON() : <any>undefined;
        data["addressValue"] = this.addressValue ? this.addressValue.toJSON() : <any>undefined;
        data["mode"] = this.mode;
        return data; 
    }

    clone(): InvestigationSubmittedValueDto {
        const json = this.toJSON();
        let result = new InvestigationSubmittedValueDto();
        result.init(json);
        return result;
    }
}

export interface IInvestigationSubmittedValueDto {
    textValue: TextInvestigationValue | undefined;
    booleanValue: BooleanInvestigationValue | undefined;
    dateTimeValue: DateTimeInvestigationValue | undefined;
    lookupValue: LookupInvestigationValue | undefined;
    addressValue: AddressInvestigationValue | undefined;
    mode: InvestigationSubmittedValueDtoMode | undefined;
}

export class InvestigationValidationReferenceDto implements IInvestigationValidationReferenceDto {
    textValue: TextInvestigationValue | undefined;
    lookups: LookupsInvestigationValue | undefined;
    lookup: LookupInvestigationValue | undefined;
    dateTime: DateTimeInvestigationValue | undefined;
    address: AddressInvestigationValue | undefined;
    sourceSystem: string | undefined;
    showViewCurrentValueLink: boolean | undefined;
    readonly mode: InvestigationValidationReferenceDtoMode | undefined;

    constructor(data?: IInvestigationValidationReferenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.textValue = _data["textValue"] ? TextInvestigationValue.fromJS(_data["textValue"]) : <any>undefined;
            this.lookups = _data["lookups"] ? LookupsInvestigationValue.fromJS(_data["lookups"]) : <any>undefined;
            this.lookup = _data["lookup"] ? LookupInvestigationValue.fromJS(_data["lookup"]) : <any>undefined;
            this.dateTime = _data["dateTime"] ? DateTimeInvestigationValue.fromJS(_data["dateTime"]) : <any>undefined;
            this.address = _data["address"] ? AddressInvestigationValue.fromJS(_data["address"]) : <any>undefined;
            this.sourceSystem = _data["sourceSystem"];
            this.showViewCurrentValueLink = _data["showViewCurrentValueLink"];
            (<any>this).mode = _data["mode"];
        }
    }

    static fromJS(data: any): InvestigationValidationReferenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvestigationValidationReferenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["textValue"] = this.textValue ? this.textValue.toJSON() : <any>undefined;
        data["lookups"] = this.lookups ? this.lookups.toJSON() : <any>undefined;
        data["lookup"] = this.lookup ? this.lookup.toJSON() : <any>undefined;
        data["dateTime"] = this.dateTime ? this.dateTime.toJSON() : <any>undefined;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["sourceSystem"] = this.sourceSystem;
        data["showViewCurrentValueLink"] = this.showViewCurrentValueLink;
        data["mode"] = this.mode;
        return data; 
    }

    clone(): InvestigationValidationReferenceDto {
        const json = this.toJSON();
        let result = new InvestigationValidationReferenceDto();
        result.init(json);
        return result;
    }
}

export interface IInvestigationValidationReferenceDto {
    textValue: TextInvestigationValue | undefined;
    lookups: LookupsInvestigationValue | undefined;
    lookup: LookupInvestigationValue | undefined;
    dateTime: DateTimeInvestigationValue | undefined;
    address: AddressInvestigationValue | undefined;
    sourceSystem: string | undefined;
    showViewCurrentValueLink: boolean | undefined;
    mode: InvestigationValidationReferenceDtoMode | undefined;
}

export class InvestigationActionDto implements IInvestigationActionDto {
    textValue: TextInvestigationValue | undefined;
    lookupValue: LookupInvestigationValue | undefined;
    dateTimeValue: DateTimeInvestigationValue | undefined;
    booleanValue: BooleanInvestigationValue | undefined;
    addressValue: AddressInvestigationValue | undefined;
    formSignatureFlagsValue: FormSignatureInvestigationValue | undefined;
    readonly mode: InvestigationActionDtoMode | undefined;

    constructor(data?: IInvestigationActionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.textValue = _data["textValue"] ? TextInvestigationValue.fromJS(_data["textValue"]) : <any>undefined;
            this.lookupValue = _data["lookupValue"] ? LookupInvestigationValue.fromJS(_data["lookupValue"]) : <any>undefined;
            this.dateTimeValue = _data["dateTimeValue"] ? DateTimeInvestigationValue.fromJS(_data["dateTimeValue"]) : <any>undefined;
            this.booleanValue = _data["booleanValue"] ? BooleanInvestigationValue.fromJS(_data["booleanValue"]) : <any>undefined;
            this.addressValue = _data["addressValue"] ? AddressInvestigationValue.fromJS(_data["addressValue"]) : <any>undefined;
            this.formSignatureFlagsValue = _data["formSignatureFlagsValue"] ? FormSignatureInvestigationValue.fromJS(_data["formSignatureFlagsValue"]) : <any>undefined;
            (<any>this).mode = _data["mode"];
        }
    }

    static fromJS(data: any): InvestigationActionDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvestigationActionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["textValue"] = this.textValue ? this.textValue.toJSON() : <any>undefined;
        data["lookupValue"] = this.lookupValue ? this.lookupValue.toJSON() : <any>undefined;
        data["dateTimeValue"] = this.dateTimeValue ? this.dateTimeValue.toJSON() : <any>undefined;
        data["booleanValue"] = this.booleanValue ? this.booleanValue.toJSON() : <any>undefined;
        data["addressValue"] = this.addressValue ? this.addressValue.toJSON() : <any>undefined;
        data["formSignatureFlagsValue"] = this.formSignatureFlagsValue ? this.formSignatureFlagsValue.toJSON() : <any>undefined;
        data["mode"] = this.mode;
        return data; 
    }

    clone(): InvestigationActionDto {
        const json = this.toJSON();
        let result = new InvestigationActionDto();
        result.init(json);
        return result;
    }
}

export interface IInvestigationActionDto {
    textValue: TextInvestigationValue | undefined;
    lookupValue: LookupInvestigationValue | undefined;
    dateTimeValue: DateTimeInvestigationValue | undefined;
    booleanValue: BooleanInvestigationValue | undefined;
    addressValue: AddressInvestigationValue | undefined;
    formSignatureFlagsValue: FormSignatureInvestigationValue | undefined;
    mode: InvestigationActionDtoMode | undefined;
}

export class OrderUnauthorizedFormChangeValidationItemDto implements IOrderUnauthorizedFormChangeValidationItemDto {
    orderId: string | undefined;
    orderLineId: string | undefined;
    srfFormFieldId: string | undefined;
    productId: string | undefined;
    productName: string | undefined;
    submittedFormModValue: boolean | undefined;
    prohibitedConfigAtValidation: boolean | undefined;
    prohibitedConfigCurrent: boolean | undefined;
    formModFlag: boolean | undefined;

    constructor(data?: IOrderUnauthorizedFormChangeValidationItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.orderLineId = _data["orderLineId"];
            this.srfFormFieldId = _data["srfFormFieldId"];
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.submittedFormModValue = _data["submittedFormModValue"];
            this.prohibitedConfigAtValidation = _data["prohibitedConfigAtValidation"];
            this.prohibitedConfigCurrent = _data["prohibitedConfigCurrent"];
            this.formModFlag = _data["formModFlag"];
        }
    }

    static fromJS(data: any): OrderUnauthorizedFormChangeValidationItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderUnauthorizedFormChangeValidationItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["orderLineId"] = this.orderLineId;
        data["srfFormFieldId"] = this.srfFormFieldId;
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["submittedFormModValue"] = this.submittedFormModValue;
        data["prohibitedConfigAtValidation"] = this.prohibitedConfigAtValidation;
        data["prohibitedConfigCurrent"] = this.prohibitedConfigCurrent;
        data["formModFlag"] = this.formModFlag;
        return data; 
    }

    clone(): OrderUnauthorizedFormChangeValidationItemDto {
        const json = this.toJSON();
        let result = new OrderUnauthorizedFormChangeValidationItemDto();
        result.init(json);
        return result;
    }
}

export interface IOrderUnauthorizedFormChangeValidationItemDto {
    orderId: string | undefined;
    orderLineId: string | undefined;
    srfFormFieldId: string | undefined;
    productId: string | undefined;
    productName: string | undefined;
    submittedFormModValue: boolean | undefined;
    prohibitedConfigAtValidation: boolean | undefined;
    prohibitedConfigCurrent: boolean | undefined;
    formModFlag: boolean | undefined;
}

export class FileUpload implements IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    duplicateFileName: boolean | undefined;

    constructor(data?: IFileUpload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"];
            this.fileDescription = _data["fileDescription"];
            this.fileType = _data["fileType"];
            this.base64FileContent = _data["base64FileContent"];
            this.location = _data["location"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.newFlag = _data["newFlag"];
            this.duplicateFileName = _data["duplicateFileName"];
        }
    }

    static fromJS(data: any): FileUpload {
        data = typeof data === 'object' ? data : {};
        let result = new FileUpload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileDescription"] = this.fileDescription;
        data["fileType"] = this.fileType;
        data["base64FileContent"] = this.base64FileContent;
        data["location"] = this.location;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["newFlag"] = this.newFlag;
        data["duplicateFileName"] = this.duplicateFileName;
        return data; 
    }

    clone(): FileUpload {
        const json = this.toJSON();
        let result = new FileUpload();
        result.init(json);
        return result;
    }
}

export interface IFileUpload {
    fileName: string | undefined;
    fileDescription: string | undefined;
    fileType: string | undefined;
    base64FileContent: string | undefined;
    location: string | undefined;
    creationTime: Date | undefined;
    creatorUserId: number | undefined;
    newFlag: boolean | undefined;
    duplicateFileName: boolean | undefined;
}

export class TextInvestigationValue implements ITextInvestigationValue {
    readonly value: string | undefined;
    readonly doubleEntryValue: string | undefined;
    readonly mask: TextInvestigationValueMask | undefined;
    readonly isDoubleEntry: boolean | undefined;
    readonly maxLength: number | undefined;
    readonly label: string | undefined;

    constructor(data?: ITextInvestigationValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).value = _data["value"];
            (<any>this).doubleEntryValue = _data["doubleEntryValue"];
            (<any>this).mask = _data["mask"];
            (<any>this).isDoubleEntry = _data["isDoubleEntry"];
            (<any>this).maxLength = _data["maxLength"];
            (<any>this).label = _data["label"];
        }
    }

    static fromJS(data: any): TextInvestigationValue {
        data = typeof data === 'object' ? data : {};
        let result = new TextInvestigationValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["doubleEntryValue"] = this.doubleEntryValue;
        data["mask"] = this.mask;
        data["isDoubleEntry"] = this.isDoubleEntry;
        data["maxLength"] = this.maxLength;
        data["label"] = this.label;
        return data; 
    }

    clone(): TextInvestigationValue {
        const json = this.toJSON();
        let result = new TextInvestigationValue();
        result.init(json);
        return result;
    }
}

export interface ITextInvestigationValue {
    value: string | undefined;
    doubleEntryValue: string | undefined;
    mask: TextInvestigationValueMask | undefined;
    isDoubleEntry: boolean | undefined;
    maxLength: number | undefined;
    label: string | undefined;
}

export class BooleanInvestigationValue implements IBooleanInvestigationValue {
    readonly value: boolean | undefined;
    readonly label: string | undefined;

    constructor(data?: IBooleanInvestigationValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).value = _data["value"];
            (<any>this).label = _data["label"];
        }
    }

    static fromJS(data: any): BooleanInvestigationValue {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanInvestigationValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["label"] = this.label;
        return data; 
    }

    clone(): BooleanInvestigationValue {
        const json = this.toJSON();
        let result = new BooleanInvestigationValue();
        result.init(json);
        return result;
    }
}

export interface IBooleanInvestigationValue {
    value: boolean | undefined;
    label: string | undefined;
}

export class DateTimeInvestigationValue implements IDateTimeInvestigationValue {
    readonly value: Date | undefined;
    readonly restrictedDateTime: Date | undefined;
    readonly isRestrictedDateTime: boolean | undefined;
    readonly label: string | undefined;

    constructor(data?: IDateTimeInvestigationValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).value = _data["value"] ? new Date(_data["value"].toString()) : <any>undefined;
            (<any>this).restrictedDateTime = _data["restrictedDateTime"] ? new Date(_data["restrictedDateTime"].toString()) : <any>undefined;
            (<any>this).isRestrictedDateTime = _data["isRestrictedDateTime"];
            (<any>this).label = _data["label"];
        }
    }

    static fromJS(data: any): DateTimeInvestigationValue {
        data = typeof data === 'object' ? data : {};
        let result = new DateTimeInvestigationValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value ? this.value.toISOString() : <any>undefined;
        data["restrictedDateTime"] = this.restrictedDateTime ? this.restrictedDateTime.toISOString() : <any>undefined;
        data["isRestrictedDateTime"] = this.isRestrictedDateTime;
        data["label"] = this.label;
        return data; 
    }

    clone(): DateTimeInvestigationValue {
        const json = this.toJSON();
        let result = new DateTimeInvestigationValue();
        result.init(json);
        return result;
    }
}

export interface IDateTimeInvestigationValue {
    value: Date | undefined;
    restrictedDateTime: Date | undefined;
    isRestrictedDateTime: boolean | undefined;
    label: string | undefined;
}

export class LookupInvestigationValue implements ILookupInvestigationValue {
    id: string | undefined;
    code: string | undefined;
    readonly dataType: LookupInvestigationValueDataType | undefined;
    readonly formType: LookupInvestigationValueFormType | undefined;
    readonly label: string | undefined;

    constructor(data?: ILookupInvestigationValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            (<any>this).dataType = _data["dataType"];
            (<any>this).formType = _data["formType"];
            (<any>this).label = _data["label"];
        }
    }

    static fromJS(data: any): LookupInvestigationValue {
        data = typeof data === 'object' ? data : {};
        let result = new LookupInvestigationValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["dataType"] = this.dataType;
        data["formType"] = this.formType;
        data["label"] = this.label;
        return data; 
    }

    clone(): LookupInvestigationValue {
        const json = this.toJSON();
        let result = new LookupInvestigationValue();
        result.init(json);
        return result;
    }
}

export interface ILookupInvestigationValue {
    id: string | undefined;
    code: string | undefined;
    dataType: LookupInvestigationValueDataType | undefined;
    formType: LookupInvestigationValueFormType | undefined;
    label: string | undefined;
}

export class AddressInvestigationValue implements IAddressInvestigationValue {
    readonly addressLine1Label: string | undefined;
    readonly addressLine2Label: string | undefined;
    readonly cityLabel: string | undefined;
    readonly stateLabel: string | undefined;
    readonly zipCodeLabel: string | undefined;
    addressLine1: string | undefined;
    addressLine2: string | undefined;
    city: string | undefined;
    state: string | undefined;
    zipCode: string | undefined;
    readonly simpleAddress: SimpleAddress | undefined;
    readonly addressLine1Mismatch: boolean | undefined;
    readonly addressLine2Mismatch: boolean | undefined;
    readonly cityMismatch: boolean | undefined;
    readonly stateMismatch: boolean | undefined;
    readonly zipCodeMismatch: boolean | undefined;

    constructor(data?: IAddressInvestigationValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).addressLine1Label = _data["addressLine1Label"];
            (<any>this).addressLine2Label = _data["addressLine2Label"];
            (<any>this).cityLabel = _data["cityLabel"];
            (<any>this).stateLabel = _data["stateLabel"];
            (<any>this).zipCodeLabel = _data["zipCodeLabel"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
            (<any>this).simpleAddress = _data["simpleAddress"] ? SimpleAddress.fromJS(_data["simpleAddress"]) : <any>undefined;
            (<any>this).addressLine1Mismatch = _data["addressLine1Mismatch"];
            (<any>this).addressLine2Mismatch = _data["addressLine2Mismatch"];
            (<any>this).cityMismatch = _data["cityMismatch"];
            (<any>this).stateMismatch = _data["stateMismatch"];
            (<any>this).zipCodeMismatch = _data["zipCodeMismatch"];
        }
    }

    static fromJS(data: any): AddressInvestigationValue {
        data = typeof data === 'object' ? data : {};
        let result = new AddressInvestigationValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addressLine1Label"] = this.addressLine1Label;
        data["addressLine2Label"] = this.addressLine2Label;
        data["cityLabel"] = this.cityLabel;
        data["stateLabel"] = this.stateLabel;
        data["zipCodeLabel"] = this.zipCodeLabel;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        data["simpleAddress"] = this.simpleAddress ? this.simpleAddress.toJSON() : <any>undefined;
        data["addressLine1Mismatch"] = this.addressLine1Mismatch;
        data["addressLine2Mismatch"] = this.addressLine2Mismatch;
        data["cityMismatch"] = this.cityMismatch;
        data["stateMismatch"] = this.stateMismatch;
        data["zipCodeMismatch"] = this.zipCodeMismatch;
        return data; 
    }

    clone(): AddressInvestigationValue {
        const json = this.toJSON();
        let result = new AddressInvestigationValue();
        result.init(json);
        return result;
    }
}

export interface IAddressInvestigationValue {
    addressLine1Label: string | undefined;
    addressLine2Label: string | undefined;
    cityLabel: string | undefined;
    stateLabel: string | undefined;
    zipCodeLabel: string | undefined;
    addressLine1: string | undefined;
    addressLine2: string | undefined;
    city: string | undefined;
    state: string | undefined;
    zipCode: string | undefined;
    simpleAddress: SimpleAddress | undefined;
    addressLine1Mismatch: boolean | undefined;
    addressLine2Mismatch: boolean | undefined;
    cityMismatch: boolean | undefined;
    stateMismatch: boolean | undefined;
    zipCodeMismatch: boolean | undefined;
}

export class LookupsInvestigationValue implements ILookupsInvestigationValue {
    readonly ids: string[] | undefined;
    readonly codes: string[] | undefined;
    readonly dataType: LookupsInvestigationValueDataType | undefined;
    readonly formType: LookupsInvestigationValueFormType | undefined;
    readonly label: string | undefined;

    constructor(data?: ILookupsInvestigationValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                (<any>this).ids = [] as any;
                for (let item of _data["ids"])
                    (<any>this).ids.push(item);
            }
            if (Array.isArray(_data["codes"])) {
                (<any>this).codes = [] as any;
                for (let item of _data["codes"])
                    (<any>this).codes.push(item);
            }
            (<any>this).dataType = _data["dataType"];
            (<any>this).formType = _data["formType"];
            (<any>this).label = _data["label"];
        }
    }

    static fromJS(data: any): LookupsInvestigationValue {
        data = typeof data === 'object' ? data : {};
        let result = new LookupsInvestigationValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        if (Array.isArray(this.codes)) {
            data["codes"] = [];
            for (let item of this.codes)
                data["codes"].push(item);
        }
        data["dataType"] = this.dataType;
        data["formType"] = this.formType;
        data["label"] = this.label;
        return data; 
    }

    clone(): LookupsInvestigationValue {
        const json = this.toJSON();
        let result = new LookupsInvestigationValue();
        result.init(json);
        return result;
    }
}

export interface ILookupsInvestigationValue {
    ids: string[] | undefined;
    codes: string[] | undefined;
    dataType: LookupsInvestigationValueDataType | undefined;
    formType: LookupsInvestigationValueFormType | undefined;
    label: string | undefined;
}

export class FormSignatureInvestigationValue implements IFormSignatureInvestigationValue {
    readonly isSignaturePresentLabel: string | undefined;
    readonly isSignatureStampedLabel: string | undefined;
    readonly isSignatureMatchLabel: string | undefined;
    isSignaturePresent: boolean | undefined;
    isSignatureStamped: boolean | undefined;
    isSignatureMatch: boolean | undefined;

    constructor(data?: IFormSignatureInvestigationValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).isSignaturePresentLabel = _data["isSignaturePresentLabel"];
            (<any>this).isSignatureStampedLabel = _data["isSignatureStampedLabel"];
            (<any>this).isSignatureMatchLabel = _data["isSignatureMatchLabel"];
            this.isSignaturePresent = _data["isSignaturePresent"];
            this.isSignatureStamped = _data["isSignatureStamped"];
            this.isSignatureMatch = _data["isSignatureMatch"];
        }
    }

    static fromJS(data: any): FormSignatureInvestigationValue {
        data = typeof data === 'object' ? data : {};
        let result = new FormSignatureInvestigationValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSignaturePresentLabel"] = this.isSignaturePresentLabel;
        data["isSignatureStampedLabel"] = this.isSignatureStampedLabel;
        data["isSignatureMatchLabel"] = this.isSignatureMatchLabel;
        data["isSignaturePresent"] = this.isSignaturePresent;
        data["isSignatureStamped"] = this.isSignatureStamped;
        data["isSignatureMatch"] = this.isSignatureMatch;
        return data; 
    }

    clone(): FormSignatureInvestigationValue {
        const json = this.toJSON();
        let result = new FormSignatureInvestigationValue();
        result.init(json);
        return result;
    }
}

export interface IFormSignatureInvestigationValue {
    isSignaturePresentLabel: string | undefined;
    isSignatureStampedLabel: string | undefined;
    isSignatureMatchLabel: string | undefined;
    isSignaturePresent: boolean | undefined;
    isSignatureStamped: boolean | undefined;
    isSignatureMatch: boolean | undefined;
}

export class SimpleAddress implements ISimpleAddress {
    addressLine1: string | undefined;
    addressLine2: string | undefined;
    city: string | undefined;
    state: string | undefined;
    zipCode: string | undefined;

    constructor(data?: ISimpleAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipCode = _data["zipCode"];
        }
    }

    static fromJS(data: any): SimpleAddress {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipCode"] = this.zipCode;
        return data; 
    }

    clone(): SimpleAddress {
        const json = this.toJSON();
        let result = new SimpleAddress();
        result.init(json);
        return result;
    }
}

export interface ISimpleAddress {
    addressLine1: string | undefined;
    addressLine2: string | undefined;
    city: string | undefined;
    state: string | undefined;
    zipCode: string | undefined;
}

export class AjaxResponseOfString implements IAjaxResponseOfString {
    result: string | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfString {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfString {
        const json = this.toJSON();
        let result = new AjaxResponseOfString();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfString {
    result: string | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfInvestigationCurrentValueDto implements IAjaxResponseOfInvestigationCurrentValueDto {
    result: InvestigationCurrentValueDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfInvestigationCurrentValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? InvestigationCurrentValueDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfInvestigationCurrentValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfInvestigationCurrentValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfInvestigationCurrentValueDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfInvestigationCurrentValueDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfInvestigationCurrentValueDto {
    result: InvestigationCurrentValueDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class InvestigationCurrentValueDto implements IInvestigationCurrentValueDto {
    ruleCode: string | undefined;
    ruleName: string | undefined;
    isNoLongerEnabledInLiveConfig: boolean | undefined;
    isNoLongerAppliesToProductInLiveConfig: boolean | undefined;
    textValue: TextInvestigationValue | undefined;
    lookupValue: LookupInvestigationValue | undefined;
    addressValue: AddressInvestigationValue | undefined;
    lookupsValue: LookupsInvestigationValue | undefined;
    dateTimeValue: DateTimeInvestigationValue | undefined;
    readonly mode: InvestigationCurrentValueDtoMode | undefined;

    constructor(data?: IInvestigationCurrentValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.isNoLongerEnabledInLiveConfig = _data["isNoLongerEnabledInLiveConfig"];
            this.isNoLongerAppliesToProductInLiveConfig = _data["isNoLongerAppliesToProductInLiveConfig"];
            this.textValue = _data["textValue"] ? TextInvestigationValue.fromJS(_data["textValue"]) : <any>undefined;
            this.lookupValue = _data["lookupValue"] ? LookupInvestigationValue.fromJS(_data["lookupValue"]) : <any>undefined;
            this.addressValue = _data["addressValue"] ? AddressInvestigationValue.fromJS(_data["addressValue"]) : <any>undefined;
            this.lookupsValue = _data["lookupsValue"] ? LookupsInvestigationValue.fromJS(_data["lookupsValue"]) : <any>undefined;
            this.dateTimeValue = _data["dateTimeValue"] ? DateTimeInvestigationValue.fromJS(_data["dateTimeValue"]) : <any>undefined;
            (<any>this).mode = _data["mode"];
        }
    }

    static fromJS(data: any): InvestigationCurrentValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvestigationCurrentValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["isNoLongerEnabledInLiveConfig"] = this.isNoLongerEnabledInLiveConfig;
        data["isNoLongerAppliesToProductInLiveConfig"] = this.isNoLongerAppliesToProductInLiveConfig;
        data["textValue"] = this.textValue ? this.textValue.toJSON() : <any>undefined;
        data["lookupValue"] = this.lookupValue ? this.lookupValue.toJSON() : <any>undefined;
        data["addressValue"] = this.addressValue ? this.addressValue.toJSON() : <any>undefined;
        data["lookupsValue"] = this.lookupsValue ? this.lookupsValue.toJSON() : <any>undefined;
        data["dateTimeValue"] = this.dateTimeValue ? this.dateTimeValue.toJSON() : <any>undefined;
        data["mode"] = this.mode;
        return data; 
    }

    clone(): InvestigationCurrentValueDto {
        const json = this.toJSON();
        let result = new InvestigationCurrentValueDto();
        result.init(json);
        return result;
    }
}

export interface IInvestigationCurrentValueDto {
    ruleCode: string | undefined;
    ruleName: string | undefined;
    isNoLongerEnabledInLiveConfig: boolean | undefined;
    isNoLongerAppliesToProductInLiveConfig: boolean | undefined;
    textValue: TextInvestigationValue | undefined;
    lookupValue: LookupInvestigationValue | undefined;
    addressValue: AddressInvestigationValue | undefined;
    lookupsValue: LookupsInvestigationValue | undefined;
    dateTimeValue: DateTimeInvestigationValue | undefined;
    mode: InvestigationCurrentValueDtoMode | undefined;
}

export class AjaxResponseOfPageValidationOfOrderDto implements IAjaxResponseOfPageValidationOfOrderDto {
    result: PageValidationOfOrderDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfOrderDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfOrderDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfOrderDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfOrderDto {
    result: PageValidationOfOrderDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfOrderDto implements IPageValidationOfOrderDto {
    dataDto: OrderDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? OrderDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfOrderDto {
        const json = this.toJSON();
        let result = new PageValidationOfOrderDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfOrderDto {
    dataDto: OrderDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class OrderDto implements IOrderDto {
    id: string | undefined;
    orderNumber: string | undefined;
    externalOrderNumber: string | undefined;
    orderDate: Date | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    parentOrderNumber: string | undefined;
    parentOrderId: string | undefined;
    replacementOrderNumber: string | undefined;
    replacementOrderId: string | undefined;
    originalOrderNumber: string | undefined;
    originalOrderId: string | undefined;
    orderStatusId: string | undefined;
    readonly orderStatusTimeDiff: number | undefined;
    orderStatusLastModifiedTime: Date | undefined;
    program: string | undefined;
    jobId: string | undefined;
    programStatusId: string | undefined;
    modifiedBy: number | undefined;
    modifiedTime: Date | undefined;
    orderSourceId: string | undefined;
    relatedOfferId: string | undefined;
    relatedOfferNumber: string | undefined;
    formId: string | undefined;
    batchNumber: string | undefined;
    batchDate: Date | undefined;
    showStatusReasonTypeModalLink: boolean | undefined;
    itemsReturned: boolean | undefined;
    lockInfo: LockDto | undefined;
    childOrders: SimpleOrderDto[] | undefined;
    orderStatusReasonTypeId: string[] | undefined;
    lifeCycle: StepperLifeCycleStageDto[] | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    desiredDeliveryDate: Date | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderNumber = _data["orderNumber"];
            this.externalOrderNumber = _data["externalOrderNumber"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.requestDate = _data["requestDate"] ? new Date(_data["requestDate"].toString()) : <any>undefined;
            this.missingRequestDate = _data["missingRequestDate"];
            this.parentOrderNumber = _data["parentOrderNumber"];
            this.parentOrderId = _data["parentOrderId"];
            this.replacementOrderNumber = _data["replacementOrderNumber"];
            this.replacementOrderId = _data["replacementOrderId"];
            this.originalOrderNumber = _data["originalOrderNumber"];
            this.originalOrderId = _data["originalOrderId"];
            this.orderStatusId = _data["orderStatusId"];
            (<any>this).orderStatusTimeDiff = _data["orderStatusTimeDiff"];
            this.orderStatusLastModifiedTime = _data["orderStatusLastModifiedTime"] ? new Date(_data["orderStatusLastModifiedTime"].toString()) : <any>undefined;
            this.program = _data["program"];
            this.jobId = _data["jobId"];
            this.programStatusId = _data["programStatusId"];
            this.modifiedBy = _data["modifiedBy"];
            this.modifiedTime = _data["modifiedTime"] ? new Date(_data["modifiedTime"].toString()) : <any>undefined;
            this.orderSourceId = _data["orderSourceId"];
            this.relatedOfferId = _data["relatedOfferId"];
            this.relatedOfferNumber = _data["relatedOfferNumber"];
            this.formId = _data["formId"];
            this.batchNumber = _data["batchNumber"];
            this.batchDate = _data["batchDate"] ? new Date(_data["batchDate"].toString()) : <any>undefined;
            this.showStatusReasonTypeModalLink = _data["showStatusReasonTypeModalLink"];
            this.itemsReturned = _data["itemsReturned"];
            this.lockInfo = _data["lockInfo"] ? LockDto.fromJS(_data["lockInfo"]) : <any>undefined;
            if (Array.isArray(_data["childOrders"])) {
                this.childOrders = [] as any;
                for (let item of _data["childOrders"])
                    this.childOrders.push(SimpleOrderDto.fromJS(item));
            }
            if (Array.isArray(_data["orderStatusReasonTypeId"])) {
                this.orderStatusReasonTypeId = [] as any;
                for (let item of _data["orderStatusReasonTypeId"])
                    this.orderStatusReasonTypeId.push(item);
            }
            if (Array.isArray(_data["lifeCycle"])) {
                this.lifeCycle = [] as any;
                for (let item of _data["lifeCycle"])
                    this.lifeCycle.push(StepperLifeCycleStageDto.fromJS(item));
            }
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.desiredDeliveryDate = _data["desiredDeliveryDate"] ? new Date(_data["desiredDeliveryDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderNumber"] = this.orderNumber;
        data["externalOrderNumber"] = this.externalOrderNumber;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["missingRequestDate"] = this.missingRequestDate;
        data["parentOrderNumber"] = this.parentOrderNumber;
        data["parentOrderId"] = this.parentOrderId;
        data["replacementOrderNumber"] = this.replacementOrderNumber;
        data["replacementOrderId"] = this.replacementOrderId;
        data["originalOrderNumber"] = this.originalOrderNumber;
        data["originalOrderId"] = this.originalOrderId;
        data["orderStatusId"] = this.orderStatusId;
        data["orderStatusTimeDiff"] = this.orderStatusTimeDiff;
        data["orderStatusLastModifiedTime"] = this.orderStatusLastModifiedTime ? this.orderStatusLastModifiedTime.toISOString() : <any>undefined;
        data["program"] = this.program;
        data["jobId"] = this.jobId;
        data["programStatusId"] = this.programStatusId;
        data["modifiedBy"] = this.modifiedBy;
        data["modifiedTime"] = this.modifiedTime ? this.modifiedTime.toISOString() : <any>undefined;
        data["orderSourceId"] = this.orderSourceId;
        data["relatedOfferId"] = this.relatedOfferId;
        data["relatedOfferNumber"] = this.relatedOfferNumber;
        data["formId"] = this.formId;
        data["batchNumber"] = this.batchNumber;
        data["batchDate"] = this.batchDate ? this.batchDate.toISOString() : <any>undefined;
        data["showStatusReasonTypeModalLink"] = this.showStatusReasonTypeModalLink;
        data["itemsReturned"] = this.itemsReturned;
        data["lockInfo"] = this.lockInfo ? this.lockInfo.toJSON() : <any>undefined;
        if (Array.isArray(this.childOrders)) {
            data["childOrders"] = [];
            for (let item of this.childOrders)
                data["childOrders"].push(item.toJSON());
        }
        if (Array.isArray(this.orderStatusReasonTypeId)) {
            data["orderStatusReasonTypeId"] = [];
            for (let item of this.orderStatusReasonTypeId)
                data["orderStatusReasonTypeId"].push(item);
        }
        if (Array.isArray(this.lifeCycle)) {
            data["lifeCycle"] = [];
            for (let item of this.lifeCycle)
                data["lifeCycle"].push(item.toJSON());
        }
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["desiredDeliveryDate"] = this.desiredDeliveryDate ? this.desiredDeliveryDate.toISOString() : <any>undefined;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): OrderDto {
        const json = this.toJSON();
        let result = new OrderDto();
        result.init(json);
        return result;
    }
}

export interface IOrderDto {
    id: string | undefined;
    orderNumber: string | undefined;
    externalOrderNumber: string | undefined;
    orderDate: Date | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    parentOrderNumber: string | undefined;
    parentOrderId: string | undefined;
    replacementOrderNumber: string | undefined;
    replacementOrderId: string | undefined;
    originalOrderNumber: string | undefined;
    originalOrderId: string | undefined;
    orderStatusId: string | undefined;
    orderStatusTimeDiff: number | undefined;
    orderStatusLastModifiedTime: Date | undefined;
    program: string | undefined;
    jobId: string | undefined;
    programStatusId: string | undefined;
    modifiedBy: number | undefined;
    modifiedTime: Date | undefined;
    orderSourceId: string | undefined;
    relatedOfferId: string | undefined;
    relatedOfferNumber: string | undefined;
    formId: string | undefined;
    batchNumber: string | undefined;
    batchDate: Date | undefined;
    showStatusReasonTypeModalLink: boolean | undefined;
    itemsReturned: boolean | undefined;
    lockInfo: LockDto | undefined;
    childOrders: SimpleOrderDto[] | undefined;
    orderStatusReasonTypeId: string[] | undefined;
    lifeCycle: StepperLifeCycleStageDto[] | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    desiredDeliveryDate: Date | undefined;
    names: LocalizedValue[] | undefined;
}

export class LockDto implements ILockDto {
    isLocked: boolean | undefined;
    lockedByUserId: number | undefined;
    lockTimestamp: Date | undefined;
    lockExpiryTimestamp: Date | undefined;
    unlockedByUserId: number | undefined;
    unlockTimestamp: Date | undefined;
    unlockReasonId: string | undefined;

    constructor(data?: ILockDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isLocked = _data["isLocked"];
            this.lockedByUserId = _data["lockedByUserId"];
            this.lockTimestamp = _data["lockTimestamp"] ? new Date(_data["lockTimestamp"].toString()) : <any>undefined;
            this.lockExpiryTimestamp = _data["lockExpiryTimestamp"] ? new Date(_data["lockExpiryTimestamp"].toString()) : <any>undefined;
            this.unlockedByUserId = _data["unlockedByUserId"];
            this.unlockTimestamp = _data["unlockTimestamp"] ? new Date(_data["unlockTimestamp"].toString()) : <any>undefined;
            this.unlockReasonId = _data["unlockReasonId"];
        }
    }

    static fromJS(data: any): LockDto {
        data = typeof data === 'object' ? data : {};
        let result = new LockDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isLocked"] = this.isLocked;
        data["lockedByUserId"] = this.lockedByUserId;
        data["lockTimestamp"] = this.lockTimestamp ? this.lockTimestamp.toISOString() : <any>undefined;
        data["lockExpiryTimestamp"] = this.lockExpiryTimestamp ? this.lockExpiryTimestamp.toISOString() : <any>undefined;
        data["unlockedByUserId"] = this.unlockedByUserId;
        data["unlockTimestamp"] = this.unlockTimestamp ? this.unlockTimestamp.toISOString() : <any>undefined;
        data["unlockReasonId"] = this.unlockReasonId;
        return data; 
    }

    clone(): LockDto {
        const json = this.toJSON();
        let result = new LockDto();
        result.init(json);
        return result;
    }
}

export interface ILockDto {
    isLocked: boolean | undefined;
    lockedByUserId: number | undefined;
    lockTimestamp: Date | undefined;
    lockExpiryTimestamp: Date | undefined;
    unlockedByUserId: number | undefined;
    unlockTimestamp: Date | undefined;
    unlockReasonId: string | undefined;
}

export class SimpleOrderDto implements ISimpleOrderDto {
    id: string | undefined;
    orderId: string | undefined;
    orderPassedThresholdDate: Date | undefined;

    constructor(data?: ISimpleOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orderId = _data["orderId"];
            this.orderPassedThresholdDate = _data["orderPassedThresholdDate"] ? new Date(_data["orderPassedThresholdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SimpleOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderId"] = this.orderId;
        data["orderPassedThresholdDate"] = this.orderPassedThresholdDate ? this.orderPassedThresholdDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): SimpleOrderDto {
        const json = this.toJSON();
        let result = new SimpleOrderDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleOrderDto {
    id: string | undefined;
    orderId: string | undefined;
    orderPassedThresholdDate: Date | undefined;
}

export class StepperLifeCycleStageDto implements IStepperLifeCycleStageDto {
    classificationValueId: string | undefined;
    index: number | undefined;
    status: StepperLifeCycleStageDtoStatus | undefined;

    constructor(data?: IStepperLifeCycleStageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.classificationValueId = _data["classificationValueId"];
            this.index = _data["index"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): StepperLifeCycleStageDto {
        data = typeof data === 'object' ? data : {};
        let result = new StepperLifeCycleStageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["classificationValueId"] = this.classificationValueId;
        data["index"] = this.index;
        data["status"] = this.status;
        return data; 
    }

    clone(): StepperLifeCycleStageDto {
        const json = this.toJSON();
        let result = new StepperLifeCycleStageDto();
        result.init(json);
        return result;
    }
}

export interface IStepperLifeCycleStageDto {
    classificationValueId: string | undefined;
    index: number | undefined;
    status: StepperLifeCycleStageDtoStatus | undefined;
}

export class LocalizedValue implements ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;

    constructor(data?: ILocalizedValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LocalizedValue {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language;
        data["value"] = this.value;
        return data; 
    }

    clone(): LocalizedValue {
        const json = this.toJSON();
        let result = new LocalizedValue();
        result.init(json);
        return result;
    }
}

export interface ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;
}

export class AjaxResponseOfPageValidationOfOrderHcpSalesRepDto implements IAjaxResponseOfPageValidationOfOrderHcpSalesRepDto {
    result: PageValidationOfOrderHcpSalesRepDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfOrderHcpSalesRepDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfOrderHcpSalesRepDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfOrderHcpSalesRepDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfOrderHcpSalesRepDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfOrderHcpSalesRepDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfOrderHcpSalesRepDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfOrderHcpSalesRepDto {
    result: PageValidationOfOrderHcpSalesRepDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfOrderHcpSalesRepDto implements IPageValidationOfOrderHcpSalesRepDto {
    dataDto: OrderHcpSalesRepDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfOrderHcpSalesRepDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? OrderHcpSalesRepDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfOrderHcpSalesRepDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfOrderHcpSalesRepDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfOrderHcpSalesRepDto {
        const json = this.toJSON();
        let result = new PageValidationOfOrderHcpSalesRepDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfOrderHcpSalesRepDto {
    dataDto: OrderHcpSalesRepDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class OrderHcpSalesRepDto implements IOrderHcpSalesRepDto {
    institutionFlag: boolean | undefined;
    repDrivenFlag: boolean | undefined;
    orderStatusId: string | undefined;
    orderSourceId: string | undefined;
    originalSalesRep: OrderSalesRepDetailsDto | undefined;
    currentSalesRep: OrderSalesRepDetailsDto | undefined;
    requestorHcpDetails: OrderHcpDetailsDto | undefined;
    recipientHcpDetails: OrderHcpDetailsDto | undefined;
    shippingAddress: ShippingAddressDto | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    advancedEditFlag: boolean | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    id: string | undefined;

    constructor(data?: IOrderHcpSalesRepDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.institutionFlag = _data["institutionFlag"];
            this.repDrivenFlag = _data["repDrivenFlag"];
            this.orderStatusId = _data["orderStatusId"];
            this.orderSourceId = _data["orderSourceId"];
            this.originalSalesRep = _data["originalSalesRep"] ? OrderSalesRepDetailsDto.fromJS(_data["originalSalesRep"]) : <any>undefined;
            this.currentSalesRep = _data["currentSalesRep"] ? OrderSalesRepDetailsDto.fromJS(_data["currentSalesRep"]) : <any>undefined;
            this.requestorHcpDetails = _data["requestorHcpDetails"] ? OrderHcpDetailsDto.fromJS(_data["requestorHcpDetails"]) : <any>undefined;
            this.recipientHcpDetails = _data["recipientHcpDetails"] ? OrderHcpDetailsDto.fromJS(_data["recipientHcpDetails"]) : <any>undefined;
            this.shippingAddress = _data["shippingAddress"] ? ShippingAddressDto.fromJS(_data["shippingAddress"]) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.advancedEditFlag = _data["advancedEditFlag"];
            this.requestDate = _data["requestDate"] ? new Date(_data["requestDate"].toString()) : <any>undefined;
            this.missingRequestDate = _data["missingRequestDate"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OrderHcpSalesRepDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderHcpSalesRepDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["institutionFlag"] = this.institutionFlag;
        data["repDrivenFlag"] = this.repDrivenFlag;
        data["orderStatusId"] = this.orderStatusId;
        data["orderSourceId"] = this.orderSourceId;
        data["originalSalesRep"] = this.originalSalesRep ? this.originalSalesRep.toJSON() : <any>undefined;
        data["currentSalesRep"] = this.currentSalesRep ? this.currentSalesRep.toJSON() : <any>undefined;
        data["requestorHcpDetails"] = this.requestorHcpDetails ? this.requestorHcpDetails.toJSON() : <any>undefined;
        data["recipientHcpDetails"] = this.recipientHcpDetails ? this.recipientHcpDetails.toJSON() : <any>undefined;
        data["shippingAddress"] = this.shippingAddress ? this.shippingAddress.toJSON() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["advancedEditFlag"] = this.advancedEditFlag;
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["missingRequestDate"] = this.missingRequestDate;
        data["id"] = this.id;
        return data; 
    }

    clone(): OrderHcpSalesRepDto {
        const json = this.toJSON();
        let result = new OrderHcpSalesRepDto();
        result.init(json);
        return result;
    }
}

export interface IOrderHcpSalesRepDto {
    institutionFlag: boolean | undefined;
    repDrivenFlag: boolean | undefined;
    orderStatusId: string | undefined;
    orderSourceId: string | undefined;
    originalSalesRep: OrderSalesRepDetailsDto | undefined;
    currentSalesRep: OrderSalesRepDetailsDto | undefined;
    requestorHcpDetails: OrderHcpDetailsDto | undefined;
    recipientHcpDetails: OrderHcpDetailsDto | undefined;
    shippingAddress: ShippingAddressDto | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    advancedEditFlag: boolean | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    id: string | undefined;
}

export class OrderSalesRepDetailsDto implements IOrderSalesRepDetailsDto {
    firstName: string | undefined;
    middleName: string | undefined;
    lastName: string | undefined;
    repId: string | undefined;
    territoryCode: string | undefined;
    emailAddressText: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;

    constructor(data?: IOrderSalesRepDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.repId = _data["repId"];
            this.territoryCode = _data["territoryCode"];
            this.emailAddressText = _data["emailAddressText"];
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
        }
    }

    static fromJS(data: any): OrderSalesRepDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderSalesRepDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["repId"] = this.repId;
        data["territoryCode"] = this.territoryCode;
        data["emailAddressText"] = this.emailAddressText;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        return data; 
    }

    clone(): OrderSalesRepDetailsDto {
        const json = this.toJSON();
        let result = new OrderSalesRepDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IOrderSalesRepDetailsDto {
    firstName: string | undefined;
    middleName: string | undefined;
    lastName: string | undefined;
    repId: string | undefined;
    territoryCode: string | undefined;
    emailAddressText: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
}

export class OrderHcpDetailsDto implements IOrderHcpDetailsDto {
    hcpId: string | undefined;
    knipperHcpId: string | undefined;
    clientTargetId: string | undefined;
    firstName: string | undefined;
    middleName: string | undefined;
    lastName: string | undefined;
    suffixId: string | undefined;
    professionalDesignationId: string | undefined;
    specialtyId: string | undefined;
    stateLicenseStateId: string | undefined;
    stateLicenseNbr: string | undefined;
    stateId: string | undefined;
    address1Text: string | undefined;
    address2Text: string | undefined;
    cityName: string | undefined;
    zipCode: string | undefined;
    addressId: string | undefined;
    companyName: string | undefined;
    san: string | undefined;
    deaNbr: string | undefined;
    emailAddressText: string | undefined;
    phoneNbr: string | undefined;
    phoneExtensionNbr: string | undefined;
    faxNbr: string | undefined;
    missingFirstNameFlag: boolean | undefined;
    missingLastNameFlag: boolean | undefined;
    missingSpecialtyCodeFlag: boolean | undefined;
    missingStateLicenseNbrFlag: boolean | undefined;
    missingAddress1TextFlag: boolean | undefined;
    missingCityNameFlag: boolean | undefined;
    missingZipCodeFlag: boolean | undefined;
    missingStateCodeFlag: boolean | undefined;
    missingProfessionalDesignationCodeFlag: boolean | undefined;
    missingStateLicenseStateCodeFlag: boolean | undefined;
    missingDeaNumberFlag: boolean | undefined;
    missingSanFlag: boolean | undefined;
    formModFirstNameFlag: boolean | undefined;
    formModMiddleNameFlag: boolean | undefined;
    formModLastNameFlag: boolean | undefined;
    formModStateLicenseNumberFlag: boolean | undefined;
    formModDeaLicenseNumberFlag: boolean | undefined;
    formModProfessionalDesignationFlag: boolean | undefined;
    formModSpecialtyFlag: boolean | undefined;
    formModCompanyFlag: boolean | undefined;
    formModAddress1Flag: boolean | undefined;
    formModAddress2Flag: boolean | undefined;
    formModCityFlag: boolean | undefined;
    formModStateFlag: boolean | undefined;
    formModZipCodeFlag: boolean | undefined;

    constructor(data?: IOrderHcpDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hcpId = _data["hcpId"];
            this.knipperHcpId = _data["knipperHcpId"];
            this.clientTargetId = _data["clientTargetId"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.suffixId = _data["suffixId"];
            this.professionalDesignationId = _data["professionalDesignationId"];
            this.specialtyId = _data["specialtyId"];
            this.stateLicenseStateId = _data["stateLicenseStateId"];
            this.stateLicenseNbr = _data["stateLicenseNbr"];
            this.stateId = _data["stateId"];
            this.address1Text = _data["address1Text"];
            this.address2Text = _data["address2Text"];
            this.cityName = _data["cityName"];
            this.zipCode = _data["zipCode"];
            this.addressId = _data["addressId"];
            this.companyName = _data["companyName"];
            this.san = _data["san"];
            this.deaNbr = _data["deaNbr"];
            this.emailAddressText = _data["emailAddressText"];
            this.phoneNbr = _data["phoneNbr"];
            this.phoneExtensionNbr = _data["phoneExtensionNbr"];
            this.faxNbr = _data["faxNbr"];
            this.missingFirstNameFlag = _data["missingFirstNameFlag"];
            this.missingLastNameFlag = _data["missingLastNameFlag"];
            this.missingSpecialtyCodeFlag = _data["missingSpecialtyCodeFlag"];
            this.missingStateLicenseNbrFlag = _data["missingStateLicenseNbrFlag"];
            this.missingAddress1TextFlag = _data["missingAddress1TextFlag"];
            this.missingCityNameFlag = _data["missingCityNameFlag"];
            this.missingZipCodeFlag = _data["missingZipCodeFlag"];
            this.missingStateCodeFlag = _data["missingStateCodeFlag"];
            this.missingProfessionalDesignationCodeFlag = _data["missingProfessionalDesignationCodeFlag"];
            this.missingStateLicenseStateCodeFlag = _data["missingStateLicenseStateCodeFlag"];
            this.missingDeaNumberFlag = _data["missingDeaNumberFlag"];
            this.missingSanFlag = _data["missingSanFlag"];
            this.formModFirstNameFlag = _data["formModFirstNameFlag"];
            this.formModMiddleNameFlag = _data["formModMiddleNameFlag"];
            this.formModLastNameFlag = _data["formModLastNameFlag"];
            this.formModStateLicenseNumberFlag = _data["formModStateLicenseNumberFlag"];
            this.formModDeaLicenseNumberFlag = _data["formModDeaLicenseNumberFlag"];
            this.formModProfessionalDesignationFlag = _data["formModProfessionalDesignationFlag"];
            this.formModSpecialtyFlag = _data["formModSpecialtyFlag"];
            this.formModCompanyFlag = _data["formModCompanyFlag"];
            this.formModAddress1Flag = _data["formModAddress1Flag"];
            this.formModAddress2Flag = _data["formModAddress2Flag"];
            this.formModCityFlag = _data["formModCityFlag"];
            this.formModStateFlag = _data["formModStateFlag"];
            this.formModZipCodeFlag = _data["formModZipCodeFlag"];
        }
    }

    static fromJS(data: any): OrderHcpDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderHcpDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hcpId"] = this.hcpId;
        data["knipperHcpId"] = this.knipperHcpId;
        data["clientTargetId"] = this.clientTargetId;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["suffixId"] = this.suffixId;
        data["professionalDesignationId"] = this.professionalDesignationId;
        data["specialtyId"] = this.specialtyId;
        data["stateLicenseStateId"] = this.stateLicenseStateId;
        data["stateLicenseNbr"] = this.stateLicenseNbr;
        data["stateId"] = this.stateId;
        data["address1Text"] = this.address1Text;
        data["address2Text"] = this.address2Text;
        data["cityName"] = this.cityName;
        data["zipCode"] = this.zipCode;
        data["addressId"] = this.addressId;
        data["companyName"] = this.companyName;
        data["san"] = this.san;
        data["deaNbr"] = this.deaNbr;
        data["emailAddressText"] = this.emailAddressText;
        data["phoneNbr"] = this.phoneNbr;
        data["phoneExtensionNbr"] = this.phoneExtensionNbr;
        data["faxNbr"] = this.faxNbr;
        data["missingFirstNameFlag"] = this.missingFirstNameFlag;
        data["missingLastNameFlag"] = this.missingLastNameFlag;
        data["missingSpecialtyCodeFlag"] = this.missingSpecialtyCodeFlag;
        data["missingStateLicenseNbrFlag"] = this.missingStateLicenseNbrFlag;
        data["missingAddress1TextFlag"] = this.missingAddress1TextFlag;
        data["missingCityNameFlag"] = this.missingCityNameFlag;
        data["missingZipCodeFlag"] = this.missingZipCodeFlag;
        data["missingStateCodeFlag"] = this.missingStateCodeFlag;
        data["missingProfessionalDesignationCodeFlag"] = this.missingProfessionalDesignationCodeFlag;
        data["missingStateLicenseStateCodeFlag"] = this.missingStateLicenseStateCodeFlag;
        data["missingDeaNumberFlag"] = this.missingDeaNumberFlag;
        data["missingSanFlag"] = this.missingSanFlag;
        data["formModFirstNameFlag"] = this.formModFirstNameFlag;
        data["formModMiddleNameFlag"] = this.formModMiddleNameFlag;
        data["formModLastNameFlag"] = this.formModLastNameFlag;
        data["formModStateLicenseNumberFlag"] = this.formModStateLicenseNumberFlag;
        data["formModDeaLicenseNumberFlag"] = this.formModDeaLicenseNumberFlag;
        data["formModProfessionalDesignationFlag"] = this.formModProfessionalDesignationFlag;
        data["formModSpecialtyFlag"] = this.formModSpecialtyFlag;
        data["formModCompanyFlag"] = this.formModCompanyFlag;
        data["formModAddress1Flag"] = this.formModAddress1Flag;
        data["formModAddress2Flag"] = this.formModAddress2Flag;
        data["formModCityFlag"] = this.formModCityFlag;
        data["formModStateFlag"] = this.formModStateFlag;
        data["formModZipCodeFlag"] = this.formModZipCodeFlag;
        return data; 
    }

    clone(): OrderHcpDetailsDto {
        const json = this.toJSON();
        let result = new OrderHcpDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IOrderHcpDetailsDto {
    hcpId: string | undefined;
    knipperHcpId: string | undefined;
    clientTargetId: string | undefined;
    firstName: string | undefined;
    middleName: string | undefined;
    lastName: string | undefined;
    suffixId: string | undefined;
    professionalDesignationId: string | undefined;
    specialtyId: string | undefined;
    stateLicenseStateId: string | undefined;
    stateLicenseNbr: string | undefined;
    stateId: string | undefined;
    address1Text: string | undefined;
    address2Text: string | undefined;
    cityName: string | undefined;
    zipCode: string | undefined;
    addressId: string | undefined;
    companyName: string | undefined;
    san: string | undefined;
    deaNbr: string | undefined;
    emailAddressText: string | undefined;
    phoneNbr: string | undefined;
    phoneExtensionNbr: string | undefined;
    faxNbr: string | undefined;
    missingFirstNameFlag: boolean | undefined;
    missingLastNameFlag: boolean | undefined;
    missingSpecialtyCodeFlag: boolean | undefined;
    missingStateLicenseNbrFlag: boolean | undefined;
    missingAddress1TextFlag: boolean | undefined;
    missingCityNameFlag: boolean | undefined;
    missingZipCodeFlag: boolean | undefined;
    missingStateCodeFlag: boolean | undefined;
    missingProfessionalDesignationCodeFlag: boolean | undefined;
    missingStateLicenseStateCodeFlag: boolean | undefined;
    missingDeaNumberFlag: boolean | undefined;
    missingSanFlag: boolean | undefined;
    formModFirstNameFlag: boolean | undefined;
    formModMiddleNameFlag: boolean | undefined;
    formModLastNameFlag: boolean | undefined;
    formModStateLicenseNumberFlag: boolean | undefined;
    formModDeaLicenseNumberFlag: boolean | undefined;
    formModProfessionalDesignationFlag: boolean | undefined;
    formModSpecialtyFlag: boolean | undefined;
    formModCompanyFlag: boolean | undefined;
    formModAddress1Flag: boolean | undefined;
    formModAddress2Flag: boolean | undefined;
    formModCityFlag: boolean | undefined;
    formModStateFlag: boolean | undefined;
    formModZipCodeFlag: boolean | undefined;
}

export class ShippingAddressDto implements IShippingAddressDto {
    orderId: string | undefined;
    firstName: string | undefined;
    middleName: string | undefined;
    lastName: string | undefined;
    suffixClassificationValueId: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    companyName: string | undefined;
    address1Text: string | undefined;
    address2Text: string | undefined;
    address3Text: string | undefined;
    address4Text: string | undefined;
    cityName: string | undefined;
    zipCode: string | undefined;
    stateCode: string | undefined;
    countryCode: string | undefined;

    constructor(data?: IShippingAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.suffixClassificationValueId = _data["suffixClassificationValueId"];
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.requestDate = _data["requestDate"] ? new Date(_data["requestDate"].toString()) : <any>undefined;
            this.missingRequestDate = _data["missingRequestDate"];
            this.companyName = _data["companyName"];
            this.address1Text = _data["address1Text"];
            this.address2Text = _data["address2Text"];
            this.address3Text = _data["address3Text"];
            this.address4Text = _data["address4Text"];
            this.cityName = _data["cityName"];
            this.zipCode = _data["zipCode"];
            this.stateCode = _data["stateCode"];
            this.countryCode = _data["countryCode"];
        }
    }

    static fromJS(data: any): ShippingAddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShippingAddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["suffixClassificationValueId"] = this.suffixClassificationValueId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["missingRequestDate"] = this.missingRequestDate;
        data["companyName"] = this.companyName;
        data["address1Text"] = this.address1Text;
        data["address2Text"] = this.address2Text;
        data["address3Text"] = this.address3Text;
        data["address4Text"] = this.address4Text;
        data["cityName"] = this.cityName;
        data["zipCode"] = this.zipCode;
        data["stateCode"] = this.stateCode;
        data["countryCode"] = this.countryCode;
        return data; 
    }

    clone(): ShippingAddressDto {
        const json = this.toJSON();
        let result = new ShippingAddressDto();
        result.init(json);
        return result;
    }
}

export interface IShippingAddressDto {
    orderId: string | undefined;
    firstName: string | undefined;
    middleName: string | undefined;
    lastName: string | undefined;
    suffixClassificationValueId: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    companyName: string | undefined;
    address1Text: string | undefined;
    address2Text: string | undefined;
    address3Text: string | undefined;
    address4Text: string | undefined;
    cityName: string | undefined;
    zipCode: string | undefined;
    stateCode: string | undefined;
    countryCode: string | undefined;
}

export class AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto implements IAjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto {
    result: PageValidationOfOrderAttachmentAndCommentsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfOrderAttachmentAndCommentsDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfOrderAttachmentAndCommentsDto {
    result: PageValidationOfOrderAttachmentAndCommentsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfOrderAttachmentAndCommentsDto implements IPageValidationOfOrderAttachmentAndCommentsDto {
    dataDto: OrderAttachmentAndCommentsDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfOrderAttachmentAndCommentsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? OrderAttachmentAndCommentsDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfOrderAttachmentAndCommentsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfOrderAttachmentAndCommentsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfOrderAttachmentAndCommentsDto {
        const json = this.toJSON();
        let result = new PageValidationOfOrderAttachmentAndCommentsDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfOrderAttachmentAndCommentsDto {
    dataDto: OrderAttachmentAndCommentsDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class OrderAttachmentAndCommentsDto implements IOrderAttachmentAndCommentsDto {
    orderAttachments: OrderAttachmentDto[] | undefined;
    orderComments: OrderCommentDto[] | undefined;
    comments: string | undefined;
    description: string | undefined;
    orderStatusId: string | undefined;
    attachment: FileUpload | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IOrderAttachmentAndCommentsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["orderAttachments"])) {
                this.orderAttachments = [] as any;
                for (let item of _data["orderAttachments"])
                    this.orderAttachments.push(OrderAttachmentDto.fromJS(item));
            }
            if (Array.isArray(_data["orderComments"])) {
                this.orderComments = [] as any;
                for (let item of _data["orderComments"])
                    this.orderComments.push(OrderCommentDto.fromJS(item));
            }
            this.comments = _data["comments"];
            this.description = _data["description"];
            this.orderStatusId = _data["orderStatusId"];
            this.attachment = _data["attachment"] ? FileUpload.fromJS(_data["attachment"]) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OrderAttachmentAndCommentsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderAttachmentAndCommentsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.orderAttachments)) {
            data["orderAttachments"] = [];
            for (let item of this.orderAttachments)
                data["orderAttachments"].push(item.toJSON());
        }
        if (Array.isArray(this.orderComments)) {
            data["orderComments"] = [];
            for (let item of this.orderComments)
                data["orderComments"].push(item.toJSON());
        }
        data["comments"] = this.comments;
        data["description"] = this.description;
        data["orderStatusId"] = this.orderStatusId;
        data["attachment"] = this.attachment ? this.attachment.toJSON() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): OrderAttachmentAndCommentsDto {
        const json = this.toJSON();
        let result = new OrderAttachmentAndCommentsDto();
        result.init(json);
        return result;
    }
}

export interface IOrderAttachmentAndCommentsDto {
    orderAttachments: OrderAttachmentDto[] | undefined;
    orderComments: OrderCommentDto[] | undefined;
    comments: string | undefined;
    description: string | undefined;
    orderStatusId: string | undefined;
    attachment: FileUpload | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    id: string | undefined;
}

export class OrderCommentDto implements IOrderCommentDto {
    comments: string | undefined;
    commentedByName: string | undefined;
    orderStatusId: string | undefined;
    commentBy: number | undefined;
    commentDateTime: Date | undefined;
    srfAdverseEventFlag: boolean | undefined;
    id: string | undefined;

    constructor(data?: IOrderCommentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.comments = _data["comments"];
            this.commentedByName = _data["commentedByName"];
            this.orderStatusId = _data["orderStatusId"];
            this.commentBy = _data["commentBy"];
            this.commentDateTime = _data["commentDateTime"] ? new Date(_data["commentDateTime"].toString()) : <any>undefined;
            this.srfAdverseEventFlag = _data["srfAdverseEventFlag"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OrderCommentDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderCommentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comments"] = this.comments;
        data["commentedByName"] = this.commentedByName;
        data["orderStatusId"] = this.orderStatusId;
        data["commentBy"] = this.commentBy;
        data["commentDateTime"] = this.commentDateTime ? this.commentDateTime.toISOString() : <any>undefined;
        data["srfAdverseEventFlag"] = this.srfAdverseEventFlag;
        data["id"] = this.id;
        return data; 
    }

    clone(): OrderCommentDto {
        const json = this.toJSON();
        let result = new OrderCommentDto();
        result.init(json);
        return result;
    }
}

export interface IOrderCommentDto {
    comments: string | undefined;
    commentedByName: string | undefined;
    orderStatusId: string | undefined;
    commentBy: number | undefined;
    commentDateTime: Date | undefined;
    srfAdverseEventFlag: boolean | undefined;
    id: string | undefined;
}

export class OrderAttachmentAndCommentUpdateDto implements IOrderAttachmentAndCommentUpdateDto {
    orderAttachments: OrderAttachmentDto[] | undefined;
    orderComment: OrderCommentDto | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    id: string | undefined;

    constructor(data?: IOrderAttachmentAndCommentUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["orderAttachments"])) {
                this.orderAttachments = [] as any;
                for (let item of _data["orderAttachments"])
                    this.orderAttachments.push(OrderAttachmentDto.fromJS(item));
            }
            this.orderComment = _data["orderComment"] ? OrderCommentDto.fromJS(_data["orderComment"]) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.requestDate = _data["requestDate"] ? new Date(_data["requestDate"].toString()) : <any>undefined;
            this.missingRequestDate = _data["missingRequestDate"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OrderAttachmentAndCommentUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderAttachmentAndCommentUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.orderAttachments)) {
            data["orderAttachments"] = [];
            for (let item of this.orderAttachments)
                data["orderAttachments"].push(item.toJSON());
        }
        data["orderComment"] = this.orderComment ? this.orderComment.toJSON() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["missingRequestDate"] = this.missingRequestDate;
        data["id"] = this.id;
        return data; 
    }

    clone(): OrderAttachmentAndCommentUpdateDto {
        const json = this.toJSON();
        let result = new OrderAttachmentAndCommentUpdateDto();
        result.init(json);
        return result;
    }
}

export interface IOrderAttachmentAndCommentUpdateDto {
    orderAttachments: OrderAttachmentDto[] | undefined;
    orderComment: OrderCommentDto | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    id: string | undefined;
}

export class AjaxResponseOfPageValidationOfOrderDetailsDto implements IAjaxResponseOfPageValidationOfOrderDetailsDto {
    result: PageValidationOfOrderDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfOrderDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfOrderDetailsDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfOrderDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfOrderDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfOrderDetailsDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfOrderDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfOrderDetailsDto {
    result: PageValidationOfOrderDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfOrderDetailsDto implements IPageValidationOfOrderDetailsDto {
    dataDto: OrderDetailsDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfOrderDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? OrderDetailsDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfOrderDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfOrderDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfOrderDetailsDto {
        const json = this.toJSON();
        let result = new PageValidationOfOrderDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfOrderDetailsDto {
    dataDto: OrderDetailsDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class OrderDetailsDto implements IOrderDetailsDto {
    optOutFlag: boolean | undefined;
    ohioTdddExemptionFlag: boolean | undefined;
    hcpSignaturePresentFlag: boolean | undefined;
    hcpSignatureStampedFlag: boolean | undefined;
    hcpSignatureMatchFlag: boolean | undefined;
    hcpSignedDatePresentFlag: boolean | undefined;
    missingHCPSignedDateFlag: boolean | undefined;
    hcpSignatureDateStampedFlag: boolean | undefined;
    hcpSignatureDate: Date | undefined;
    orderComment: string | undefined;
    srfAdverseEventFlag: boolean | undefined;
    srfAdverseEventComment: string | undefined;
    orderStatusId: string | undefined;
    orderSourceId: string | undefined;
    orderLines: OrderLineDto[] | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    formCommentHistory: OrderCommentDto[] | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    id: string | undefined;

    constructor(data?: IOrderDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.optOutFlag = _data["optOutFlag"];
            this.ohioTdddExemptionFlag = _data["ohioTdddExemptionFlag"];
            this.hcpSignaturePresentFlag = _data["hcpSignaturePresentFlag"];
            this.hcpSignatureStampedFlag = _data["hcpSignatureStampedFlag"];
            this.hcpSignatureMatchFlag = _data["hcpSignatureMatchFlag"];
            this.hcpSignedDatePresentFlag = _data["hcpSignedDatePresentFlag"];
            this.missingHCPSignedDateFlag = _data["missingHCPSignedDateFlag"];
            this.hcpSignatureDateStampedFlag = _data["hcpSignatureDateStampedFlag"];
            this.hcpSignatureDate = _data["hcpSignatureDate"] ? new Date(_data["hcpSignatureDate"].toString()) : <any>undefined;
            this.orderComment = _data["orderComment"];
            this.srfAdverseEventFlag = _data["srfAdverseEventFlag"];
            this.srfAdverseEventComment = _data["srfAdverseEventComment"];
            this.orderStatusId = _data["orderStatusId"];
            this.orderSourceId = _data["orderSourceId"];
            if (Array.isArray(_data["orderLines"])) {
                this.orderLines = [] as any;
                for (let item of _data["orderLines"])
                    this.orderLines.push(OrderLineDto.fromJS(item));
            }
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            if (Array.isArray(_data["formCommentHistory"])) {
                this.formCommentHistory = [] as any;
                for (let item of _data["formCommentHistory"])
                    this.formCommentHistory.push(OrderCommentDto.fromJS(item));
            }
            this.requestDate = _data["requestDate"] ? new Date(_data["requestDate"].toString()) : <any>undefined;
            this.missingRequestDate = _data["missingRequestDate"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OrderDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["optOutFlag"] = this.optOutFlag;
        data["ohioTdddExemptionFlag"] = this.ohioTdddExemptionFlag;
        data["hcpSignaturePresentFlag"] = this.hcpSignaturePresentFlag;
        data["hcpSignatureStampedFlag"] = this.hcpSignatureStampedFlag;
        data["hcpSignatureMatchFlag"] = this.hcpSignatureMatchFlag;
        data["hcpSignedDatePresentFlag"] = this.hcpSignedDatePresentFlag;
        data["missingHCPSignedDateFlag"] = this.missingHCPSignedDateFlag;
        data["hcpSignatureDateStampedFlag"] = this.hcpSignatureDateStampedFlag;
        data["hcpSignatureDate"] = this.hcpSignatureDate ? this.hcpSignatureDate.toISOString() : <any>undefined;
        data["orderComment"] = this.orderComment;
        data["srfAdverseEventFlag"] = this.srfAdverseEventFlag;
        data["srfAdverseEventComment"] = this.srfAdverseEventComment;
        data["orderStatusId"] = this.orderStatusId;
        data["orderSourceId"] = this.orderSourceId;
        if (Array.isArray(this.orderLines)) {
            data["orderLines"] = [];
            for (let item of this.orderLines)
                data["orderLines"].push(item.toJSON());
        }
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        if (Array.isArray(this.formCommentHistory)) {
            data["formCommentHistory"] = [];
            for (let item of this.formCommentHistory)
                data["formCommentHistory"].push(item.toJSON());
        }
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["missingRequestDate"] = this.missingRequestDate;
        data["id"] = this.id;
        return data; 
    }

    clone(): OrderDetailsDto {
        const json = this.toJSON();
        let result = new OrderDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IOrderDetailsDto {
    optOutFlag: boolean | undefined;
    ohioTdddExemptionFlag: boolean | undefined;
    hcpSignaturePresentFlag: boolean | undefined;
    hcpSignatureStampedFlag: boolean | undefined;
    hcpSignatureMatchFlag: boolean | undefined;
    hcpSignedDatePresentFlag: boolean | undefined;
    missingHCPSignedDateFlag: boolean | undefined;
    hcpSignatureDateStampedFlag: boolean | undefined;
    hcpSignatureDate: Date | undefined;
    orderComment: string | undefined;
    srfAdverseEventFlag: boolean | undefined;
    srfAdverseEventComment: string | undefined;
    orderStatusId: string | undefined;
    orderSourceId: string | undefined;
    orderLines: OrderLineDto[] | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    formCommentHistory: OrderCommentDto[] | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    id: string | undefined;
}

export class OrderLineDto implements IOrderLineDto {
    orderId: string | undefined;
    productId: string | undefined;
    orderLineStatusClassificationValueId: string | undefined;
    distributionUoMClassificationValueId: string | undefined;
    orderLineNbr: number | undefined;
    orderQty: number | undefined;
    shippedQty: number | undefined;
    deliveredQty: number | undefined;
    canceledQty: number | undefined;
    backorderedQty: number | undefined;
    returnedQty: number | undefined;
    adjustedOrderQty: number | undefined;
    adjustedDeliveredQty: number | undefined;
    autoIncludedQty: number | undefined;
    wmsProductId: string | undefined;
    wmsProductName: string | undefined;
    productGroup: string | undefined;
    isEditable: boolean | undefined;
    isAdjustedDeliveredQtyEditable: boolean | undefined;
    showFormModFields: boolean | undefined;
    formModProductFlag: boolean | undefined;
    formModOrderQtyFlag: boolean | undefined;
    isAutoInclude: boolean | undefined;
    displayQuantity: string | undefined;
    quantityMultiplier: number | undefined;
    autoIncludeRules: SimpleAutoIncludeRuleDto[] | undefined;
    id: string | undefined;

    constructor(data?: IOrderLineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.productId = _data["productId"];
            this.orderLineStatusClassificationValueId = _data["orderLineStatusClassificationValueId"];
            this.distributionUoMClassificationValueId = _data["distributionUoMClassificationValueId"];
            this.orderLineNbr = _data["orderLineNbr"];
            this.orderQty = _data["orderQty"];
            this.shippedQty = _data["shippedQty"];
            this.deliveredQty = _data["deliveredQty"];
            this.canceledQty = _data["canceledQty"];
            this.backorderedQty = _data["backorderedQty"];
            this.returnedQty = _data["returnedQty"];
            this.adjustedOrderQty = _data["adjustedOrderQty"];
            this.adjustedDeliveredQty = _data["adjustedDeliveredQty"];
            this.autoIncludedQty = _data["autoIncludedQty"];
            this.wmsProductId = _data["wmsProductId"];
            this.wmsProductName = _data["wmsProductName"];
            this.productGroup = _data["productGroup"];
            this.isEditable = _data["isEditable"];
            this.isAdjustedDeliveredQtyEditable = _data["isAdjustedDeliveredQtyEditable"];
            this.showFormModFields = _data["showFormModFields"];
            this.formModProductFlag = _data["formModProductFlag"];
            this.formModOrderQtyFlag = _data["formModOrderQtyFlag"];
            this.isAutoInclude = _data["isAutoInclude"];
            this.displayQuantity = _data["displayQuantity"];
            this.quantityMultiplier = _data["quantityMultiplier"];
            if (Array.isArray(_data["autoIncludeRules"])) {
                this.autoIncludeRules = [] as any;
                for (let item of _data["autoIncludeRules"])
                    this.autoIncludeRules.push(SimpleAutoIncludeRuleDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OrderLineDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderLineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["productId"] = this.productId;
        data["orderLineStatusClassificationValueId"] = this.orderLineStatusClassificationValueId;
        data["distributionUoMClassificationValueId"] = this.distributionUoMClassificationValueId;
        data["orderLineNbr"] = this.orderLineNbr;
        data["orderQty"] = this.orderQty;
        data["shippedQty"] = this.shippedQty;
        data["deliveredQty"] = this.deliveredQty;
        data["canceledQty"] = this.canceledQty;
        data["backorderedQty"] = this.backorderedQty;
        data["returnedQty"] = this.returnedQty;
        data["adjustedOrderQty"] = this.adjustedOrderQty;
        data["adjustedDeliveredQty"] = this.adjustedDeliveredQty;
        data["autoIncludedQty"] = this.autoIncludedQty;
        data["wmsProductId"] = this.wmsProductId;
        data["wmsProductName"] = this.wmsProductName;
        data["productGroup"] = this.productGroup;
        data["isEditable"] = this.isEditable;
        data["isAdjustedDeliveredQtyEditable"] = this.isAdjustedDeliveredQtyEditable;
        data["showFormModFields"] = this.showFormModFields;
        data["formModProductFlag"] = this.formModProductFlag;
        data["formModOrderQtyFlag"] = this.formModOrderQtyFlag;
        data["isAutoInclude"] = this.isAutoInclude;
        data["displayQuantity"] = this.displayQuantity;
        data["quantityMultiplier"] = this.quantityMultiplier;
        if (Array.isArray(this.autoIncludeRules)) {
            data["autoIncludeRules"] = [];
            for (let item of this.autoIncludeRules)
                data["autoIncludeRules"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): OrderLineDto {
        const json = this.toJSON();
        let result = new OrderLineDto();
        result.init(json);
        return result;
    }
}

export interface IOrderLineDto {
    orderId: string | undefined;
    productId: string | undefined;
    orderLineStatusClassificationValueId: string | undefined;
    distributionUoMClassificationValueId: string | undefined;
    orderLineNbr: number | undefined;
    orderQty: number | undefined;
    shippedQty: number | undefined;
    deliveredQty: number | undefined;
    canceledQty: number | undefined;
    backorderedQty: number | undefined;
    returnedQty: number | undefined;
    adjustedOrderQty: number | undefined;
    adjustedDeliveredQty: number | undefined;
    autoIncludedQty: number | undefined;
    wmsProductId: string | undefined;
    wmsProductName: string | undefined;
    productGroup: string | undefined;
    isEditable: boolean | undefined;
    isAdjustedDeliveredQtyEditable: boolean | undefined;
    showFormModFields: boolean | undefined;
    formModProductFlag: boolean | undefined;
    formModOrderQtyFlag: boolean | undefined;
    isAutoInclude: boolean | undefined;
    displayQuantity: string | undefined;
    quantityMultiplier: number | undefined;
    autoIncludeRules: SimpleAutoIncludeRuleDto[] | undefined;
    id: string | undefined;
}

export class SimpleAutoIncludeRuleDto implements ISimpleAutoIncludeRuleDto {
    programId: string | undefined;
    dtpProgramConfigId: string | undefined;
    ruleNumber: number | undefined;
    description: string | undefined;

    constructor(data?: ISimpleAutoIncludeRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.dtpProgramConfigId = _data["dtpProgramConfigId"];
            this.ruleNumber = _data["ruleNumber"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): SimpleAutoIncludeRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleAutoIncludeRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["dtpProgramConfigId"] = this.dtpProgramConfigId;
        data["ruleNumber"] = this.ruleNumber;
        data["description"] = this.description;
        return data; 
    }

    clone(): SimpleAutoIncludeRuleDto {
        const json = this.toJSON();
        let result = new SimpleAutoIncludeRuleDto();
        result.init(json);
        return result;
    }
}

export interface ISimpleAutoIncludeRuleDto {
    programId: string | undefined;
    dtpProgramConfigId: string | undefined;
    ruleNumber: number | undefined;
    description: string | undefined;
}

export class AjaxResponseOfCancelOrderRequestStatusDto implements IAjaxResponseOfCancelOrderRequestStatusDto {
    result: CancelOrderRequestStatusDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfCancelOrderRequestStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? CancelOrderRequestStatusDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfCancelOrderRequestStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfCancelOrderRequestStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfCancelOrderRequestStatusDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfCancelOrderRequestStatusDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfCancelOrderRequestStatusDto {
    result: CancelOrderRequestStatusDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class CancelOrderRequestStatusDto implements ICancelOrderRequestStatusDto {
    orderId: string | undefined;
    requestedTimestamp: Date | undefined;

    constructor(data?: ICancelOrderRequestStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.requestedTimestamp = _data["requestedTimestamp"] ? new Date(_data["requestedTimestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CancelOrderRequestStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new CancelOrderRequestStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["requestedTimestamp"] = this.requestedTimestamp ? this.requestedTimestamp.toISOString() : <any>undefined;
        return data; 
    }

    clone(): CancelOrderRequestStatusDto {
        const json = this.toJSON();
        let result = new CancelOrderRequestStatusDto();
        result.init(json);
        return result;
    }
}

export interface ICancelOrderRequestStatusDto {
    orderId: string | undefined;
    requestedTimestamp: Date | undefined;
}

export class CancelOrderRequestDto implements ICancelOrderRequestDto {
    orderId: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;

    constructor(data?: ICancelOrderRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
        }
    }

    static fromJS(data: any): CancelOrderRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CancelOrderRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        return data; 
    }

    clone(): CancelOrderRequestDto {
        const json = this.toJSON();
        let result = new CancelOrderRequestDto();
        result.init(json);
        return result;
    }
}

export interface ICancelOrderRequestDto {
    orderId: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
}

export class CancelOrderInSamplicityRequestDto implements ICancelOrderInSamplicityRequestDto {
    orderId: string | undefined;
    commentText: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;

    constructor(data?: ICancelOrderInSamplicityRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.commentText = _data["commentText"];
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
        }
    }

    static fromJS(data: any): CancelOrderInSamplicityRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CancelOrderInSamplicityRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["commentText"] = this.commentText;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        return data; 
    }

    clone(): CancelOrderInSamplicityRequestDto {
        const json = this.toJSON();
        let result = new CancelOrderInSamplicityRequestDto();
        result.init(json);
        return result;
    }
}

export interface ICancelOrderInSamplicityRequestDto {
    orderId: string | undefined;
    commentText: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
}

export class AjaxResponseOfCancelOrderInSamplicityResultDto implements IAjaxResponseOfCancelOrderInSamplicityResultDto {
    result: CancelOrderInSamplicityResultDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfCancelOrderInSamplicityResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? CancelOrderInSamplicityResultDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfCancelOrderInSamplicityResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfCancelOrderInSamplicityResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfCancelOrderInSamplicityResultDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfCancelOrderInSamplicityResultDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfCancelOrderInSamplicityResultDto {
    result: CancelOrderInSamplicityResultDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class CancelOrderInSamplicityResultDto implements ICancelOrderInSamplicityResultDto {
    orderId: string | undefined;
    orderNumber: string | undefined;
    orderStatusId: string | undefined;
    isSuccessfullyCancelled: boolean | undefined;
    cancellationFailureReasonText: string | undefined;

    constructor(data?: ICancelOrderInSamplicityResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.orderNumber = _data["orderNumber"];
            this.orderStatusId = _data["orderStatusId"];
            this.isSuccessfullyCancelled = _data["isSuccessfullyCancelled"];
            this.cancellationFailureReasonText = _data["cancellationFailureReasonText"];
        }
    }

    static fromJS(data: any): CancelOrderInSamplicityResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CancelOrderInSamplicityResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["orderNumber"] = this.orderNumber;
        data["orderStatusId"] = this.orderStatusId;
        data["isSuccessfullyCancelled"] = this.isSuccessfullyCancelled;
        data["cancellationFailureReasonText"] = this.cancellationFailureReasonText;
        return data; 
    }

    clone(): CancelOrderInSamplicityResultDto {
        const json = this.toJSON();
        let result = new CancelOrderInSamplicityResultDto();
        result.init(json);
        return result;
    }
}

export interface ICancelOrderInSamplicityResultDto {
    orderId: string | undefined;
    orderNumber: string | undefined;
    orderStatusId: string | undefined;
    isSuccessfullyCancelled: boolean | undefined;
    cancellationFailureReasonText: string | undefined;
}

export class BulkCancelOrderInSamplicityRequestDto implements IBulkCancelOrderInSamplicityRequestDto {
    orderIds: string[] | undefined;
    commentText: string | undefined;

    constructor(data?: IBulkCancelOrderInSamplicityRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["orderIds"])) {
                this.orderIds = [] as any;
                for (let item of _data["orderIds"])
                    this.orderIds.push(item);
            }
            this.commentText = _data["commentText"];
        }
    }

    static fromJS(data: any): BulkCancelOrderInSamplicityRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new BulkCancelOrderInSamplicityRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.orderIds)) {
            data["orderIds"] = [];
            for (let item of this.orderIds)
                data["orderIds"].push(item);
        }
        data["commentText"] = this.commentText;
        return data; 
    }

    clone(): BulkCancelOrderInSamplicityRequestDto {
        const json = this.toJSON();
        let result = new BulkCancelOrderInSamplicityRequestDto();
        result.init(json);
        return result;
    }
}

export interface IBulkCancelOrderInSamplicityRequestDto {
    orderIds: string[] | undefined;
    commentText: string | undefined;
}

export class AjaxResponseOfBulkCancelOrderInSamplicityResponseDto implements IAjaxResponseOfBulkCancelOrderInSamplicityResponseDto {
    result: BulkCancelOrderInSamplicityResponseDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfBulkCancelOrderInSamplicityResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? BulkCancelOrderInSamplicityResponseDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfBulkCancelOrderInSamplicityResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfBulkCancelOrderInSamplicityResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfBulkCancelOrderInSamplicityResponseDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfBulkCancelOrderInSamplicityResponseDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfBulkCancelOrderInSamplicityResponseDto {
    result: BulkCancelOrderInSamplicityResponseDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class BulkCancelOrderInSamplicityResponseDto implements IBulkCancelOrderInSamplicityResponseDto {
    selectedOrderCount: number | undefined;
    cancelResults: CancelOrderInSamplicityResultDto[] | undefined;

    constructor(data?: IBulkCancelOrderInSamplicityResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.selectedOrderCount = _data["selectedOrderCount"];
            if (Array.isArray(_data["cancelResults"])) {
                this.cancelResults = [] as any;
                for (let item of _data["cancelResults"])
                    this.cancelResults.push(CancelOrderInSamplicityResultDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BulkCancelOrderInSamplicityResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new BulkCancelOrderInSamplicityResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["selectedOrderCount"] = this.selectedOrderCount;
        if (Array.isArray(this.cancelResults)) {
            data["cancelResults"] = [];
            for (let item of this.cancelResults)
                data["cancelResults"].push(item.toJSON());
        }
        return data; 
    }

    clone(): BulkCancelOrderInSamplicityResponseDto {
        const json = this.toJSON();
        let result = new BulkCancelOrderInSamplicityResponseDto();
        result.init(json);
        return result;
    }
}

export interface IBulkCancelOrderInSamplicityResponseDto {
    selectedOrderCount: number | undefined;
    cancelResults: CancelOrderInSamplicityResultDto[] | undefined;
}

export class SelectDayVerificationDto implements ISelectDayVerificationDto {
    desiredDeliveryDate: Date | undefined;
    hcpReached: boolean | undefined;
    comment: OrderCommentDto | undefined;
    orderId: string | undefined;
    selectableCalendarDays: { [key: string]: boolean; } | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    institutionFlag: boolean | undefined;
    repDrivenFlag: boolean | undefined;
    orderStatusId: string | undefined;
    orderSourceId: string | undefined;
    originalSalesRep: OrderSalesRepDetailsDto | undefined;
    currentSalesRep: OrderSalesRepDetailsDto | undefined;
    requestorHcpDetails: OrderHcpDetailsDto | undefined;
    recipientHcpDetails: OrderHcpDetailsDto | undefined;
    shippingAddress: ShippingAddressDto | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    advancedEditFlag: boolean | undefined;
    id: string | undefined;

    constructor(data?: ISelectDayVerificationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.desiredDeliveryDate = _data["desiredDeliveryDate"] ? new Date(_data["desiredDeliveryDate"].toString()) : <any>undefined;
            this.hcpReached = _data["hcpReached"];
            this.comment = _data["comment"] ? OrderCommentDto.fromJS(_data["comment"]) : <any>undefined;
            this.orderId = _data["orderId"];
            if (_data["selectableCalendarDays"]) {
                this.selectableCalendarDays = {} as any;
                for (let key in _data["selectableCalendarDays"]) {
                    if (_data["selectableCalendarDays"].hasOwnProperty(key))
                        this.selectableCalendarDays[key] = _data["selectableCalendarDays"][key];
                }
            }
            this.requestDate = _data["requestDate"] ? new Date(_data["requestDate"].toString()) : <any>undefined;
            this.missingRequestDate = _data["missingRequestDate"];
            this.institutionFlag = _data["institutionFlag"];
            this.repDrivenFlag = _data["repDrivenFlag"];
            this.orderStatusId = _data["orderStatusId"];
            this.orderSourceId = _data["orderSourceId"];
            this.originalSalesRep = _data["originalSalesRep"] ? OrderSalesRepDetailsDto.fromJS(_data["originalSalesRep"]) : <any>undefined;
            this.currentSalesRep = _data["currentSalesRep"] ? OrderSalesRepDetailsDto.fromJS(_data["currentSalesRep"]) : <any>undefined;
            this.requestorHcpDetails = _data["requestorHcpDetails"] ? OrderHcpDetailsDto.fromJS(_data["requestorHcpDetails"]) : <any>undefined;
            this.recipientHcpDetails = _data["recipientHcpDetails"] ? OrderHcpDetailsDto.fromJS(_data["recipientHcpDetails"]) : <any>undefined;
            this.shippingAddress = _data["shippingAddress"] ? ShippingAddressDto.fromJS(_data["shippingAddress"]) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.advancedEditFlag = _data["advancedEditFlag"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): SelectDayVerificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new SelectDayVerificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["desiredDeliveryDate"] = this.desiredDeliveryDate ? this.desiredDeliveryDate.toISOString() : <any>undefined;
        data["hcpReached"] = this.hcpReached;
        data["comment"] = this.comment ? this.comment.toJSON() : <any>undefined;
        data["orderId"] = this.orderId;
        if (this.selectableCalendarDays) {
            data["selectableCalendarDays"] = {};
            for (let key in this.selectableCalendarDays) {
                if (this.selectableCalendarDays.hasOwnProperty(key))
                    data["selectableCalendarDays"][key] = this.selectableCalendarDays[key];
            }
        }
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["missingRequestDate"] = this.missingRequestDate;
        data["institutionFlag"] = this.institutionFlag;
        data["repDrivenFlag"] = this.repDrivenFlag;
        data["orderStatusId"] = this.orderStatusId;
        data["orderSourceId"] = this.orderSourceId;
        data["originalSalesRep"] = this.originalSalesRep ? this.originalSalesRep.toJSON() : <any>undefined;
        data["currentSalesRep"] = this.currentSalesRep ? this.currentSalesRep.toJSON() : <any>undefined;
        data["requestorHcpDetails"] = this.requestorHcpDetails ? this.requestorHcpDetails.toJSON() : <any>undefined;
        data["recipientHcpDetails"] = this.recipientHcpDetails ? this.recipientHcpDetails.toJSON() : <any>undefined;
        data["shippingAddress"] = this.shippingAddress ? this.shippingAddress.toJSON() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["advancedEditFlag"] = this.advancedEditFlag;
        data["id"] = this.id;
        return data; 
    }

    clone(): SelectDayVerificationDto {
        const json = this.toJSON();
        let result = new SelectDayVerificationDto();
        result.init(json);
        return result;
    }
}

export interface ISelectDayVerificationDto {
    desiredDeliveryDate: Date | undefined;
    hcpReached: boolean | undefined;
    comment: OrderCommentDto | undefined;
    orderId: string | undefined;
    selectableCalendarDays: { [key: string]: boolean; } | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
    institutionFlag: boolean | undefined;
    repDrivenFlag: boolean | undefined;
    orderStatusId: string | undefined;
    orderSourceId: string | undefined;
    originalSalesRep: OrderSalesRepDetailsDto | undefined;
    currentSalesRep: OrderSalesRepDetailsDto | undefined;
    requestorHcpDetails: OrderHcpDetailsDto | undefined;
    recipientHcpDetails: OrderHcpDetailsDto | undefined;
    shippingAddress: ShippingAddressDto | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    advancedEditFlag: boolean | undefined;
    id: string | undefined;
}

export class AjaxResponseOfTask implements IAjaxResponseOfTask {
    result: Task | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfTask) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? Task.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfTask {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfTask();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfTask {
        const json = this.toJSON();
        let result = new AjaxResponseOfTask();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfTask {
    result: Task | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class Task implements ITask {
    readonly id: number | undefined;
    readonly exception: any | undefined;
    readonly status: TaskStatus | undefined;
    readonly isCanceled: boolean | undefined;
    readonly isCompleted: boolean | undefined;
    readonly isCompletedSuccessfully: boolean | undefined;
    readonly creationOptions: TaskCreationOptions | undefined;
    readonly asyncState: any | undefined;
    readonly isFaulted: boolean | undefined;

    constructor(data?: ITask) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).id = _data["id"];
            (<any>this).exception = _data["exception"];
            (<any>this).status = _data["status"];
            (<any>this).isCanceled = _data["isCanceled"];
            (<any>this).isCompleted = _data["isCompleted"];
            (<any>this).isCompletedSuccessfully = _data["isCompletedSuccessfully"];
            (<any>this).creationOptions = _data["creationOptions"];
            (<any>this).asyncState = _data["asyncState"];
            (<any>this).isFaulted = _data["isFaulted"];
        }
    }

    static fromJS(data: any): Task {
        data = typeof data === 'object' ? data : {};
        let result = new Task();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["exception"] = this.exception;
        data["status"] = this.status;
        data["isCanceled"] = this.isCanceled;
        data["isCompleted"] = this.isCompleted;
        data["isCompletedSuccessfully"] = this.isCompletedSuccessfully;
        data["creationOptions"] = this.creationOptions;
        data["asyncState"] = this.asyncState;
        data["isFaulted"] = this.isFaulted;
        return data; 
    }

    clone(): Task {
        const json = this.toJSON();
        let result = new Task();
        result.init(json);
        return result;
    }
}

export interface ITask {
    id: number | undefined;
    exception: any | undefined;
    status: TaskStatus | undefined;
    isCanceled: boolean | undefined;
    isCompleted: boolean | undefined;
    isCompletedSuccessfully: boolean | undefined;
    creationOptions: TaskCreationOptions | undefined;
    asyncState: any | undefined;
    isFaulted: boolean | undefined;
}

export class AjaxResponseOfSelectDayVerificationDto implements IAjaxResponseOfSelectDayVerificationDto {
    result: SelectDayVerificationDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfSelectDayVerificationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? SelectDayVerificationDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfSelectDayVerificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfSelectDayVerificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfSelectDayVerificationDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfSelectDayVerificationDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfSelectDayVerificationDto {
    result: SelectDayVerificationDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class OrderPlitInvestigationDto implements IOrderPlitInvestigationDto {
    orderPlitInvestigationClassificationValueId: string | undefined;
    actualDeliveryDate: Date | undefined;
    investigationDate: Date | undefined;
    signedBy: string | undefined;
    comment: OrderCommentDto | undefined;
    orderId: string | undefined;
    orderAttachments: OrderAttachmentDto[] | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IOrderPlitInvestigationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderPlitInvestigationClassificationValueId = _data["orderPlitInvestigationClassificationValueId"];
            this.actualDeliveryDate = _data["actualDeliveryDate"] ? new Date(_data["actualDeliveryDate"].toString()) : <any>undefined;
            this.investigationDate = _data["investigationDate"] ? new Date(_data["investigationDate"].toString()) : <any>undefined;
            this.signedBy = _data["signedBy"];
            this.comment = _data["comment"] ? OrderCommentDto.fromJS(_data["comment"]) : <any>undefined;
            this.orderId = _data["orderId"];
            if (Array.isArray(_data["orderAttachments"])) {
                this.orderAttachments = [] as any;
                for (let item of _data["orderAttachments"])
                    this.orderAttachments.push(OrderAttachmentDto.fromJS(item));
            }
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderPlitInvestigationDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderPlitInvestigationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderPlitInvestigationClassificationValueId"] = this.orderPlitInvestigationClassificationValueId;
        data["actualDeliveryDate"] = this.actualDeliveryDate ? this.actualDeliveryDate.toISOString() : <any>undefined;
        data["investigationDate"] = this.investigationDate ? this.investigationDate.toISOString() : <any>undefined;
        data["signedBy"] = this.signedBy;
        data["comment"] = this.comment ? this.comment.toJSON() : <any>undefined;
        data["orderId"] = this.orderId;
        if (Array.isArray(this.orderAttachments)) {
            data["orderAttachments"] = [];
            for (let item of this.orderAttachments)
                data["orderAttachments"].push(item.toJSON());
        }
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): OrderPlitInvestigationDto {
        const json = this.toJSON();
        let result = new OrderPlitInvestigationDto();
        result.init(json);
        return result;
    }
}

export interface IOrderPlitInvestigationDto {
    orderPlitInvestigationClassificationValueId: string | undefined;
    actualDeliveryDate: Date | undefined;
    investigationDate: Date | undefined;
    signedBy: string | undefined;
    comment: OrderCommentDto | undefined;
    orderId: string | undefined;
    orderAttachments: OrderAttachmentDto[] | undefined;
    names: LocalizedValue[] | undefined;
}

export class AjaxResponseOfLostInTransitConfirmationDto implements IAjaxResponseOfLostInTransitConfirmationDto {
    result: LostInTransitConfirmationDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfLostInTransitConfirmationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? LostInTransitConfirmationDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfLostInTransitConfirmationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfLostInTransitConfirmationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfLostInTransitConfirmationDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfLostInTransitConfirmationDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfLostInTransitConfirmationDto {
    result: LostInTransitConfirmationDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class LostInTransitConfirmationDto implements ILostInTransitConfirmationDto {
    orderId: string | undefined;
    lostInTransitEvent: string | undefined;
    eventDescription: string | undefined;
    latestActualContainerShipDate: Date | undefined;
    signedBy: string | undefined;
    orderReturnLines: OrderReturnLineDto[] | undefined;
    confirmationAction: boolean | undefined;
    comment: OrderCommentDto | undefined;
    actualDeliveryDate: Date | undefined;
    containerId: string | undefined;
    trackingNumberText: string | undefined;
    trackingNumberUrl: string | undefined;
    communicationId: string | undefined;

    constructor(data?: ILostInTransitConfirmationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.lostInTransitEvent = _data["lostInTransitEvent"];
            this.eventDescription = _data["eventDescription"];
            this.latestActualContainerShipDate = _data["latestActualContainerShipDate"] ? new Date(_data["latestActualContainerShipDate"].toString()) : <any>undefined;
            this.signedBy = _data["signedBy"];
            if (Array.isArray(_data["orderReturnLines"])) {
                this.orderReturnLines = [] as any;
                for (let item of _data["orderReturnLines"])
                    this.orderReturnLines.push(OrderReturnLineDto.fromJS(item));
            }
            this.confirmationAction = _data["confirmationAction"];
            this.comment = _data["comment"] ? OrderCommentDto.fromJS(_data["comment"]) : <any>undefined;
            this.actualDeliveryDate = _data["actualDeliveryDate"] ? new Date(_data["actualDeliveryDate"].toString()) : <any>undefined;
            this.containerId = _data["containerId"];
            this.trackingNumberText = _data["trackingNumberText"];
            this.trackingNumberUrl = _data["trackingNumberUrl"];
            this.communicationId = _data["communicationId"];
        }
    }

    static fromJS(data: any): LostInTransitConfirmationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LostInTransitConfirmationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["lostInTransitEvent"] = this.lostInTransitEvent;
        data["eventDescription"] = this.eventDescription;
        data["latestActualContainerShipDate"] = this.latestActualContainerShipDate ? this.latestActualContainerShipDate.toISOString() : <any>undefined;
        data["signedBy"] = this.signedBy;
        if (Array.isArray(this.orderReturnLines)) {
            data["orderReturnLines"] = [];
            for (let item of this.orderReturnLines)
                data["orderReturnLines"].push(item.toJSON());
        }
        data["confirmationAction"] = this.confirmationAction;
        data["comment"] = this.comment ? this.comment.toJSON() : <any>undefined;
        data["actualDeliveryDate"] = this.actualDeliveryDate ? this.actualDeliveryDate.toISOString() : <any>undefined;
        data["containerId"] = this.containerId;
        data["trackingNumberText"] = this.trackingNumberText;
        data["trackingNumberUrl"] = this.trackingNumberUrl;
        data["communicationId"] = this.communicationId;
        return data; 
    }

    clone(): LostInTransitConfirmationDto {
        const json = this.toJSON();
        let result = new LostInTransitConfirmationDto();
        result.init(json);
        return result;
    }
}

export interface ILostInTransitConfirmationDto {
    orderId: string | undefined;
    lostInTransitEvent: string | undefined;
    eventDescription: string | undefined;
    latestActualContainerShipDate: Date | undefined;
    signedBy: string | undefined;
    orderReturnLines: OrderReturnLineDto[] | undefined;
    confirmationAction: boolean | undefined;
    comment: OrderCommentDto | undefined;
    actualDeliveryDate: Date | undefined;
    containerId: string | undefined;
    trackingNumberText: string | undefined;
    trackingNumberUrl: string | undefined;
    communicationId: string | undefined;
}

export class OrderReturnLineDto implements IOrderReturnLineDto {
    productName: string | undefined;
    productId: string | undefined;
    returnedQuantity: number | undefined;
    displayQuantity: string | undefined;

    constructor(data?: IOrderReturnLineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productName = _data["productName"];
            this.productId = _data["productId"];
            this.returnedQuantity = _data["returnedQuantity"];
            this.displayQuantity = _data["displayQuantity"];
        }
    }

    static fromJS(data: any): OrderReturnLineDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderReturnLineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productName"] = this.productName;
        data["productId"] = this.productId;
        data["returnedQuantity"] = this.returnedQuantity;
        data["displayQuantity"] = this.displayQuantity;
        return data; 
    }

    clone(): OrderReturnLineDto {
        const json = this.toJSON();
        let result = new OrderReturnLineDto();
        result.init(json);
        return result;
    }
}

export interface IOrderReturnLineDto {
    productName: string | undefined;
    productId: string | undefined;
    returnedQuantity: number | undefined;
    displayQuantity: string | undefined;
}

export class AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto implements IAjaxResponseOfPageValidationOfOrderDeliveryDetailsDto {
    result: PageValidationOfOrderDeliveryDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfPageValidationOfOrderDeliveryDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? PageValidationOfOrderDeliveryDetailsDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfPageValidationOfOrderDeliveryDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfPageValidationOfOrderDeliveryDetailsDto {
    result: PageValidationOfOrderDeliveryDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class PageValidationOfOrderDeliveryDetailsDto implements IPageValidationOfOrderDeliveryDetailsDto {
    dataDto: OrderDeliveryDetailsDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;

    constructor(data?: IPageValidationOfOrderDeliveryDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataDto = _data["dataDto"] ? OrderDeliveryDetailsDto.fromJS(_data["dataDto"]) : <any>undefined;
            if (Array.isArray(_data["sectionValidations"])) {
                this.sectionValidations = [] as any;
                for (let item of _data["sectionValidations"])
                    this.sectionValidations.push(SectionValidation.fromJS(item));
            }
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PageValidationOfOrderDeliveryDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PageValidationOfOrderDeliveryDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataDto"] = this.dataDto ? this.dataDto.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionValidations)) {
            data["sectionValidations"] = [];
            for (let item of this.sectionValidations)
                data["sectionValidations"].push(item.toJSON());
        }
        data["state"] = this.state;
        return data; 
    }

    clone(): PageValidationOfOrderDeliveryDetailsDto {
        const json = this.toJSON();
        let result = new PageValidationOfOrderDeliveryDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IPageValidationOfOrderDeliveryDetailsDto {
    dataDto: OrderDeliveryDetailsDto | undefined;
    sectionValidations: SectionValidation[] | undefined;
    state: string | undefined;
}

export class OrderDeliveryDetailsDto implements IOrderDeliveryDetailsDto {
    orderId: string | undefined;
    orderStatusId: string | undefined;
    shipmentSourceId: string | undefined;
    mondayDeliveryFlag: boolean | undefined;
    tuesdayDeliveryFlag: boolean | undefined;
    wednesdayDeliveryFlag: boolean | undefined;
    thursdayDeliveryFlag: boolean | undefined;
    fridayDeliveryFlag: boolean | undefined;
    saturdayDeliveryFlag: boolean | undefined;
    sundayDeliveryFlag: boolean | undefined;
    allowMondayDeliveryFlag: boolean | undefined;
    allowTuesdayDeliveryFlag: boolean | undefined;
    allowWednesdayDeliveryFlag: boolean | undefined;
    allowThursdayDeliveryFlag: boolean | undefined;
    allowFridayDeliveryFlag: boolean | undefined;
    allowSaturdayDeliveryFlag: boolean | undefined;
    allowSundayDeliveryFlag: boolean | undefined;
    missingFlag: boolean | undefined;
    desiredDeliveryDate: Date | undefined;
    anticipatedCarrierName: string | undefined;
    anticipatedCarrierServiceTypeName: string | undefined;
    scheduledShipDate: Date | undefined;
    anticipatedLatestDeliveryDate: Date | undefined;
    hcpCouldNotBeReachedFlag: boolean | undefined;
    rushFlag: boolean | undefined;
    selectDayShippingFlag: boolean | undefined;
    carrierName: string | undefined;
    carrierServiceTypeName: string | undefined;
    actualDeliveryDate: Date | undefined;
    deliveryStatusClassificationValueId: string | undefined;
    latestActualContainerShipDate: Date | undefined;
    acceptableDaysEditFlag: boolean | undefined;
    desiredDeliveryEditFlag: boolean | undefined;
    rushOrderEditFlag: boolean | undefined;
    shipmentContainers: ShipmentContainerDto[] | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;

    constructor(data?: IOrderDeliveryDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.orderStatusId = _data["orderStatusId"];
            this.shipmentSourceId = _data["shipmentSourceId"];
            this.mondayDeliveryFlag = _data["mondayDeliveryFlag"];
            this.tuesdayDeliveryFlag = _data["tuesdayDeliveryFlag"];
            this.wednesdayDeliveryFlag = _data["wednesdayDeliveryFlag"];
            this.thursdayDeliveryFlag = _data["thursdayDeliveryFlag"];
            this.fridayDeliveryFlag = _data["fridayDeliveryFlag"];
            this.saturdayDeliveryFlag = _data["saturdayDeliveryFlag"];
            this.sundayDeliveryFlag = _data["sundayDeliveryFlag"];
            this.allowMondayDeliveryFlag = _data["allowMondayDeliveryFlag"];
            this.allowTuesdayDeliveryFlag = _data["allowTuesdayDeliveryFlag"];
            this.allowWednesdayDeliveryFlag = _data["allowWednesdayDeliveryFlag"];
            this.allowThursdayDeliveryFlag = _data["allowThursdayDeliveryFlag"];
            this.allowFridayDeliveryFlag = _data["allowFridayDeliveryFlag"];
            this.allowSaturdayDeliveryFlag = _data["allowSaturdayDeliveryFlag"];
            this.allowSundayDeliveryFlag = _data["allowSundayDeliveryFlag"];
            this.missingFlag = _data["missingFlag"];
            this.desiredDeliveryDate = _data["desiredDeliveryDate"] ? new Date(_data["desiredDeliveryDate"].toString()) : <any>undefined;
            this.anticipatedCarrierName = _data["anticipatedCarrierName"];
            this.anticipatedCarrierServiceTypeName = _data["anticipatedCarrierServiceTypeName"];
            this.scheduledShipDate = _data["scheduledShipDate"] ? new Date(_data["scheduledShipDate"].toString()) : <any>undefined;
            this.anticipatedLatestDeliveryDate = _data["anticipatedLatestDeliveryDate"] ? new Date(_data["anticipatedLatestDeliveryDate"].toString()) : <any>undefined;
            this.hcpCouldNotBeReachedFlag = _data["hcpCouldNotBeReachedFlag"];
            this.rushFlag = _data["rushFlag"];
            this.selectDayShippingFlag = _data["selectDayShippingFlag"];
            this.carrierName = _data["carrierName"];
            this.carrierServiceTypeName = _data["carrierServiceTypeName"];
            this.actualDeliveryDate = _data["actualDeliveryDate"] ? new Date(_data["actualDeliveryDate"].toString()) : <any>undefined;
            this.deliveryStatusClassificationValueId = _data["deliveryStatusClassificationValueId"];
            this.latestActualContainerShipDate = _data["latestActualContainerShipDate"] ? new Date(_data["latestActualContainerShipDate"].toString()) : <any>undefined;
            this.acceptableDaysEditFlag = _data["acceptableDaysEditFlag"];
            this.desiredDeliveryEditFlag = _data["desiredDeliveryEditFlag"];
            this.rushOrderEditFlag = _data["rushOrderEditFlag"];
            if (Array.isArray(_data["shipmentContainers"])) {
                this.shipmentContainers = [] as any;
                for (let item of _data["shipmentContainers"])
                    this.shipmentContainers.push(ShipmentContainerDto.fromJS(item));
            }
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.requestDate = _data["requestDate"] ? new Date(_data["requestDate"].toString()) : <any>undefined;
            this.missingRequestDate = _data["missingRequestDate"];
        }
    }

    static fromJS(data: any): OrderDeliveryDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDeliveryDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["orderStatusId"] = this.orderStatusId;
        data["shipmentSourceId"] = this.shipmentSourceId;
        data["mondayDeliveryFlag"] = this.mondayDeliveryFlag;
        data["tuesdayDeliveryFlag"] = this.tuesdayDeliveryFlag;
        data["wednesdayDeliveryFlag"] = this.wednesdayDeliveryFlag;
        data["thursdayDeliveryFlag"] = this.thursdayDeliveryFlag;
        data["fridayDeliveryFlag"] = this.fridayDeliveryFlag;
        data["saturdayDeliveryFlag"] = this.saturdayDeliveryFlag;
        data["sundayDeliveryFlag"] = this.sundayDeliveryFlag;
        data["allowMondayDeliveryFlag"] = this.allowMondayDeliveryFlag;
        data["allowTuesdayDeliveryFlag"] = this.allowTuesdayDeliveryFlag;
        data["allowWednesdayDeliveryFlag"] = this.allowWednesdayDeliveryFlag;
        data["allowThursdayDeliveryFlag"] = this.allowThursdayDeliveryFlag;
        data["allowFridayDeliveryFlag"] = this.allowFridayDeliveryFlag;
        data["allowSaturdayDeliveryFlag"] = this.allowSaturdayDeliveryFlag;
        data["allowSundayDeliveryFlag"] = this.allowSundayDeliveryFlag;
        data["missingFlag"] = this.missingFlag;
        data["desiredDeliveryDate"] = this.desiredDeliveryDate ? this.desiredDeliveryDate.toISOString() : <any>undefined;
        data["anticipatedCarrierName"] = this.anticipatedCarrierName;
        data["anticipatedCarrierServiceTypeName"] = this.anticipatedCarrierServiceTypeName;
        data["scheduledShipDate"] = this.scheduledShipDate ? this.scheduledShipDate.toISOString() : <any>undefined;
        data["anticipatedLatestDeliveryDate"] = this.anticipatedLatestDeliveryDate ? this.anticipatedLatestDeliveryDate.toISOString() : <any>undefined;
        data["hcpCouldNotBeReachedFlag"] = this.hcpCouldNotBeReachedFlag;
        data["rushFlag"] = this.rushFlag;
        data["selectDayShippingFlag"] = this.selectDayShippingFlag;
        data["carrierName"] = this.carrierName;
        data["carrierServiceTypeName"] = this.carrierServiceTypeName;
        data["actualDeliveryDate"] = this.actualDeliveryDate ? this.actualDeliveryDate.toISOString() : <any>undefined;
        data["deliveryStatusClassificationValueId"] = this.deliveryStatusClassificationValueId;
        data["latestActualContainerShipDate"] = this.latestActualContainerShipDate ? this.latestActualContainerShipDate.toISOString() : <any>undefined;
        data["acceptableDaysEditFlag"] = this.acceptableDaysEditFlag;
        data["desiredDeliveryEditFlag"] = this.desiredDeliveryEditFlag;
        data["rushOrderEditFlag"] = this.rushOrderEditFlag;
        if (Array.isArray(this.shipmentContainers)) {
            data["shipmentContainers"] = [];
            for (let item of this.shipmentContainers)
                data["shipmentContainers"].push(item.toJSON());
        }
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["missingRequestDate"] = this.missingRequestDate;
        return data; 
    }

    clone(): OrderDeliveryDetailsDto {
        const json = this.toJSON();
        let result = new OrderDeliveryDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IOrderDeliveryDetailsDto {
    orderId: string | undefined;
    orderStatusId: string | undefined;
    shipmentSourceId: string | undefined;
    mondayDeliveryFlag: boolean | undefined;
    tuesdayDeliveryFlag: boolean | undefined;
    wednesdayDeliveryFlag: boolean | undefined;
    thursdayDeliveryFlag: boolean | undefined;
    fridayDeliveryFlag: boolean | undefined;
    saturdayDeliveryFlag: boolean | undefined;
    sundayDeliveryFlag: boolean | undefined;
    allowMondayDeliveryFlag: boolean | undefined;
    allowTuesdayDeliveryFlag: boolean | undefined;
    allowWednesdayDeliveryFlag: boolean | undefined;
    allowThursdayDeliveryFlag: boolean | undefined;
    allowFridayDeliveryFlag: boolean | undefined;
    allowSaturdayDeliveryFlag: boolean | undefined;
    allowSundayDeliveryFlag: boolean | undefined;
    missingFlag: boolean | undefined;
    desiredDeliveryDate: Date | undefined;
    anticipatedCarrierName: string | undefined;
    anticipatedCarrierServiceTypeName: string | undefined;
    scheduledShipDate: Date | undefined;
    anticipatedLatestDeliveryDate: Date | undefined;
    hcpCouldNotBeReachedFlag: boolean | undefined;
    rushFlag: boolean | undefined;
    selectDayShippingFlag: boolean | undefined;
    carrierName: string | undefined;
    carrierServiceTypeName: string | undefined;
    actualDeliveryDate: Date | undefined;
    deliveryStatusClassificationValueId: string | undefined;
    latestActualContainerShipDate: Date | undefined;
    acceptableDaysEditFlag: boolean | undefined;
    desiredDeliveryEditFlag: boolean | undefined;
    rushOrderEditFlag: boolean | undefined;
    shipmentContainers: ShipmentContainerDto[] | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
}

export class ShipmentContainerDto implements IShipmentContainerDto {
    shipmentId: string | undefined;
    deliveryStatusClassificationValueId: string | undefined;
    actualDeliveryDate: Date | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    containerId: string | undefined;
    actualShipDate: Date | undefined;
    carrierName: string | undefined;
    carrierServiceTypeName: string | undefined;
    trackingNumberText: string | undefined;
    trackingNumberUrl: string | undefined;
    returnReasonText: string | undefined;
    shipmentContainerSerialNumbers: ShipmentContainerSerialNumberDto[] | undefined;
    shipmentContainerLines: ShipmentContainerLineDto[] | undefined;
    id: string | undefined;

    constructor(data?: IShipmentContainerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shipmentId = _data["shipmentId"];
            this.deliveryStatusClassificationValueId = _data["deliveryStatusClassificationValueId"];
            this.actualDeliveryDate = _data["actualDeliveryDate"] ? new Date(_data["actualDeliveryDate"].toString()) : <any>undefined;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.containerId = _data["containerId"];
            this.actualShipDate = _data["actualShipDate"] ? new Date(_data["actualShipDate"].toString()) : <any>undefined;
            this.carrierName = _data["carrierName"];
            this.carrierServiceTypeName = _data["carrierServiceTypeName"];
            this.trackingNumberText = _data["trackingNumberText"];
            this.trackingNumberUrl = _data["trackingNumberUrl"];
            this.returnReasonText = _data["returnReasonText"];
            if (Array.isArray(_data["shipmentContainerSerialNumbers"])) {
                this.shipmentContainerSerialNumbers = [] as any;
                for (let item of _data["shipmentContainerSerialNumbers"])
                    this.shipmentContainerSerialNumbers.push(ShipmentContainerSerialNumberDto.fromJS(item));
            }
            if (Array.isArray(_data["shipmentContainerLines"])) {
                this.shipmentContainerLines = [] as any;
                for (let item of _data["shipmentContainerLines"])
                    this.shipmentContainerLines.push(ShipmentContainerLineDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ShipmentContainerDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentContainerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipmentId"] = this.shipmentId;
        data["deliveryStatusClassificationValueId"] = this.deliveryStatusClassificationValueId;
        data["actualDeliveryDate"] = this.actualDeliveryDate ? this.actualDeliveryDate.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["containerId"] = this.containerId;
        data["actualShipDate"] = this.actualShipDate ? this.actualShipDate.toISOString() : <any>undefined;
        data["carrierName"] = this.carrierName;
        data["carrierServiceTypeName"] = this.carrierServiceTypeName;
        data["trackingNumberText"] = this.trackingNumberText;
        data["trackingNumberUrl"] = this.trackingNumberUrl;
        data["returnReasonText"] = this.returnReasonText;
        if (Array.isArray(this.shipmentContainerSerialNumbers)) {
            data["shipmentContainerSerialNumbers"] = [];
            for (let item of this.shipmentContainerSerialNumbers)
                data["shipmentContainerSerialNumbers"].push(item.toJSON());
        }
        if (Array.isArray(this.shipmentContainerLines)) {
            data["shipmentContainerLines"] = [];
            for (let item of this.shipmentContainerLines)
                data["shipmentContainerLines"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): ShipmentContainerDto {
        const json = this.toJSON();
        let result = new ShipmentContainerDto();
        result.init(json);
        return result;
    }
}

export interface IShipmentContainerDto {
    shipmentId: string | undefined;
    deliveryStatusClassificationValueId: string | undefined;
    actualDeliveryDate: Date | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    containerId: string | undefined;
    actualShipDate: Date | undefined;
    carrierName: string | undefined;
    carrierServiceTypeName: string | undefined;
    trackingNumberText: string | undefined;
    trackingNumberUrl: string | undefined;
    returnReasonText: string | undefined;
    shipmentContainerSerialNumbers: ShipmentContainerSerialNumberDto[] | undefined;
    shipmentContainerLines: ShipmentContainerLineDto[] | undefined;
    id: string | undefined;
}

export class ShipmentContainerSerialNumberDto implements IShipmentContainerSerialNumberDto {
    orderLineId: string | undefined;
    shipmentContainerId: string | undefined;
    serialNumberText: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IShipmentContainerSerialNumberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderLineId = _data["orderLineId"];
            this.shipmentContainerId = _data["shipmentContainerId"];
            this.serialNumberText = _data["serialNumberText"];
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ShipmentContainerSerialNumberDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentContainerSerialNumberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderLineId"] = this.orderLineId;
        data["shipmentContainerId"] = this.shipmentContainerId;
        data["serialNumberText"] = this.serialNumberText;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): ShipmentContainerSerialNumberDto {
        const json = this.toJSON();
        let result = new ShipmentContainerSerialNumberDto();
        result.init(json);
        return result;
    }
}

export interface IShipmentContainerSerialNumberDto {
    orderLineId: string | undefined;
    shipmentContainerId: string | undefined;
    serialNumberText: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    id: string | undefined;
}

export class ShipmentContainerLineDto implements IShipmentContainerLineDto {
    shipmentContainerId: string | undefined;
    serialNumber: string | undefined;
    lotId: string | undefined;
    lotExpirationDate: Date | undefined;
    shippedQty: number | undefined;
    returnedQty: number | undefined;
    deliveredQty: number | undefined;
    productId: string | undefined;
    productName: string | undefined;
    productIdName: string | undefined;
    uomClassificationValueId: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IShipmentContainerLineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shipmentContainerId = _data["shipmentContainerId"];
            this.serialNumber = _data["serialNumber"];
            this.lotId = _data["lotId"];
            this.lotExpirationDate = _data["lotExpirationDate"] ? new Date(_data["lotExpirationDate"].toString()) : <any>undefined;
            this.shippedQty = _data["shippedQty"];
            this.returnedQty = _data["returnedQty"];
            this.deliveredQty = _data["deliveredQty"];
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.productIdName = _data["productIdName"];
            this.uomClassificationValueId = _data["uomClassificationValueId"];
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ShipmentContainerLineDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentContainerLineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipmentContainerId"] = this.shipmentContainerId;
        data["serialNumber"] = this.serialNumber;
        data["lotId"] = this.lotId;
        data["lotExpirationDate"] = this.lotExpirationDate ? this.lotExpirationDate.toISOString() : <any>undefined;
        data["shippedQty"] = this.shippedQty;
        data["returnedQty"] = this.returnedQty;
        data["deliveredQty"] = this.deliveredQty;
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["productIdName"] = this.productIdName;
        data["uomClassificationValueId"] = this.uomClassificationValueId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): ShipmentContainerLineDto {
        const json = this.toJSON();
        let result = new ShipmentContainerLineDto();
        result.init(json);
        return result;
    }
}

export interface IShipmentContainerLineDto {
    shipmentContainerId: string | undefined;
    serialNumber: string | undefined;
    lotId: string | undefined;
    lotExpirationDate: Date | undefined;
    shippedQty: number | undefined;
    returnedQty: number | undefined;
    deliveredQty: number | undefined;
    productId: string | undefined;
    productName: string | undefined;
    productIdName: string | undefined;
    uomClassificationValueId: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    id: string | undefined;
}

export class AjaxResponseOfShippingAddressWithFieldContraintsDto implements IAjaxResponseOfShippingAddressWithFieldContraintsDto {
    result: ShippingAddressWithFieldContraintsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfShippingAddressWithFieldContraintsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ShippingAddressWithFieldContraintsDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfShippingAddressWithFieldContraintsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfShippingAddressWithFieldContraintsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfShippingAddressWithFieldContraintsDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfShippingAddressWithFieldContraintsDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfShippingAddressWithFieldContraintsDto {
    result: ShippingAddressWithFieldContraintsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ShippingAddressWithFieldContraintsDto implements IShippingAddressWithFieldContraintsDto {
    shippingAddress: ShippingAddressDto | undefined;
    fieldConstraints: FieldConstraint[] | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;

    constructor(data?: IShippingAddressWithFieldContraintsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shippingAddress = _data["shippingAddress"] ? ShippingAddressDto.fromJS(_data["shippingAddress"]) : <any>undefined;
            if (Array.isArray(_data["fieldConstraints"])) {
                this.fieldConstraints = [] as any;
                for (let item of _data["fieldConstraints"])
                    this.fieldConstraints.push(FieldConstraint.fromJS(item));
            }
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
        }
    }

    static fromJS(data: any): ShippingAddressWithFieldContraintsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShippingAddressWithFieldContraintsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shippingAddress"] = this.shippingAddress ? this.shippingAddress.toJSON() : <any>undefined;
        if (Array.isArray(this.fieldConstraints)) {
            data["fieldConstraints"] = [];
            for (let item of this.fieldConstraints)
                data["fieldConstraints"].push(item.toJSON());
        }
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        return data; 
    }

    clone(): ShippingAddressWithFieldContraintsDto {
        const json = this.toJSON();
        let result = new ShippingAddressWithFieldContraintsDto();
        result.init(json);
        return result;
    }
}

export interface IShippingAddressWithFieldContraintsDto {
    shippingAddress: ShippingAddressDto | undefined;
    fieldConstraints: FieldConstraint[] | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
}

export class FieldConstraint implements IFieldConstraint {
    fieldName: string | undefined;
    lengthConstraint: number | undefined;

    constructor(data?: IFieldConstraint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fieldName = _data["fieldName"];
            this.lengthConstraint = _data["lengthConstraint"];
        }
    }

    static fromJS(data: any): FieldConstraint {
        data = typeof data === 'object' ? data : {};
        let result = new FieldConstraint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldName"] = this.fieldName;
        data["lengthConstraint"] = this.lengthConstraint;
        return data; 
    }

    clone(): FieldConstraint {
        const json = this.toJSON();
        let result = new FieldConstraint();
        result.init(json);
        return result;
    }
}

export interface IFieldConstraint {
    fieldName: string | undefined;
    lengthConstraint: number | undefined;
}

export class AjaxResponseOfShippingAddressDto implements IAjaxResponseOfShippingAddressDto {
    result: ShippingAddressDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfShippingAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ShippingAddressDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfShippingAddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfShippingAddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfShippingAddressDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfShippingAddressDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfShippingAddressDto {
    result: ShippingAddressDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class InactiveHCPOrderExceptionHandlerDto implements IInactiveHCPOrderExceptionHandlerDto {
    orderId: string | undefined;
    comments: OrderCommentDto | undefined;
    action: InactiveHCPOrderExceptionHandlerDtoAction | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;

    constructor(data?: IInactiveHCPOrderExceptionHandlerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.comments = _data["comments"] ? OrderCommentDto.fromJS(_data["comments"]) : <any>undefined;
            this.action = _data["action"];
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.requestDate = _data["requestDate"] ? new Date(_data["requestDate"].toString()) : <any>undefined;
            this.missingRequestDate = _data["missingRequestDate"];
        }
    }

    static fromJS(data: any): InactiveHCPOrderExceptionHandlerDto {
        data = typeof data === 'object' ? data : {};
        let result = new InactiveHCPOrderExceptionHandlerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["comments"] = this.comments ? this.comments.toJSON() : <any>undefined;
        data["action"] = this.action;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["missingRequestDate"] = this.missingRequestDate;
        return data; 
    }

    clone(): InactiveHCPOrderExceptionHandlerDto {
        const json = this.toJSON();
        let result = new InactiveHCPOrderExceptionHandlerDto();
        result.init(json);
        return result;
    }
}

export interface IInactiveHCPOrderExceptionHandlerDto {
    orderId: string | undefined;
    comments: OrderCommentDto | undefined;
    action: InactiveHCPOrderExceptionHandlerDtoAction | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
}

export class AjaxResponseOfBoolean implements IAjaxResponseOfBoolean {
    result: boolean | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfBoolean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfBoolean {
        const json = this.toJSON();
        let result = new AjaxResponseOfBoolean();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfBoolean {
    result: boolean | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfBackorderAdjustmentDetailsDto implements IAjaxResponseOfBackorderAdjustmentDetailsDto {
    result: BackorderAdjustmentDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfBackorderAdjustmentDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? BackorderAdjustmentDetailsDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfBackorderAdjustmentDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfBackorderAdjustmentDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfBackorderAdjustmentDetailsDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfBackorderAdjustmentDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfBackorderAdjustmentDetailsDto {
    result: BackorderAdjustmentDetailsDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class BackorderAdjustmentDetailsDto implements IBackorderAdjustmentDetailsDto {
    orderId: string | undefined;
    orderLines: BackorderLineItemDto[] | undefined;

    constructor(data?: IBackorderAdjustmentDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            if (Array.isArray(_data["orderLines"])) {
                this.orderLines = [] as any;
                for (let item of _data["orderLines"])
                    this.orderLines.push(BackorderLineItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BackorderAdjustmentDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new BackorderAdjustmentDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        if (Array.isArray(this.orderLines)) {
            data["orderLines"] = [];
            for (let item of this.orderLines)
                data["orderLines"].push(item.toJSON());
        }
        return data; 
    }

    clone(): BackorderAdjustmentDetailsDto {
        const json = this.toJSON();
        let result = new BackorderAdjustmentDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IBackorderAdjustmentDetailsDto {
    orderId: string | undefined;
    orderLines: BackorderLineItemDto[] | undefined;
}

export class BackorderLineItemDto implements IBackorderLineItemDto {
    orderLineId: string | undefined;
    productId: string | undefined;
    productCode: string | undefined;
    productName: string | undefined;
    orderQty: number | undefined;
    adjustedkOrderQty: number | undefined;
    uomClassificationValueId: string | undefined;

    constructor(data?: IBackorderLineItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderLineId = _data["orderLineId"];
            this.productId = _data["productId"];
            this.productCode = _data["productCode"];
            this.productName = _data["productName"];
            this.orderQty = _data["orderQty"];
            this.adjustedkOrderQty = _data["adjustedkOrderQty"];
            this.uomClassificationValueId = _data["uomClassificationValueId"];
        }
    }

    static fromJS(data: any): BackorderLineItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new BackorderLineItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderLineId"] = this.orderLineId;
        data["productId"] = this.productId;
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["orderQty"] = this.orderQty;
        data["adjustedkOrderQty"] = this.adjustedkOrderQty;
        data["uomClassificationValueId"] = this.uomClassificationValueId;
        return data; 
    }

    clone(): BackorderLineItemDto {
        const json = this.toJSON();
        let result = new BackorderLineItemDto();
        result.init(json);
        return result;
    }
}

export interface IBackorderLineItemDto {
    orderLineId: string | undefined;
    productId: string | undefined;
    productCode: string | undefined;
    productName: string | undefined;
    orderQty: number | undefined;
    adjustedkOrderQty: number | undefined;
    uomClassificationValueId: string | undefined;
}

export class BackorderAdjustmentSubmitForRevalidationDto implements IBackorderAdjustmentSubmitForRevalidationDto {
    orderId: string | undefined;
    comments: OrderCommentDto | undefined;
    cancelledOrderLineIds: string[] | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;

    constructor(data?: IBackorderAdjustmentSubmitForRevalidationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.comments = _data["comments"] ? OrderCommentDto.fromJS(_data["comments"]) : <any>undefined;
            if (Array.isArray(_data["cancelledOrderLineIds"])) {
                this.cancelledOrderLineIds = [] as any;
                for (let item of _data["cancelledOrderLineIds"])
                    this.cancelledOrderLineIds.push(item);
            }
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            this.requestDate = _data["requestDate"] ? new Date(_data["requestDate"].toString()) : <any>undefined;
            this.missingRequestDate = _data["missingRequestDate"];
        }
    }

    static fromJS(data: any): BackorderAdjustmentSubmitForRevalidationDto {
        data = typeof data === 'object' ? data : {};
        let result = new BackorderAdjustmentSubmitForRevalidationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["comments"] = this.comments ? this.comments.toJSON() : <any>undefined;
        if (Array.isArray(this.cancelledOrderLineIds)) {
            data["cancelledOrderLineIds"] = [];
            for (let item of this.cancelledOrderLineIds)
                data["cancelledOrderLineIds"].push(item);
        }
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["missingRequestDate"] = this.missingRequestDate;
        return data; 
    }

    clone(): BackorderAdjustmentSubmitForRevalidationDto {
        const json = this.toJSON();
        let result = new BackorderAdjustmentSubmitForRevalidationDto();
        result.init(json);
        return result;
    }
}

export interface IBackorderAdjustmentSubmitForRevalidationDto {
    orderId: string | undefined;
    comments: OrderCommentDto | undefined;
    cancelledOrderLineIds: string[] | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    requestDate: Date | undefined;
    missingRequestDate: boolean | undefined;
}

export class AjaxResponse implements IAjaxResponse {
    result: any | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponse {
        const json = this.toJSON();
        let result = new AjaxResponse();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponse {
    result: any | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class OrderBlackoutHoldReleaseReasonDto implements IOrderBlackoutHoldReleaseReasonDto {
    orderId: string | undefined;
    blackoutHoldReleaseReasonId: string | undefined;
    blackoutHoldReleaseReasonDescription: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;

    constructor(data?: IOrderBlackoutHoldReleaseReasonDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.blackoutHoldReleaseReasonId = _data["blackoutHoldReleaseReasonId"];
            this.blackoutHoldReleaseReasonDescription = _data["blackoutHoldReleaseReasonDescription"];
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
        }
    }

    static fromJS(data: any): OrderBlackoutHoldReleaseReasonDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderBlackoutHoldReleaseReasonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["blackoutHoldReleaseReasonId"] = this.blackoutHoldReleaseReasonId;
        data["blackoutHoldReleaseReasonDescription"] = this.blackoutHoldReleaseReasonDescription;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        return data; 
    }

    clone(): OrderBlackoutHoldReleaseReasonDto {
        const json = this.toJSON();
        let result = new OrderBlackoutHoldReleaseReasonDto();
        result.init(json);
        return result;
    }
}

export interface IOrderBlackoutHoldReleaseReasonDto {
    orderId: string | undefined;
    blackoutHoldReleaseReasonId: string | undefined;
    blackoutHoldReleaseReasonDescription: string | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
}

export class AjaxResponseOfGuid implements IAjaxResponseOfGuid {
    result: string | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"];
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfGuid {
        const json = this.toJSON();
        let result = new AjaxResponseOfGuid();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfGuid {
    result: string | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfAocInvestigationDto implements IAjaxResponseOfAocInvestigationDto {
    result: AocInvestigationDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfAocInvestigationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? AocInvestigationDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfAocInvestigationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfAocInvestigationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfAocInvestigationDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfAocInvestigationDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfAocInvestigationDto {
    result: AocInvestigationDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AocInvestigationDto implements IAocInvestigationDto {
    aocId: string | undefined;
    aocInvestigationReasonClassificationValueIds: string[] | undefined;
    isAocDocumentValid: boolean | undefined;
    investigationComment: string | undefined;
    isInvestigationSubmitted: boolean | undefined;

    constructor(data?: IAocInvestigationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.aocId = _data["aocId"];
            if (Array.isArray(_data["aocInvestigationReasonClassificationValueIds"])) {
                this.aocInvestigationReasonClassificationValueIds = [] as any;
                for (let item of _data["aocInvestigationReasonClassificationValueIds"])
                    this.aocInvestigationReasonClassificationValueIds.push(item);
            }
            this.isAocDocumentValid = _data["isAocDocumentValid"];
            this.investigationComment = _data["investigationComment"];
            this.isInvestigationSubmitted = _data["isInvestigationSubmitted"];
        }
    }

    static fromJS(data: any): AocInvestigationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AocInvestigationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aocId"] = this.aocId;
        if (Array.isArray(this.aocInvestigationReasonClassificationValueIds)) {
            data["aocInvestigationReasonClassificationValueIds"] = [];
            for (let item of this.aocInvestigationReasonClassificationValueIds)
                data["aocInvestigationReasonClassificationValueIds"].push(item);
        }
        data["isAocDocumentValid"] = this.isAocDocumentValid;
        data["investigationComment"] = this.investigationComment;
        data["isInvestigationSubmitted"] = this.isInvestigationSubmitted;
        return data; 
    }

    clone(): AocInvestigationDto {
        const json = this.toJSON();
        let result = new AocInvestigationDto();
        result.init(json);
        return result;
    }
}

export interface IAocInvestigationDto {
    aocId: string | undefined;
    aocInvestigationReasonClassificationValueIds: string[] | undefined;
    isAocDocumentValid: boolean | undefined;
    investigationComment: string | undefined;
    isInvestigationSubmitted: boolean | undefined;
}

export class AjaxResponseOfSvlInvestigationDto implements IAjaxResponseOfSvlInvestigationDto {
    result: SvlInvestigationDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfSvlInvestigationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? SvlInvestigationDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfSvlInvestigationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfSvlInvestigationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfSvlInvestigationDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfSvlInvestigationDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfSvlInvestigationDto {
    result: SvlInvestigationDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class SvlInvestigationDto implements ISvlInvestigationDto {
    svlId: string | undefined;
    svlTypeClassificationValueId: string | undefined;
    svlInvestigationReasonClassificationValueIds: string[] | undefined;
    isSvlDocumentValid: boolean | undefined;
    investigationComment: string | undefined;
    isInvestigationSubmitted: boolean | undefined;

    constructor(data?: ISvlInvestigationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.svlId = _data["svlId"];
            this.svlTypeClassificationValueId = _data["svlTypeClassificationValueId"];
            if (Array.isArray(_data["svlInvestigationReasonClassificationValueIds"])) {
                this.svlInvestigationReasonClassificationValueIds = [] as any;
                for (let item of _data["svlInvestigationReasonClassificationValueIds"])
                    this.svlInvestigationReasonClassificationValueIds.push(item);
            }
            this.isSvlDocumentValid = _data["isSvlDocumentValid"];
            this.investigationComment = _data["investigationComment"];
            this.isInvestigationSubmitted = _data["isInvestigationSubmitted"];
        }
    }

    static fromJS(data: any): SvlInvestigationDto {
        data = typeof data === 'object' ? data : {};
        let result = new SvlInvestigationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["svlId"] = this.svlId;
        data["svlTypeClassificationValueId"] = this.svlTypeClassificationValueId;
        if (Array.isArray(this.svlInvestigationReasonClassificationValueIds)) {
            data["svlInvestigationReasonClassificationValueIds"] = [];
            for (let item of this.svlInvestigationReasonClassificationValueIds)
                data["svlInvestigationReasonClassificationValueIds"].push(item);
        }
        data["isSvlDocumentValid"] = this.isSvlDocumentValid;
        data["investigationComment"] = this.investigationComment;
        data["isInvestigationSubmitted"] = this.isInvestigationSubmitted;
        return data; 
    }

    clone(): SvlInvestigationDto {
        const json = this.toJSON();
        let result = new SvlInvestigationDto();
        result.init(json);
        return result;
    }
}

export interface ISvlInvestigationDto {
    svlId: string | undefined;
    svlTypeClassificationValueId: string | undefined;
    svlInvestigationReasonClassificationValueIds: string[] | undefined;
    isSvlDocumentValid: boolean | undefined;
    investigationComment: string | undefined;
    isInvestigationSubmitted: boolean | undefined;
}

export class AjaxResponseOfSvlNegativeResponseCommentHistoryDto implements IAjaxResponseOfSvlNegativeResponseCommentHistoryDto {
    result: SvlNegativeResponseCommentHistoryDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfSvlNegativeResponseCommentHistoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? SvlNegativeResponseCommentHistoryDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfSvlNegativeResponseCommentHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfSvlNegativeResponseCommentHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfSvlNegativeResponseCommentHistoryDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfSvlNegativeResponseCommentHistoryDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfSvlNegativeResponseCommentHistoryDto {
    result: SvlNegativeResponseCommentHistoryDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class SvlNegativeResponseCommentHistoryDto implements ISvlNegativeResponseCommentHistoryDto {
    svlId: string | undefined;
    svlNegativeResponseComments: SvlNegativeResponseCommentDto[] | undefined;

    constructor(data?: ISvlNegativeResponseCommentHistoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.svlId = _data["svlId"];
            if (Array.isArray(_data["svlNegativeResponseComments"])) {
                this.svlNegativeResponseComments = [] as any;
                for (let item of _data["svlNegativeResponseComments"])
                    this.svlNegativeResponseComments.push(SvlNegativeResponseCommentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SvlNegativeResponseCommentHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new SvlNegativeResponseCommentHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["svlId"] = this.svlId;
        if (Array.isArray(this.svlNegativeResponseComments)) {
            data["svlNegativeResponseComments"] = [];
            for (let item of this.svlNegativeResponseComments)
                data["svlNegativeResponseComments"].push(item.toJSON());
        }
        return data; 
    }

    clone(): SvlNegativeResponseCommentHistoryDto {
        const json = this.toJSON();
        let result = new SvlNegativeResponseCommentHistoryDto();
        result.init(json);
        return result;
    }
}

export interface ISvlNegativeResponseCommentHistoryDto {
    svlId: string | undefined;
    svlNegativeResponseComments: SvlNegativeResponseCommentDto[] | undefined;
}

export class SvlNegativeResponseCommentDto implements ISvlNegativeResponseCommentDto {
    svlId: string | undefined;
    comment: string | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;

    constructor(data?: ISvlNegativeResponseCommentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.svlId = _data["svlId"];
            this.comment = _data["comment"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SvlNegativeResponseCommentDto {
        data = typeof data === 'object' ? data : {};
        let result = new SvlNegativeResponseCommentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["svlId"] = this.svlId;
        data["comment"] = this.comment;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }

    clone(): SvlNegativeResponseCommentDto {
        const json = this.toJSON();
        let result = new SvlNegativeResponseCommentDto();
        result.init(json);
        return result;
    }
}

export interface ISvlNegativeResponseCommentDto {
    svlId: string | undefined;
    comment: string | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
}

export class AjaxResponseOfDataEntryOrderDto implements IAjaxResponseOfDataEntryOrderDto {
    result: DataEntryOrderDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfDataEntryOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? DataEntryOrderDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfDataEntryOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfDataEntryOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfDataEntryOrderDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfDataEntryOrderDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfDataEntryOrderDto {
    result: DataEntryOrderDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class DataEntryOrderDto implements IDataEntryOrderDto {
    id: string | undefined;
    offerId: string | undefined;
    orderNumber: string | undefined;
    externalOrderNumber: string | undefined;
    orderDate: Date | undefined;
    requestDate: Date | undefined;
    readonly orderStatusTimeDiff: number | undefined;
    orderStatusLastModifiedTime: Date | undefined;
    program: string | undefined;
    jobId: string | undefined;
    orderSourceId: string | undefined;
    relatedOfferId: string | undefined;
    relatedOfferNumber: string | undefined;
    formId: string | undefined;
    formIdMissingFlag: boolean | undefined;
    formIdNotApplicableFlag: boolean | undefined;
    formIdUnmatchedFlag: boolean | undefined;
    batchNumber: string | undefined;
    batchDate: Date | undefined;
    salesRepNbr: string | undefined;
    salesRepFirstName: string | undefined;
    salesRepLastName: string | undefined;
    territoryCode: string | undefined;
    missingSalesRepIdFlag: boolean | undefined;
    missingSalesRepFirstNameFlag: boolean | undefined;
    missingSalesRepLastNameFlag: boolean | undefined;
    missingTerritoryCodeFlag: boolean | undefined;
    reasonForModificationFromOfferSalesRepNbr: string | undefined;
    reasonForModificationFromOfferSalesRepFirstName: string | undefined;
    reasonForModificationFromOfferSalesRepLastName: string | undefined;
    reasonForModificationFromOfferTerritoryCode: string | undefined;
    missingOrderRequestDateFlag: boolean | undefined;
    reasonForModificationFromOfferOrderRequestDate: string | undefined;
    requestorDetails: DataEntryOrderHcpDetailsDto | undefined;
    recipientDetails: DataEntryOrderHcpDetailsDto | undefined;
    orderLines: DataEntryOrderLineDto[] | undefined;
    tuesdayDeliveryFlag: boolean | undefined;
    wednesdayDeliveryFlag: boolean | undefined;
    thursdayDeliveryFlag: boolean | undefined;
    fridayDeliveryFlag: boolean | undefined;
    acceptableDaysMissingFlag: boolean | undefined;
    rushFlag: boolean | undefined;
    optOutFlag: boolean | undefined;
    ohioTDDDExemptionFlag: boolean | undefined;
    hcpSignaturePresentFlag: boolean | undefined;
    hcpSignatureStampedFlag: boolean | undefined;
    hcpSignatureMatchFlag: boolean | undefined;
    hcpSignatureDateStampedFlag: boolean | undefined;
    hcpSignedDatePresentFlag: boolean | undefined;
    hcpSignatureDate: Date | undefined;
    hcpSignatureMissingFlag: boolean | undefined;
    requestorComment: string | undefined;
    srfAdverseEventFlag: boolean | undefined;
    srfAdverseEventComment: string | undefined;
    hasKnipperGeneratedSrf: boolean | undefined;
    hasThirdPartyGeneratedSrf: boolean | undefined;
    hasPreFilledSrf: boolean | undefined;
    hasBlankSrf: boolean | undefined;
    repDrivenFlag: boolean | undefined;
    institutionFlag: boolean | undefined;
    displayDeaFlag: boolean | undefined;
    displaySpecialtyFlag: boolean | undefined;
    displaySanFlag: boolean | undefined;
    displayTuesdayDeliveryFlag: boolean | undefined;
    displayWednesdayDeliveryFlag: boolean | undefined;
    displayThursdayDeliveryFlag: boolean | undefined;
    displayFridayDeliveryFlag: boolean | undefined;
    unauthorizedFormChanges: DataEntryOrderUnauthorizedFormChangeDto | undefined;
    lockInfo: LockDto | undefined;
    prohibitedFormModFields: string[] | undefined;
    submitFlag: boolean | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IDataEntryOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.offerId = _data["offerId"];
            this.orderNumber = _data["orderNumber"];
            this.externalOrderNumber = _data["externalOrderNumber"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
            this.requestDate = _data["requestDate"] ? new Date(_data["requestDate"].toString()) : <any>undefined;
            (<any>this).orderStatusTimeDiff = _data["orderStatusTimeDiff"];
            this.orderStatusLastModifiedTime = _data["orderStatusLastModifiedTime"] ? new Date(_data["orderStatusLastModifiedTime"].toString()) : <any>undefined;
            this.program = _data["program"];
            this.jobId = _data["jobId"];
            this.orderSourceId = _data["orderSourceId"];
            this.relatedOfferId = _data["relatedOfferId"];
            this.relatedOfferNumber = _data["relatedOfferNumber"];
            this.formId = _data["formId"];
            this.formIdMissingFlag = _data["formIdMissingFlag"];
            this.formIdNotApplicableFlag = _data["formIdNotApplicableFlag"];
            this.formIdUnmatchedFlag = _data["formIdUnmatchedFlag"];
            this.batchNumber = _data["batchNumber"];
            this.batchDate = _data["batchDate"] ? new Date(_data["batchDate"].toString()) : <any>undefined;
            this.salesRepNbr = _data["salesRepNbr"];
            this.salesRepFirstName = _data["salesRepFirstName"];
            this.salesRepLastName = _data["salesRepLastName"];
            this.territoryCode = _data["territoryCode"];
            this.missingSalesRepIdFlag = _data["missingSalesRepIdFlag"];
            this.missingSalesRepFirstNameFlag = _data["missingSalesRepFirstNameFlag"];
            this.missingSalesRepLastNameFlag = _data["missingSalesRepLastNameFlag"];
            this.missingTerritoryCodeFlag = _data["missingTerritoryCodeFlag"];
            this.reasonForModificationFromOfferSalesRepNbr = _data["reasonForModificationFromOfferSalesRepNbr"];
            this.reasonForModificationFromOfferSalesRepFirstName = _data["reasonForModificationFromOfferSalesRepFirstName"];
            this.reasonForModificationFromOfferSalesRepLastName = _data["reasonForModificationFromOfferSalesRepLastName"];
            this.reasonForModificationFromOfferTerritoryCode = _data["reasonForModificationFromOfferTerritoryCode"];
            this.missingOrderRequestDateFlag = _data["missingOrderRequestDateFlag"];
            this.reasonForModificationFromOfferOrderRequestDate = _data["reasonForModificationFromOfferOrderRequestDate"];
            this.requestorDetails = _data["requestorDetails"] ? DataEntryOrderHcpDetailsDto.fromJS(_data["requestorDetails"]) : <any>undefined;
            this.recipientDetails = _data["recipientDetails"] ? DataEntryOrderHcpDetailsDto.fromJS(_data["recipientDetails"]) : <any>undefined;
            if (Array.isArray(_data["orderLines"])) {
                this.orderLines = [] as any;
                for (let item of _data["orderLines"])
                    this.orderLines.push(DataEntryOrderLineDto.fromJS(item));
            }
            this.tuesdayDeliveryFlag = _data["tuesdayDeliveryFlag"];
            this.wednesdayDeliveryFlag = _data["wednesdayDeliveryFlag"];
            this.thursdayDeliveryFlag = _data["thursdayDeliveryFlag"];
            this.fridayDeliveryFlag = _data["fridayDeliveryFlag"];
            this.acceptableDaysMissingFlag = _data["acceptableDaysMissingFlag"];
            this.rushFlag = _data["rushFlag"];
            this.optOutFlag = _data["optOutFlag"];
            this.ohioTDDDExemptionFlag = _data["ohioTDDDExemptionFlag"];
            this.hcpSignaturePresentFlag = _data["hcpSignaturePresentFlag"];
            this.hcpSignatureStampedFlag = _data["hcpSignatureStampedFlag"];
            this.hcpSignatureMatchFlag = _data["hcpSignatureMatchFlag"];
            this.hcpSignatureDateStampedFlag = _data["hcpSignatureDateStampedFlag"];
            this.hcpSignedDatePresentFlag = _data["hcpSignedDatePresentFlag"];
            this.hcpSignatureDate = _data["hcpSignatureDate"] ? new Date(_data["hcpSignatureDate"].toString()) : <any>undefined;
            this.hcpSignatureMissingFlag = _data["hcpSignatureMissingFlag"];
            this.requestorComment = _data["requestorComment"];
            this.srfAdverseEventFlag = _data["srfAdverseEventFlag"];
            this.srfAdverseEventComment = _data["srfAdverseEventComment"];
            this.hasKnipperGeneratedSrf = _data["hasKnipperGeneratedSrf"];
            this.hasThirdPartyGeneratedSrf = _data["hasThirdPartyGeneratedSrf"];
            this.hasPreFilledSrf = _data["hasPreFilledSrf"];
            this.hasBlankSrf = _data["hasBlankSrf"];
            this.repDrivenFlag = _data["repDrivenFlag"];
            this.institutionFlag = _data["institutionFlag"];
            this.displayDeaFlag = _data["displayDeaFlag"];
            this.displaySpecialtyFlag = _data["displaySpecialtyFlag"];
            this.displaySanFlag = _data["displaySanFlag"];
            this.displayTuesdayDeliveryFlag = _data["displayTuesdayDeliveryFlag"];
            this.displayWednesdayDeliveryFlag = _data["displayWednesdayDeliveryFlag"];
            this.displayThursdayDeliveryFlag = _data["displayThursdayDeliveryFlag"];
            this.displayFridayDeliveryFlag = _data["displayFridayDeliveryFlag"];
            this.unauthorizedFormChanges = _data["unauthorizedFormChanges"] ? DataEntryOrderUnauthorizedFormChangeDto.fromJS(_data["unauthorizedFormChanges"]) : <any>undefined;
            this.lockInfo = _data["lockInfo"] ? LockDto.fromJS(_data["lockInfo"]) : <any>undefined;
            if (Array.isArray(_data["prohibitedFormModFields"])) {
                this.prohibitedFormModFields = [] as any;
                for (let item of _data["prohibitedFormModFields"])
                    this.prohibitedFormModFields.push(item);
            }
            this.submitFlag = _data["submitFlag"];
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = _data["lastModifierUserId"];
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DataEntryOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataEntryOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["offerId"] = this.offerId;
        data["orderNumber"] = this.orderNumber;
        data["externalOrderNumber"] = this.externalOrderNumber;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["requestDate"] = this.requestDate ? this.requestDate.toISOString() : <any>undefined;
        data["orderStatusTimeDiff"] = this.orderStatusTimeDiff;
        data["orderStatusLastModifiedTime"] = this.orderStatusLastModifiedTime ? this.orderStatusLastModifiedTime.toISOString() : <any>undefined;
        data["program"] = this.program;
        data["jobId"] = this.jobId;
        data["orderSourceId"] = this.orderSourceId;
        data["relatedOfferId"] = this.relatedOfferId;
        data["relatedOfferNumber"] = this.relatedOfferNumber;
        data["formId"] = this.formId;
        data["formIdMissingFlag"] = this.formIdMissingFlag;
        data["formIdNotApplicableFlag"] = this.formIdNotApplicableFlag;
        data["formIdUnmatchedFlag"] = this.formIdUnmatchedFlag;
        data["batchNumber"] = this.batchNumber;
        data["batchDate"] = this.batchDate ? this.batchDate.toISOString() : <any>undefined;
        data["salesRepNbr"] = this.salesRepNbr;
        data["salesRepFirstName"] = this.salesRepFirstName;
        data["salesRepLastName"] = this.salesRepLastName;
        data["territoryCode"] = this.territoryCode;
        data["missingSalesRepIdFlag"] = this.missingSalesRepIdFlag;
        data["missingSalesRepFirstNameFlag"] = this.missingSalesRepFirstNameFlag;
        data["missingSalesRepLastNameFlag"] = this.missingSalesRepLastNameFlag;
        data["missingTerritoryCodeFlag"] = this.missingTerritoryCodeFlag;
        data["reasonForModificationFromOfferSalesRepNbr"] = this.reasonForModificationFromOfferSalesRepNbr;
        data["reasonForModificationFromOfferSalesRepFirstName"] = this.reasonForModificationFromOfferSalesRepFirstName;
        data["reasonForModificationFromOfferSalesRepLastName"] = this.reasonForModificationFromOfferSalesRepLastName;
        data["reasonForModificationFromOfferTerritoryCode"] = this.reasonForModificationFromOfferTerritoryCode;
        data["missingOrderRequestDateFlag"] = this.missingOrderRequestDateFlag;
        data["reasonForModificationFromOfferOrderRequestDate"] = this.reasonForModificationFromOfferOrderRequestDate;
        data["requestorDetails"] = this.requestorDetails ? this.requestorDetails.toJSON() : <any>undefined;
        data["recipientDetails"] = this.recipientDetails ? this.recipientDetails.toJSON() : <any>undefined;
        if (Array.isArray(this.orderLines)) {
            data["orderLines"] = [];
            for (let item of this.orderLines)
                data["orderLines"].push(item.toJSON());
        }
        data["tuesdayDeliveryFlag"] = this.tuesdayDeliveryFlag;
        data["wednesdayDeliveryFlag"] = this.wednesdayDeliveryFlag;
        data["thursdayDeliveryFlag"] = this.thursdayDeliveryFlag;
        data["fridayDeliveryFlag"] = this.fridayDeliveryFlag;
        data["acceptableDaysMissingFlag"] = this.acceptableDaysMissingFlag;
        data["rushFlag"] = this.rushFlag;
        data["optOutFlag"] = this.optOutFlag;
        data["ohioTDDDExemptionFlag"] = this.ohioTDDDExemptionFlag;
        data["hcpSignaturePresentFlag"] = this.hcpSignaturePresentFlag;
        data["hcpSignatureStampedFlag"] = this.hcpSignatureStampedFlag;
        data["hcpSignatureMatchFlag"] = this.hcpSignatureMatchFlag;
        data["hcpSignatureDateStampedFlag"] = this.hcpSignatureDateStampedFlag;
        data["hcpSignedDatePresentFlag"] = this.hcpSignedDatePresentFlag;
        data["hcpSignatureDate"] = this.hcpSignatureDate ? this.hcpSignatureDate.toISOString() : <any>undefined;
        data["hcpSignatureMissingFlag"] = this.hcpSignatureMissingFlag;
        data["requestorComment"] = this.requestorComment;
        data["srfAdverseEventFlag"] = this.srfAdverseEventFlag;
        data["srfAdverseEventComment"] = this.srfAdverseEventComment;
        data["hasKnipperGeneratedSrf"] = this.hasKnipperGeneratedSrf;
        data["hasThirdPartyGeneratedSrf"] = this.hasThirdPartyGeneratedSrf;
        data["hasPreFilledSrf"] = this.hasPreFilledSrf;
        data["hasBlankSrf"] = this.hasBlankSrf;
        data["repDrivenFlag"] = this.repDrivenFlag;
        data["institutionFlag"] = this.institutionFlag;
        data["displayDeaFlag"] = this.displayDeaFlag;
        data["displaySpecialtyFlag"] = this.displaySpecialtyFlag;
        data["displaySanFlag"] = this.displaySanFlag;
        data["displayTuesdayDeliveryFlag"] = this.displayTuesdayDeliveryFlag;
        data["displayWednesdayDeliveryFlag"] = this.displayWednesdayDeliveryFlag;
        data["displayThursdayDeliveryFlag"] = this.displayThursdayDeliveryFlag;
        data["displayFridayDeliveryFlag"] = this.displayFridayDeliveryFlag;
        data["unauthorizedFormChanges"] = this.unauthorizedFormChanges ? this.unauthorizedFormChanges.toJSON() : <any>undefined;
        data["lockInfo"] = this.lockInfo ? this.lockInfo.toJSON() : <any>undefined;
        if (Array.isArray(this.prohibitedFormModFields)) {
            data["prohibitedFormModFields"] = [];
            for (let item of this.prohibitedFormModFields)
                data["prohibitedFormModFields"].push(item);
        }
        data["submitFlag"] = this.submitFlag;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): DataEntryOrderDto {
        const json = this.toJSON();
        let result = new DataEntryOrderDto();
        result.init(json);
        return result;
    }
}

export interface IDataEntryOrderDto {
    id: string | undefined;
    offerId: string | undefined;
    orderNumber: string | undefined;
    externalOrderNumber: string | undefined;
    orderDate: Date | undefined;
    requestDate: Date | undefined;
    orderStatusTimeDiff: number | undefined;
    orderStatusLastModifiedTime: Date | undefined;
    program: string | undefined;
    jobId: string | undefined;
    orderSourceId: string | undefined;
    relatedOfferId: string | undefined;
    relatedOfferNumber: string | undefined;
    formId: string | undefined;
    formIdMissingFlag: boolean | undefined;
    formIdNotApplicableFlag: boolean | undefined;
    formIdUnmatchedFlag: boolean | undefined;
    batchNumber: string | undefined;
    batchDate: Date | undefined;
    salesRepNbr: string | undefined;
    salesRepFirstName: string | undefined;
    salesRepLastName: string | undefined;
    territoryCode: string | undefined;
    missingSalesRepIdFlag: boolean | undefined;
    missingSalesRepFirstNameFlag: boolean | undefined;
    missingSalesRepLastNameFlag: boolean | undefined;
    missingTerritoryCodeFlag: boolean | undefined;
    reasonForModificationFromOfferSalesRepNbr: string | undefined;
    reasonForModificationFromOfferSalesRepFirstName: string | undefined;
    reasonForModificationFromOfferSalesRepLastName: string | undefined;
    reasonForModificationFromOfferTerritoryCode: string | undefined;
    missingOrderRequestDateFlag: boolean | undefined;
    reasonForModificationFromOfferOrderRequestDate: string | undefined;
    requestorDetails: DataEntryOrderHcpDetailsDto | undefined;
    recipientDetails: DataEntryOrderHcpDetailsDto | undefined;
    orderLines: DataEntryOrderLineDto[] | undefined;
    tuesdayDeliveryFlag: boolean | undefined;
    wednesdayDeliveryFlag: boolean | undefined;
    thursdayDeliveryFlag: boolean | undefined;
    fridayDeliveryFlag: boolean | undefined;
    acceptableDaysMissingFlag: boolean | undefined;
    rushFlag: boolean | undefined;
    optOutFlag: boolean | undefined;
    ohioTDDDExemptionFlag: boolean | undefined;
    hcpSignaturePresentFlag: boolean | undefined;
    hcpSignatureStampedFlag: boolean | undefined;
    hcpSignatureMatchFlag: boolean | undefined;
    hcpSignatureDateStampedFlag: boolean | undefined;
    hcpSignedDatePresentFlag: boolean | undefined;
    hcpSignatureDate: Date | undefined;
    hcpSignatureMissingFlag: boolean | undefined;
    requestorComment: string | undefined;
    srfAdverseEventFlag: boolean | undefined;
    srfAdverseEventComment: string | undefined;
    hasKnipperGeneratedSrf: boolean | undefined;
    hasThirdPartyGeneratedSrf: boolean | undefined;
    hasPreFilledSrf: boolean | undefined;
    hasBlankSrf: boolean | undefined;
    repDrivenFlag: boolean | undefined;
    institutionFlag: boolean | undefined;
    displayDeaFlag: boolean | undefined;
    displaySpecialtyFlag: boolean | undefined;
    displaySanFlag: boolean | undefined;
    displayTuesdayDeliveryFlag: boolean | undefined;
    displayWednesdayDeliveryFlag: boolean | undefined;
    displayThursdayDeliveryFlag: boolean | undefined;
    displayFridayDeliveryFlag: boolean | undefined;
    unauthorizedFormChanges: DataEntryOrderUnauthorizedFormChangeDto | undefined;
    lockInfo: LockDto | undefined;
    prohibitedFormModFields: string[] | undefined;
    submitFlag: boolean | undefined;
    lastModificationTime: Date | undefined;
    lastModifierUserId: number | undefined;
    names: LocalizedValue[] | undefined;
}

export class DataEntryOrderHcpDetailsDto implements IDataEntryOrderHcpDetailsDto {
    hcpId: string | undefined;
    knipperHcpId: string | undefined;
    clientTargetId: string | undefined;
    firstName: string | undefined;
    middleName: string | undefined;
    lastName: string | undefined;
    suffixId: string | undefined;
    professionalDesignationId: string | undefined;
    specialtyId: string | undefined;
    stateLicenseStateId: string | undefined;
    stateLicenseNbr: string | undefined;
    stateId: string | undefined;
    address1Text: string | undefined;
    address2Text: string | undefined;
    cityName: string | undefined;
    zipCode: string | undefined;
    addressId: string | undefined;
    companyName: string | undefined;
    san: string | undefined;
    deaNbr: string | undefined;
    emailAddressText: string | undefined;
    phoneNbr: string | undefined;
    phoneExtensionNbr: string | undefined;
    faxNbr: string | undefined;
    missingFirstNameFlag: boolean | undefined;
    missingLastNameFlag: boolean | undefined;
    missingSpecialtyCodeFlag: boolean | undefined;
    missingStateLicenseNbrFlag: boolean | undefined;
    missingAddress1TextFlag: boolean | undefined;
    missingCityNameFlag: boolean | undefined;
    missingZipCodeFlag: boolean | undefined;
    missingStateCodeFlag: boolean | undefined;
    missingProfessionalDesignationCodeFlag: boolean | undefined;
    missingStateLicenseStateCodeFlag: boolean | undefined;
    missingDeaNumberFlag: boolean | undefined;
    missingSanFlag: boolean | undefined;
    formModFirstNameFlag: boolean | undefined;
    formModMiddleNameFlag: boolean | undefined;
    formModLastNameFlag: boolean | undefined;
    formModStateLicenseNumberFlag: boolean | undefined;
    formModDeaLicenseNumberFlag: boolean | undefined;
    formModProfessionalDesignationFlag: boolean | undefined;
    formModSpecialtyFlag: boolean | undefined;
    formModCompanyFlag: boolean | undefined;
    formModAddress1Flag: boolean | undefined;
    formModAddress2Flag: boolean | undefined;
    formModCityFlag: boolean | undefined;
    formModStateFlag: boolean | undefined;
    formModZipCodeFlag: boolean | undefined;

    constructor(data?: IDataEntryOrderHcpDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hcpId = _data["hcpId"];
            this.knipperHcpId = _data["knipperHcpId"];
            this.clientTargetId = _data["clientTargetId"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.suffixId = _data["suffixId"];
            this.professionalDesignationId = _data["professionalDesignationId"];
            this.specialtyId = _data["specialtyId"];
            this.stateLicenseStateId = _data["stateLicenseStateId"];
            this.stateLicenseNbr = _data["stateLicenseNbr"];
            this.stateId = _data["stateId"];
            this.address1Text = _data["address1Text"];
            this.address2Text = _data["address2Text"];
            this.cityName = _data["cityName"];
            this.zipCode = _data["zipCode"];
            this.addressId = _data["addressId"];
            this.companyName = _data["companyName"];
            this.san = _data["san"];
            this.deaNbr = _data["deaNbr"];
            this.emailAddressText = _data["emailAddressText"];
            this.phoneNbr = _data["phoneNbr"];
            this.phoneExtensionNbr = _data["phoneExtensionNbr"];
            this.faxNbr = _data["faxNbr"];
            this.missingFirstNameFlag = _data["missingFirstNameFlag"];
            this.missingLastNameFlag = _data["missingLastNameFlag"];
            this.missingSpecialtyCodeFlag = _data["missingSpecialtyCodeFlag"];
            this.missingStateLicenseNbrFlag = _data["missingStateLicenseNbrFlag"];
            this.missingAddress1TextFlag = _data["missingAddress1TextFlag"];
            this.missingCityNameFlag = _data["missingCityNameFlag"];
            this.missingZipCodeFlag = _data["missingZipCodeFlag"];
            this.missingStateCodeFlag = _data["missingStateCodeFlag"];
            this.missingProfessionalDesignationCodeFlag = _data["missingProfessionalDesignationCodeFlag"];
            this.missingStateLicenseStateCodeFlag = _data["missingStateLicenseStateCodeFlag"];
            this.missingDeaNumberFlag = _data["missingDeaNumberFlag"];
            this.missingSanFlag = _data["missingSanFlag"];
            this.formModFirstNameFlag = _data["formModFirstNameFlag"];
            this.formModMiddleNameFlag = _data["formModMiddleNameFlag"];
            this.formModLastNameFlag = _data["formModLastNameFlag"];
            this.formModStateLicenseNumberFlag = _data["formModStateLicenseNumberFlag"];
            this.formModDeaLicenseNumberFlag = _data["formModDeaLicenseNumberFlag"];
            this.formModProfessionalDesignationFlag = _data["formModProfessionalDesignationFlag"];
            this.formModSpecialtyFlag = _data["formModSpecialtyFlag"];
            this.formModCompanyFlag = _data["formModCompanyFlag"];
            this.formModAddress1Flag = _data["formModAddress1Flag"];
            this.formModAddress2Flag = _data["formModAddress2Flag"];
            this.formModCityFlag = _data["formModCityFlag"];
            this.formModStateFlag = _data["formModStateFlag"];
            this.formModZipCodeFlag = _data["formModZipCodeFlag"];
        }
    }

    static fromJS(data: any): DataEntryOrderHcpDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataEntryOrderHcpDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hcpId"] = this.hcpId;
        data["knipperHcpId"] = this.knipperHcpId;
        data["clientTargetId"] = this.clientTargetId;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["suffixId"] = this.suffixId;
        data["professionalDesignationId"] = this.professionalDesignationId;
        data["specialtyId"] = this.specialtyId;
        data["stateLicenseStateId"] = this.stateLicenseStateId;
        data["stateLicenseNbr"] = this.stateLicenseNbr;
        data["stateId"] = this.stateId;
        data["address1Text"] = this.address1Text;
        data["address2Text"] = this.address2Text;
        data["cityName"] = this.cityName;
        data["zipCode"] = this.zipCode;
        data["addressId"] = this.addressId;
        data["companyName"] = this.companyName;
        data["san"] = this.san;
        data["deaNbr"] = this.deaNbr;
        data["emailAddressText"] = this.emailAddressText;
        data["phoneNbr"] = this.phoneNbr;
        data["phoneExtensionNbr"] = this.phoneExtensionNbr;
        data["faxNbr"] = this.faxNbr;
        data["missingFirstNameFlag"] = this.missingFirstNameFlag;
        data["missingLastNameFlag"] = this.missingLastNameFlag;
        data["missingSpecialtyCodeFlag"] = this.missingSpecialtyCodeFlag;
        data["missingStateLicenseNbrFlag"] = this.missingStateLicenseNbrFlag;
        data["missingAddress1TextFlag"] = this.missingAddress1TextFlag;
        data["missingCityNameFlag"] = this.missingCityNameFlag;
        data["missingZipCodeFlag"] = this.missingZipCodeFlag;
        data["missingStateCodeFlag"] = this.missingStateCodeFlag;
        data["missingProfessionalDesignationCodeFlag"] = this.missingProfessionalDesignationCodeFlag;
        data["missingStateLicenseStateCodeFlag"] = this.missingStateLicenseStateCodeFlag;
        data["missingDeaNumberFlag"] = this.missingDeaNumberFlag;
        data["missingSanFlag"] = this.missingSanFlag;
        data["formModFirstNameFlag"] = this.formModFirstNameFlag;
        data["formModMiddleNameFlag"] = this.formModMiddleNameFlag;
        data["formModLastNameFlag"] = this.formModLastNameFlag;
        data["formModStateLicenseNumberFlag"] = this.formModStateLicenseNumberFlag;
        data["formModDeaLicenseNumberFlag"] = this.formModDeaLicenseNumberFlag;
        data["formModProfessionalDesignationFlag"] = this.formModProfessionalDesignationFlag;
        data["formModSpecialtyFlag"] = this.formModSpecialtyFlag;
        data["formModCompanyFlag"] = this.formModCompanyFlag;
        data["formModAddress1Flag"] = this.formModAddress1Flag;
        data["formModAddress2Flag"] = this.formModAddress2Flag;
        data["formModCityFlag"] = this.formModCityFlag;
        data["formModStateFlag"] = this.formModStateFlag;
        data["formModZipCodeFlag"] = this.formModZipCodeFlag;
        return data; 
    }

    clone(): DataEntryOrderHcpDetailsDto {
        const json = this.toJSON();
        let result = new DataEntryOrderHcpDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IDataEntryOrderHcpDetailsDto {
    hcpId: string | undefined;
    knipperHcpId: string | undefined;
    clientTargetId: string | undefined;
    firstName: string | undefined;
    middleName: string | undefined;
    lastName: string | undefined;
    suffixId: string | undefined;
    professionalDesignationId: string | undefined;
    specialtyId: string | undefined;
    stateLicenseStateId: string | undefined;
    stateLicenseNbr: string | undefined;
    stateId: string | undefined;
    address1Text: string | undefined;
    address2Text: string | undefined;
    cityName: string | undefined;
    zipCode: string | undefined;
    addressId: string | undefined;
    companyName: string | undefined;
    san: string | undefined;
    deaNbr: string | undefined;
    emailAddressText: string | undefined;
    phoneNbr: string | undefined;
    phoneExtensionNbr: string | undefined;
    faxNbr: string | undefined;
    missingFirstNameFlag: boolean | undefined;
    missingLastNameFlag: boolean | undefined;
    missingSpecialtyCodeFlag: boolean | undefined;
    missingStateLicenseNbrFlag: boolean | undefined;
    missingAddress1TextFlag: boolean | undefined;
    missingCityNameFlag: boolean | undefined;
    missingZipCodeFlag: boolean | undefined;
    missingStateCodeFlag: boolean | undefined;
    missingProfessionalDesignationCodeFlag: boolean | undefined;
    missingStateLicenseStateCodeFlag: boolean | undefined;
    missingDeaNumberFlag: boolean | undefined;
    missingSanFlag: boolean | undefined;
    formModFirstNameFlag: boolean | undefined;
    formModMiddleNameFlag: boolean | undefined;
    formModLastNameFlag: boolean | undefined;
    formModStateLicenseNumberFlag: boolean | undefined;
    formModDeaLicenseNumberFlag: boolean | undefined;
    formModProfessionalDesignationFlag: boolean | undefined;
    formModSpecialtyFlag: boolean | undefined;
    formModCompanyFlag: boolean | undefined;
    formModAddress1Flag: boolean | undefined;
    formModAddress2Flag: boolean | undefined;
    formModCityFlag: boolean | undefined;
    formModStateFlag: boolean | undefined;
    formModZipCodeFlag: boolean | undefined;
}

export class DataEntryOrderLineDto implements IDataEntryOrderLineDto {
    orderId: string | undefined;
    productId: string | undefined;
    distributionUoMClassificationValueId: string | undefined;
    orderQty: number | undefined;
    wmsProductId: string | undefined;
    wmsProductName: string | undefined;
    missingOrderQtyFlag: boolean | undefined;
    reasonForModificationFromOffer: string | undefined;
    isIncluded: boolean | undefined;
    formModProductFlag: boolean | undefined;
    formModQuantityOrderedFlag: boolean | undefined;
    pageNbr: number | undefined;
    displayOrderNbr: number | undefined;
    displayQuantity: string | undefined;
    id: string | undefined;

    constructor(data?: IDataEntryOrderLineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.productId = _data["productId"];
            this.distributionUoMClassificationValueId = _data["distributionUoMClassificationValueId"];
            this.orderQty = _data["orderQty"];
            this.wmsProductId = _data["wmsProductId"];
            this.wmsProductName = _data["wmsProductName"];
            this.missingOrderQtyFlag = _data["missingOrderQtyFlag"];
            this.reasonForModificationFromOffer = _data["reasonForModificationFromOffer"];
            this.isIncluded = _data["isIncluded"];
            this.formModProductFlag = _data["formModProductFlag"];
            this.formModQuantityOrderedFlag = _data["formModQuantityOrderedFlag"];
            this.pageNbr = _data["pageNbr"];
            this.displayOrderNbr = _data["displayOrderNbr"];
            this.displayQuantity = _data["displayQuantity"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DataEntryOrderLineDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataEntryOrderLineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["productId"] = this.productId;
        data["distributionUoMClassificationValueId"] = this.distributionUoMClassificationValueId;
        data["orderQty"] = this.orderQty;
        data["wmsProductId"] = this.wmsProductId;
        data["wmsProductName"] = this.wmsProductName;
        data["missingOrderQtyFlag"] = this.missingOrderQtyFlag;
        data["reasonForModificationFromOffer"] = this.reasonForModificationFromOffer;
        data["isIncluded"] = this.isIncluded;
        data["formModProductFlag"] = this.formModProductFlag;
        data["formModQuantityOrderedFlag"] = this.formModQuantityOrderedFlag;
        data["pageNbr"] = this.pageNbr;
        data["displayOrderNbr"] = this.displayOrderNbr;
        data["displayQuantity"] = this.displayQuantity;
        data["id"] = this.id;
        return data; 
    }

    clone(): DataEntryOrderLineDto {
        const json = this.toJSON();
        let result = new DataEntryOrderLineDto();
        result.init(json);
        return result;
    }
}

export interface IDataEntryOrderLineDto {
    orderId: string | undefined;
    productId: string | undefined;
    distributionUoMClassificationValueId: string | undefined;
    orderQty: number | undefined;
    wmsProductId: string | undefined;
    wmsProductName: string | undefined;
    missingOrderQtyFlag: boolean | undefined;
    reasonForModificationFromOffer: string | undefined;
    isIncluded: boolean | undefined;
    formModProductFlag: boolean | undefined;
    formModQuantityOrderedFlag: boolean | undefined;
    pageNbr: number | undefined;
    displayOrderNbr: number | undefined;
    displayQuantity: string | undefined;
    id: string | undefined;
}

export class DataEntryOrderUnauthorizedFormChangeDto implements IDataEntryOrderUnauthorizedFormChangeDto {
    requestorFirstNameFlag: boolean | undefined;
    requestorDEANbrFlag: boolean | undefined;
    requestorCityFlag: boolean | undefined;
    requestorMiddleNameFlag: boolean | undefined;
    requestorStateLicenseNbrFlag: boolean | undefined;
    requestorLastNameFlag: boolean | undefined;
    requestorSpecialtyFlag: boolean | undefined;
    requestorStateFlag: boolean | undefined;
    recipientFirstNameFlag: boolean | undefined;
    recipientDEANbrFlag: boolean | undefined;
    recipientMiddleNameFlag: boolean | undefined;
    recipientAddress1Flag: boolean | undefined;
    recipientAddress2Flag: boolean | undefined;
    recipientLastNameFlag: boolean | undefined;
    recipientCityFlag: boolean | undefined;
    recipientStateLicenseNbrFlag: boolean | undefined;
    quantityFlag: boolean | undefined;
    requestDateFlag: boolean | undefined;
    productFlag: boolean | undefined;
    requestorProfessionalDesignationFlag: boolean | undefined;
    requestorCompanyFlag: boolean | undefined;
    requestorAddress1Flag: boolean | undefined;
    requestorAddress2Flag: boolean | undefined;
    requestorZipFlag: boolean | undefined;
    recipientCompanyFlag: boolean | undefined;
    recipientStateFlag: boolean | undefined;
    recipientZipFlag: boolean | undefined;
    requestorFirstNameReason: string | undefined;
    requestorDEANbrReason: string | undefined;
    requestorCityReason: string | undefined;
    requestorMiddleNameReason: string | undefined;
    requestorStateLicenseNbrReason: string | undefined;
    requestorLastNameReason: string | undefined;
    requestorSpecialtyReason: string | undefined;
    requestorStateReason: string | undefined;
    recipientFirstNameReason: string | undefined;
    recipientDEANbrReason: string | undefined;
    recipientMiddleNameReason: string | undefined;
    recipientAddress1Reason: string | undefined;
    recipientAddress2Reason: string | undefined;
    recipientLastNameReason: string | undefined;
    recipientCityReason: string | undefined;
    recipientStateLicenseNbrReason: string | undefined;
    quantityReason: string | undefined;
    requestDateReason: string | undefined;
    productReason: string | undefined;
    requestorProfessionalDesignationReason: string | undefined;
    requestorCompanyReason: string | undefined;
    requestorAddress1Reason: string | undefined;
    requestorAddress2Reason: string | undefined;
    requestorZipReason: string | undefined;
    recipientCompanyReason: string | undefined;
    recipientStateReason: string | undefined;
    recipientZipReason: string | undefined;

    constructor(data?: IDataEntryOrderUnauthorizedFormChangeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestorFirstNameFlag = _data["requestorFirstNameFlag"];
            this.requestorDEANbrFlag = _data["requestorDEANbrFlag"];
            this.requestorCityFlag = _data["requestorCityFlag"];
            this.requestorMiddleNameFlag = _data["requestorMiddleNameFlag"];
            this.requestorStateLicenseNbrFlag = _data["requestorStateLicenseNbrFlag"];
            this.requestorLastNameFlag = _data["requestorLastNameFlag"];
            this.requestorSpecialtyFlag = _data["requestorSpecialtyFlag"];
            this.requestorStateFlag = _data["requestorStateFlag"];
            this.recipientFirstNameFlag = _data["recipientFirstNameFlag"];
            this.recipientDEANbrFlag = _data["recipientDEANbrFlag"];
            this.recipientMiddleNameFlag = _data["recipientMiddleNameFlag"];
            this.recipientAddress1Flag = _data["recipientAddress1Flag"];
            this.recipientAddress2Flag = _data["recipientAddress2Flag"];
            this.recipientLastNameFlag = _data["recipientLastNameFlag"];
            this.recipientCityFlag = _data["recipientCityFlag"];
            this.recipientStateLicenseNbrFlag = _data["recipientStateLicenseNbrFlag"];
            this.quantityFlag = _data["quantityFlag"];
            this.requestDateFlag = _data["requestDateFlag"];
            this.productFlag = _data["productFlag"];
            this.requestorProfessionalDesignationFlag = _data["requestorProfessionalDesignationFlag"];
            this.requestorCompanyFlag = _data["requestorCompanyFlag"];
            this.requestorAddress1Flag = _data["requestorAddress1Flag"];
            this.requestorAddress2Flag = _data["requestorAddress2Flag"];
            this.requestorZipFlag = _data["requestorZipFlag"];
            this.recipientCompanyFlag = _data["recipientCompanyFlag"];
            this.recipientStateFlag = _data["recipientStateFlag"];
            this.recipientZipFlag = _data["recipientZipFlag"];
            this.requestorFirstNameReason = _data["requestorFirstNameReason"];
            this.requestorDEANbrReason = _data["requestorDEANbrReason"];
            this.requestorCityReason = _data["requestorCityReason"];
            this.requestorMiddleNameReason = _data["requestorMiddleNameReason"];
            this.requestorStateLicenseNbrReason = _data["requestorStateLicenseNbrReason"];
            this.requestorLastNameReason = _data["requestorLastNameReason"];
            this.requestorSpecialtyReason = _data["requestorSpecialtyReason"];
            this.requestorStateReason = _data["requestorStateReason"];
            this.recipientFirstNameReason = _data["recipientFirstNameReason"];
            this.recipientDEANbrReason = _data["recipientDEANbrReason"];
            this.recipientMiddleNameReason = _data["recipientMiddleNameReason"];
            this.recipientAddress1Reason = _data["recipientAddress1Reason"];
            this.recipientAddress2Reason = _data["recipientAddress2Reason"];
            this.recipientLastNameReason = _data["recipientLastNameReason"];
            this.recipientCityReason = _data["recipientCityReason"];
            this.recipientStateLicenseNbrReason = _data["recipientStateLicenseNbrReason"];
            this.quantityReason = _data["quantityReason"];
            this.requestDateReason = _data["requestDateReason"];
            this.productReason = _data["productReason"];
            this.requestorProfessionalDesignationReason = _data["requestorProfessionalDesignationReason"];
            this.requestorCompanyReason = _data["requestorCompanyReason"];
            this.requestorAddress1Reason = _data["requestorAddress1Reason"];
            this.requestorAddress2Reason = _data["requestorAddress2Reason"];
            this.requestorZipReason = _data["requestorZipReason"];
            this.recipientCompanyReason = _data["recipientCompanyReason"];
            this.recipientStateReason = _data["recipientStateReason"];
            this.recipientZipReason = _data["recipientZipReason"];
        }
    }

    static fromJS(data: any): DataEntryOrderUnauthorizedFormChangeDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataEntryOrderUnauthorizedFormChangeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestorFirstNameFlag"] = this.requestorFirstNameFlag;
        data["requestorDEANbrFlag"] = this.requestorDEANbrFlag;
        data["requestorCityFlag"] = this.requestorCityFlag;
        data["requestorMiddleNameFlag"] = this.requestorMiddleNameFlag;
        data["requestorStateLicenseNbrFlag"] = this.requestorStateLicenseNbrFlag;
        data["requestorLastNameFlag"] = this.requestorLastNameFlag;
        data["requestorSpecialtyFlag"] = this.requestorSpecialtyFlag;
        data["requestorStateFlag"] = this.requestorStateFlag;
        data["recipientFirstNameFlag"] = this.recipientFirstNameFlag;
        data["recipientDEANbrFlag"] = this.recipientDEANbrFlag;
        data["recipientMiddleNameFlag"] = this.recipientMiddleNameFlag;
        data["recipientAddress1Flag"] = this.recipientAddress1Flag;
        data["recipientAddress2Flag"] = this.recipientAddress2Flag;
        data["recipientLastNameFlag"] = this.recipientLastNameFlag;
        data["recipientCityFlag"] = this.recipientCityFlag;
        data["recipientStateLicenseNbrFlag"] = this.recipientStateLicenseNbrFlag;
        data["quantityFlag"] = this.quantityFlag;
        data["requestDateFlag"] = this.requestDateFlag;
        data["productFlag"] = this.productFlag;
        data["requestorProfessionalDesignationFlag"] = this.requestorProfessionalDesignationFlag;
        data["requestorCompanyFlag"] = this.requestorCompanyFlag;
        data["requestorAddress1Flag"] = this.requestorAddress1Flag;
        data["requestorAddress2Flag"] = this.requestorAddress2Flag;
        data["requestorZipFlag"] = this.requestorZipFlag;
        data["recipientCompanyFlag"] = this.recipientCompanyFlag;
        data["recipientStateFlag"] = this.recipientStateFlag;
        data["recipientZipFlag"] = this.recipientZipFlag;
        data["requestorFirstNameReason"] = this.requestorFirstNameReason;
        data["requestorDEANbrReason"] = this.requestorDEANbrReason;
        data["requestorCityReason"] = this.requestorCityReason;
        data["requestorMiddleNameReason"] = this.requestorMiddleNameReason;
        data["requestorStateLicenseNbrReason"] = this.requestorStateLicenseNbrReason;
        data["requestorLastNameReason"] = this.requestorLastNameReason;
        data["requestorSpecialtyReason"] = this.requestorSpecialtyReason;
        data["requestorStateReason"] = this.requestorStateReason;
        data["recipientFirstNameReason"] = this.recipientFirstNameReason;
        data["recipientDEANbrReason"] = this.recipientDEANbrReason;
        data["recipientMiddleNameReason"] = this.recipientMiddleNameReason;
        data["recipientAddress1Reason"] = this.recipientAddress1Reason;
        data["recipientAddress2Reason"] = this.recipientAddress2Reason;
        data["recipientLastNameReason"] = this.recipientLastNameReason;
        data["recipientCityReason"] = this.recipientCityReason;
        data["recipientStateLicenseNbrReason"] = this.recipientStateLicenseNbrReason;
        data["quantityReason"] = this.quantityReason;
        data["requestDateReason"] = this.requestDateReason;
        data["productReason"] = this.productReason;
        data["requestorProfessionalDesignationReason"] = this.requestorProfessionalDesignationReason;
        data["requestorCompanyReason"] = this.requestorCompanyReason;
        data["requestorAddress1Reason"] = this.requestorAddress1Reason;
        data["requestorAddress2Reason"] = this.requestorAddress2Reason;
        data["requestorZipReason"] = this.requestorZipReason;
        data["recipientCompanyReason"] = this.recipientCompanyReason;
        data["recipientStateReason"] = this.recipientStateReason;
        data["recipientZipReason"] = this.recipientZipReason;
        return data; 
    }

    clone(): DataEntryOrderUnauthorizedFormChangeDto {
        const json = this.toJSON();
        let result = new DataEntryOrderUnauthorizedFormChangeDto();
        result.init(json);
        return result;
    }
}

export interface IDataEntryOrderUnauthorizedFormChangeDto {
    requestorFirstNameFlag: boolean | undefined;
    requestorDEANbrFlag: boolean | undefined;
    requestorCityFlag: boolean | undefined;
    requestorMiddleNameFlag: boolean | undefined;
    requestorStateLicenseNbrFlag: boolean | undefined;
    requestorLastNameFlag: boolean | undefined;
    requestorSpecialtyFlag: boolean | undefined;
    requestorStateFlag: boolean | undefined;
    recipientFirstNameFlag: boolean | undefined;
    recipientDEANbrFlag: boolean | undefined;
    recipientMiddleNameFlag: boolean | undefined;
    recipientAddress1Flag: boolean | undefined;
    recipientAddress2Flag: boolean | undefined;
    recipientLastNameFlag: boolean | undefined;
    recipientCityFlag: boolean | undefined;
    recipientStateLicenseNbrFlag: boolean | undefined;
    quantityFlag: boolean | undefined;
    requestDateFlag: boolean | undefined;
    productFlag: boolean | undefined;
    requestorProfessionalDesignationFlag: boolean | undefined;
    requestorCompanyFlag: boolean | undefined;
    requestorAddress1Flag: boolean | undefined;
    requestorAddress2Flag: boolean | undefined;
    requestorZipFlag: boolean | undefined;
    recipientCompanyFlag: boolean | undefined;
    recipientStateFlag: boolean | undefined;
    recipientZipFlag: boolean | undefined;
    requestorFirstNameReason: string | undefined;
    requestorDEANbrReason: string | undefined;
    requestorCityReason: string | undefined;
    requestorMiddleNameReason: string | undefined;
    requestorStateLicenseNbrReason: string | undefined;
    requestorLastNameReason: string | undefined;
    requestorSpecialtyReason: string | undefined;
    requestorStateReason: string | undefined;
    recipientFirstNameReason: string | undefined;
    recipientDEANbrReason: string | undefined;
    recipientMiddleNameReason: string | undefined;
    recipientAddress1Reason: string | undefined;
    recipientAddress2Reason: string | undefined;
    recipientLastNameReason: string | undefined;
    recipientCityReason: string | undefined;
    recipientStateLicenseNbrReason: string | undefined;
    quantityReason: string | undefined;
    requestDateReason: string | undefined;
    productReason: string | undefined;
    requestorProfessionalDesignationReason: string | undefined;
    requestorCompanyReason: string | undefined;
    requestorAddress1Reason: string | undefined;
    requestorAddress2Reason: string | undefined;
    requestorZipReason: string | undefined;
    recipientCompanyReason: string | undefined;
    recipientStateReason: string | undefined;
    recipientZipReason: string | undefined;
}

export class OrderFileUploadDto implements IOrderFileUploadDto {
    programId: string | undefined;
    fileUpload: FileUpload | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    uploadedOrderIds: string[] | undefined;
    ordersLoaded: number | undefined;
    ordersInvalid: number | undefined;
    ordersTotal: number | undefined;

    constructor(data?: IOrderFileUploadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.programId = _data["programId"];
            this.fileUpload = _data["fileUpload"] ? FileUpload.fromJS(_data["fileUpload"]) : <any>undefined;
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["uploadedOrderIds"])) {
                this.uploadedOrderIds = [] as any;
                for (let item of _data["uploadedOrderIds"])
                    this.uploadedOrderIds.push(item);
            }
            this.ordersLoaded = _data["ordersLoaded"];
            this.ordersInvalid = _data["ordersInvalid"];
            this.ordersTotal = _data["ordersTotal"];
        }
    }

    static fromJS(data: any): OrderFileUploadDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderFileUploadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["programId"] = this.programId;
        data["fileUpload"] = this.fileUpload ? this.fileUpload.toJSON() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        if (Array.isArray(this.uploadedOrderIds)) {
            data["uploadedOrderIds"] = [];
            for (let item of this.uploadedOrderIds)
                data["uploadedOrderIds"].push(item);
        }
        data["ordersLoaded"] = this.ordersLoaded;
        data["ordersInvalid"] = this.ordersInvalid;
        data["ordersTotal"] = this.ordersTotal;
        return data; 
    }

    clone(): OrderFileUploadDto {
        const json = this.toJSON();
        let result = new OrderFileUploadDto();
        result.init(json);
        return result;
    }
}

export interface IOrderFileUploadDto {
    programId: string | undefined;
    fileUpload: FileUpload | undefined;
    creatorUserId: number | undefined;
    creationTime: Date | undefined;
    uploadedOrderIds: string[] | undefined;
    ordersLoaded: number | undefined;
    ordersInvalid: number | undefined;
    ordersTotal: number | undefined;
}

export class AjaxResponseOfOrderFileUploadDto implements IAjaxResponseOfOrderFileUploadDto {
    result: OrderFileUploadDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfOrderFileUploadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? OrderFileUploadDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfOrderFileUploadDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfOrderFileUploadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfOrderFileUploadDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfOrderFileUploadDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfOrderFileUploadDto {
    result: OrderFileUploadDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfLockAckDto implements IAjaxResponseOfLockAckDto {
    result: LockAckDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfLockAckDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? LockAckDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfLockAckDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfLockAckDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfLockAckDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfLockAckDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfLockAckDto {
    result: LockAckDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class LockAckDto implements ILockAckDto {
    isLocked: boolean | undefined;
    lockConfig: LockConfigDto | undefined;

    constructor(data?: ILockAckDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isLocked = _data["isLocked"];
            this.lockConfig = _data["lockConfig"] ? LockConfigDto.fromJS(_data["lockConfig"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LockAckDto {
        data = typeof data === 'object' ? data : {};
        let result = new LockAckDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isLocked"] = this.isLocked;
        data["lockConfig"] = this.lockConfig ? this.lockConfig.toJSON() : <any>undefined;
        return data; 
    }

    clone(): LockAckDto {
        const json = this.toJSON();
        let result = new LockAckDto();
        result.init(json);
        return result;
    }
}

export interface ILockAckDto {
    isLocked: boolean | undefined;
    lockConfig: LockConfigDto | undefined;
}

export class LockConfigDto implements ILockConfigDto {
    warnLockExpiryFromInSeconds: number | undefined;
    expireLockDurationInSeconds: number | undefined;

    constructor(data?: ILockConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.warnLockExpiryFromInSeconds = _data["warnLockExpiryFromInSeconds"];
            this.expireLockDurationInSeconds = _data["expireLockDurationInSeconds"];
        }
    }

    static fromJS(data: any): LockConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new LockConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warnLockExpiryFromInSeconds"] = this.warnLockExpiryFromInSeconds;
        data["expireLockDurationInSeconds"] = this.expireLockDurationInSeconds;
        return data; 
    }

    clone(): LockConfigDto {
        const json = this.toJSON();
        let result = new LockConfigDto();
        result.init(json);
        return result;
    }
}

export interface ILockConfigDto {
    warnLockExpiryFromInSeconds: number | undefined;
    expireLockDurationInSeconds: number | undefined;
}

export class AjaxResponseOfLockInfoDto implements IAjaxResponseOfLockInfoDto {
    result: LockInfoDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfLockInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? LockInfoDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfLockInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfLockInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfLockInfoDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfLockInfoDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfLockInfoDto {
    result: LockInfoDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class LockInfoDto implements ILockInfoDto {
    lock: LockDto | undefined;
    lockConfig: LockConfigDto | undefined;

    constructor(data?: ILockInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lock = _data["lock"] ? LockDto.fromJS(_data["lock"]) : <any>undefined;
            this.lockConfig = _data["lockConfig"] ? LockConfigDto.fromJS(_data["lockConfig"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LockInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new LockInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lock"] = this.lock ? this.lock.toJSON() : <any>undefined;
        data["lockConfig"] = this.lockConfig ? this.lockConfig.toJSON() : <any>undefined;
        return data; 
    }

    clone(): LockInfoDto {
        const json = this.toJSON();
        let result = new LockInfoDto();
        result.init(json);
        return result;
    }
}

export interface ILockInfoDto {
    lock: LockDto | undefined;
    lockConfig: LockConfigDto | undefined;
}

export class AjaxResponseOfListOfInvestigationDto implements IAjaxResponseOfListOfInvestigationDto {
    result: InvestigationDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfListOfInvestigationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(InvestigationDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfListOfInvestigationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfListOfInvestigationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfListOfInvestigationDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfListOfInvestigationDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfListOfInvestigationDto {
    result: InvestigationDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfOrderValidationResultDto implements IAjaxResponseOfOrderValidationResultDto {
    result: OrderValidationResultDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfOrderValidationResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? OrderValidationResultDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfOrderValidationResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfOrderValidationResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfOrderValidationResultDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfOrderValidationResultDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfOrderValidationResultDto {
    result: OrderValidationResultDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class OrderValidationResultDto implements IOrderValidationResultDto {
    orderId: string | undefined;
    orderLineId: string | undefined;
    orderValidationId: string | undefined;
    items: OrderValidationResultItemDto[] | undefined;

    constructor(data?: IOrderValidationResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.orderLineId = _data["orderLineId"];
            this.orderValidationId = _data["orderValidationId"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items.push(OrderValidationResultItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderValidationResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderValidationResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["orderLineId"] = this.orderLineId;
        data["orderValidationId"] = this.orderValidationId;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): OrderValidationResultDto {
        const json = this.toJSON();
        let result = new OrderValidationResultDto();
        result.init(json);
        return result;
    }
}

export interface IOrderValidationResultDto {
    orderId: string | undefined;
    orderLineId: string | undefined;
    orderValidationId: string | undefined;
    items: OrderValidationResultItemDto[] | undefined;
}

export class OrderValidationResultItemDto implements IOrderValidationResultItemDto {
    orderStatusReasonTypeId: string | undefined;
    ruleItems: OrderValidationResultItemRuleDto[] | undefined;

    constructor(data?: IOrderValidationResultItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderStatusReasonTypeId = _data["orderStatusReasonTypeId"];
            if (Array.isArray(_data["ruleItems"])) {
                this.ruleItems = [] as any;
                for (let item of _data["ruleItems"])
                    this.ruleItems.push(OrderValidationResultItemRuleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderValidationResultItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderValidationResultItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderStatusReasonTypeId"] = this.orderStatusReasonTypeId;
        if (Array.isArray(this.ruleItems)) {
            data["ruleItems"] = [];
            for (let item of this.ruleItems)
                data["ruleItems"].push(item.toJSON());
        }
        return data; 
    }

    clone(): OrderValidationResultItemDto {
        const json = this.toJSON();
        let result = new OrderValidationResultItemDto();
        result.init(json);
        return result;
    }
}

export interface IOrderValidationResultItemDto {
    orderStatusReasonTypeId: string | undefined;
    ruleItems: OrderValidationResultItemRuleDto[] | undefined;
}

export class OrderValidationResultItemRuleDto implements IOrderValidationResultItemRuleDto {
    ruleCode: string | undefined;
    ruleName: string | undefined;
    displayOrder: number | undefined;

    constructor(data?: IOrderValidationResultItemRuleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ruleCode = _data["ruleCode"];
            this.ruleName = _data["ruleName"];
            this.displayOrder = _data["displayOrder"];
        }
    }

    static fromJS(data: any): OrderValidationResultItemRuleDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderValidationResultItemRuleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ruleCode"] = this.ruleCode;
        data["ruleName"] = this.ruleName;
        data["displayOrder"] = this.displayOrder;
        return data; 
    }

    clone(): OrderValidationResultItemRuleDto {
        const json = this.toJSON();
        let result = new OrderValidationResultItemRuleDto();
        result.init(json);
        return result;
    }
}

export interface IOrderValidationResultItemRuleDto {
    ruleCode: string | undefined;
    ruleName: string | undefined;
    displayOrder: number | undefined;
}

export enum InvestigationSubmittedValueDtoMode {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
}

export enum InvestigationValidationReferenceDtoMode {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
}

export enum InvestigationActionDtoMode {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
}

export enum TextInvestigationValueMask {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export enum LookupInvestigationValueDataType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum LookupInvestigationValueFormType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum LookupsInvestigationValueDataType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum LookupsInvestigationValueFormType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum InvestigationCurrentValueDtoMode {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
}

export enum StepperLifeCycleStageDtoStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum LocalizedValueLanguage {
    _0 = 0,
    _1 = 1,
}

export enum TaskStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
}

export enum TaskCreationOptions {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _4 = 4,
    _8 = 8,
    _16 = 16,
    _64 = 64,
}

export enum InactiveHCPOrderExceptionHandlerDtoAction {
    _0 = 0,
    _1 = 1,
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const OM_INTEGRATION_API_BASE_URL = new InjectionToken<string>('OM_INTEGRATION_API_BASE_URL');

export class ServiceBaseConfig {
  public key: string;
}

export class ServiceBase {
  private readonly apiKey: string;
  private readonly apimHeaderName: string = 'Ocp-Apim-Subscription-Key';
  private readonly tenantIdHeaderName: string = 'TenantId';
  private readonly tenantIdLocalStorageKey: string = 'samplicity-dtp-current-client';
  private readonly idTokenKey: string = 'samplicity-id-token';

  constructor(config: ServiceBaseConfig) {
    this.apiKey = config.key;
  }

  protected transformOptions(options: any) {
    let headers: HttpHeaders = options.headers;

    if (this.apiKey) {
      headers = headers.append(this.apimHeaderName, this.apiKey);
    }

    const tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
    if (tenantId) {
      headers = headers.append(this.tenantIdHeaderName, tenantId);
    }

    const token = localStorage.getItem(this.idTokenKey);
    if (token) {
      headers = headers.append('Authorization', 'Bearer ' + token);
    }

    options.headers = headers;

    return Promise.resolve(options);
  }
}

@Injectable()
export class OrderManagementIntegration extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(ServiceBaseConfig) configuration: ServiceBaseConfig, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(OM_INTEGRATION_API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param clientDaxId (optional) 
     * @return Success
     */
    getClientProjects(clientDaxId: string | null | undefined): Observable<WmsProjectDto[]> {
        let url_ = this.baseUrl + "/api/services/app/WmsService/GetClientProjects?";
        if (clientDaxId !== undefined)
            url_ += "clientDaxId=" + encodeURIComponent("" + clientDaxId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetClientProjects(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClientProjects(<any>response_);
                } catch (e) {
                    return <Observable<WmsProjectDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<WmsProjectDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetClientProjects(response: HttpResponseBase): Observable<WmsProjectDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WmsProjectDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<WmsProjectDto[]>(<any>null);
    }

    /**
     * @param productCode (optional) 
     * @param productName (optional) 
     * @param includeKnipperProducts (optional) 
     * @param companyCodes (optional) 
     * @param productTypes (optional) 
     * @return Success
     */
    getWmsProducts(productCode: string | null | undefined, productName: string | null | undefined, includeKnipperProducts: boolean | null | undefined, companyCodes: string[] | null | undefined, productTypes: string[] | null | undefined): Observable<WmsProductDto[]> {
        let url_ = this.baseUrl + "/api/services/app/WmsService/GetWmsProducts?";
        if (productCode !== undefined)
            url_ += "ProductCode=" + encodeURIComponent("" + productCode) + "&"; 
        if (productName !== undefined)
            url_ += "ProductName=" + encodeURIComponent("" + productName) + "&"; 
        if (includeKnipperProducts !== undefined)
            url_ += "IncludeKnipperProducts=" + encodeURIComponent("" + includeKnipperProducts) + "&"; 
        if (companyCodes !== undefined)
            companyCodes && companyCodes.forEach(item => { url_ += "CompanyCodes=" + encodeURIComponent("" + item) + "&"; });
        if (productTypes !== undefined)
            productTypes && productTypes.forEach(item => { url_ += "ProductTypes=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetWmsProducts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWmsProducts(<any>response_);
                } catch (e) {
                    return <Observable<WmsProductDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<WmsProductDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetWmsProducts(response: HttpResponseBase): Observable<WmsProductDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WmsProductDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<WmsProductDto[]>(<any>null);
    }
}

export class WmsProjectDto implements IWmsProjectDto {
    id: string | undefined;
    name: string | undefined;
    projectStatus: string | undefined;
    jobs: WmsJobDto[] | undefined;

    constructor(data?: IWmsProjectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.projectStatus = data["projectStatus"];
            if (Array.isArray(data["jobs"])) {
                this.jobs = [] as any;
                for (let item of data["jobs"])
                    this.jobs.push(WmsJobDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WmsProjectDto {
        data = typeof data === 'object' ? data : {};
        let result = new WmsProjectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["projectStatus"] = this.projectStatus;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item.toJSON());
        }
        return data; 
    }

    clone(): WmsProjectDto {
        const json = this.toJSON();
        let result = new WmsProjectDto();
        result.init(json);
        return result;
    }
}

export interface IWmsProjectDto {
    id: string | undefined;
    name: string | undefined;
    projectStatus: string | undefined;
    jobs: WmsJobDto[] | undefined;
}

export class WmsJobDto implements IWmsJobDto {
    id: string | undefined;
    name: string | undefined;

    constructor(data?: IWmsJobDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): WmsJobDto {
        data = typeof data === 'object' ? data : {};
        let result = new WmsJobDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }

    clone(): WmsJobDto {
        const json = this.toJSON();
        let result = new WmsJobDto();
        result.init(json);
        return result;
    }
}

export interface IWmsJobDto {
    id: string | undefined;
    name: string | undefined;
}

export class WmsProductDto implements IWmsProductDto {
    wmsProductId: string | undefined;
    wmsProductType: string | undefined;
    wmsProductName: string | undefined;
    isKnipperProduct: boolean | undefined;

    constructor(data?: IWmsProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.wmsProductId = data["wmsProductId"];
            this.wmsProductType = data["wmsProductType"];
            this.wmsProductName = data["wmsProductName"];
            this.isKnipperProduct = data["isKnipperProduct"];
        }
    }

    static fromJS(data: any): WmsProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new WmsProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wmsProductId"] = this.wmsProductId;
        data["wmsProductType"] = this.wmsProductType;
        data["wmsProductName"] = this.wmsProductName;
        data["isKnipperProduct"] = this.isKnipperProduct;
        return data; 
    }

    clone(): WmsProductDto {
        const json = this.toJSON();
        let result = new WmsProductDto();
        result.init(json);
        return result;
    }
}

export interface IWmsProductDto {
    wmsProductId: string | undefined;
    wmsProductType: string | undefined;
    wmsProductName: string | undefined;
    isKnipperProduct: boolean | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.5.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const CLASSIFICATION_API_BASE_URL = new InjectionToken<string>('CLASSIFICATION_API_BASE_URL');

export class ServiceBaseConfig {
  public key: string;
}

export class ServiceBase {
  private readonly apiKey: string;
  private readonly apimHeaderName: string = 'Ocp-Apim-Subscription-Key';
  private readonly tenantIdHeaderName: string = 'TenantId';
  private readonly tenantIdLocalStorageKey: string = 'samplicity-dtp-current-client';
  private readonly idTokenKey: string = 'samplicity-id-token';

  constructor(config: ServiceBaseConfig) {
    this.apiKey = config.key;
  }

  protected transformOptions(options: any) {
    let headers: HttpHeaders = options.headers;

    if (this.apiKey) {
      headers = headers.append(this.apimHeaderName, this.apiKey);
    }

    const tenantId = sessionStorage.getItem(this.tenantIdLocalStorageKey);
    if (tenantId) {
      headers = headers.append(this.tenantIdHeaderName, tenantId);
    }

    const token = localStorage.getItem(this.idTokenKey);
    if (token) {
      headers = headers.append('Authorization', 'Bearer ' + token);
    }

    options.headers = headers;

    return Promise.resolve(options);
  }
}

@Injectable()
export class Classification extends ServiceBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(ServiceBaseConfig) configuration: ServiceBaseConfig, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(CLASSIFICATION_API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getClassificationValues(): Observable<AjaxResponseOfIListOfClassificationValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Classification/GetClassificationValues";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetClassificationValues(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClassificationValues(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfClassificationValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfClassificationValueDto>><any>Observable.throw(response_);
        });
    }

    protected processGetClassificationValues(response: HttpResponseBase): Observable<AjaxResponseOfIListOfClassificationValueDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfClassificationValueDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfClassificationValueDto>(<any>null);
    }

    /**
     * @param typeCode (optional) 
     * @return Success
     */
    getClassificationValuesByTypeCode(typeCode: string | null | undefined): Observable<AjaxResponseOfIListOfClassificationValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Classification/GetClassificationValuesByTypeCode?";
        if (typeCode !== undefined)
            url_ += "typeCode=" + encodeURIComponent("" + typeCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetClassificationValuesByTypeCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClassificationValuesByTypeCode(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfClassificationValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfClassificationValueDto>><any>Observable.throw(response_);
        });
    }

    protected processGetClassificationValuesByTypeCode(response: HttpResponseBase): Observable<AjaxResponseOfIListOfClassificationValueDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfClassificationValueDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfClassificationValueDto>(<any>null);
    }

    /**
     * @param typeId (optional) 
     * @return Success
     */
    getClassificationValuesByType(typeId: string | null | undefined): Observable<AjaxResponseOfIListOfClassificationValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Classification/GetClassificationValuesByType?";
        if (typeId !== undefined)
            url_ += "typeId=" + encodeURIComponent("" + typeId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetClassificationValuesByType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClassificationValuesByType(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfClassificationValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfClassificationValueDto>><any>Observable.throw(response_);
        });
    }

    protected processGetClassificationValuesByType(response: HttpResponseBase): Observable<AjaxResponseOfIListOfClassificationValueDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfClassificationValueDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfClassificationValueDto>(<any>null);
    }

    /**
     * @param valueCode (optional) 
     * @param typeId (optional) 
     * @return Success
     */
    getClassificationValueByCodeTypeId(valueCode: string | null | undefined, typeId: string | null | undefined): Observable<AjaxResponseOfClassificationValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Classification/GetClassificationValueByCodeTypeId?";
        if (valueCode !== undefined)
            url_ += "valueCode=" + encodeURIComponent("" + valueCode) + "&"; 
        if (typeId !== undefined)
            url_ += "typeId=" + encodeURIComponent("" + typeId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetClassificationValueByCodeTypeId(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClassificationValueByCodeTypeId(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfClassificationValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfClassificationValueDto>><any>Observable.throw(response_);
        });
    }

    protected processGetClassificationValueByCodeTypeId(response: HttpResponseBase): Observable<AjaxResponseOfClassificationValueDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfClassificationValueDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfClassificationValueDto>(<any>null);
    }

    /**
     * @param valueCode (optional) 
     * @param typeCode (optional) 
     * @return Success
     */
    getClassificationValueByCodeTypeCode(valueCode: string | null | undefined, typeCode: string | null | undefined): Observable<AjaxResponseOfClassificationValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Classification/GetClassificationValueByCodeTypeCode?";
        if (valueCode !== undefined)
            url_ += "valueCode=" + encodeURIComponent("" + valueCode) + "&"; 
        if (typeCode !== undefined)
            url_ += "typeCode=" + encodeURIComponent("" + typeCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetClassificationValueByCodeTypeCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClassificationValueByCodeTypeCode(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfClassificationValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfClassificationValueDto>><any>Observable.throw(response_);
        });
    }

    protected processGetClassificationValueByCodeTypeCode(response: HttpResponseBase): Observable<AjaxResponseOfClassificationValueDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfClassificationValueDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfClassificationValueDto>(<any>null);
    }

    /**
     * @return Success
     */
    getClassificationTypes(): Observable<AjaxResponseOfIListOfClassificationTypeDto> {
        let url_ = this.baseUrl + "/api/services/app/Classification/GetClassificationTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetClassificationTypes(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClassificationTypes(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfIListOfClassificationTypeDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfIListOfClassificationTypeDto>><any>Observable.throw(response_);
        });
    }

    protected processGetClassificationTypes(response: HttpResponseBase): Observable<AjaxResponseOfIListOfClassificationTypeDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfIListOfClassificationTypeDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfIListOfClassificationTypeDto>(<any>null);
    }

    /**
     * @param valueId (optional) 
     * @return Success
     */
    getClassificationValueById(valueId: string | null | undefined): Observable<AjaxResponseOfClassificationValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Classification/GetClassificationValueById?";
        if (valueId !== undefined)
            url_ += "valueId=" + encodeURIComponent("" + valueId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetClassificationValueById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClassificationValueById(<any>response_);
                } catch (e) {
                    return <Observable<AjaxResponseOfClassificationValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AjaxResponseOfClassificationValueDto>><any>Observable.throw(response_);
        });
    }

    protected processGetClassificationValueById(response: HttpResponseBase): Observable<AjaxResponseOfClassificationValueDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AjaxResponseOfClassificationValueDto.fromJS(resultData200);
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AjaxResponseOfClassificationValueDto>(<any>null);
    }

    /**
     * @return Success
     */
    getNormalizedClassificationData(): Observable<NormalizedReferenceDataDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Classification/GetNormalizedClassificationData";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.processGetNormalizedClassificationData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNormalizedClassificationData(<any>response_);
                } catch (e) {
                    return <Observable<NormalizedReferenceDataDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<NormalizedReferenceDataDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetNormalizedClassificationData(response: HttpResponseBase): Observable<NormalizedReferenceDataDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(NormalizedReferenceDataDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<NormalizedReferenceDataDto[]>(<any>null);
    }
}

export class AjaxResponseOfIListOfClassificationValueDto implements IAjaxResponseOfIListOfClassificationValueDto {
    result: ClassificationValueDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfClassificationValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(ClassificationValueDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfClassificationValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfClassificationValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfClassificationValueDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfClassificationValueDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfClassificationValueDto {
    result: ClassificationValueDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class ClassificationValueDto implements IClassificationValueDto {
    classificationValueId: string | undefined;
    classificationValueCode: string | undefined;
    classificationValueName: string | undefined;
    classificationType: ClassificationTypeDto | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IClassificationValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.classificationValueId = _data["classificationValueId"];
            this.classificationValueCode = _data["classificationValueCode"];
            this.classificationValueName = _data["classificationValueName"];
            this.classificationType = _data["classificationType"] ? ClassificationTypeDto.fromJS(_data["classificationType"]) : <any>undefined;
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClassificationValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClassificationValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["classificationValueId"] = this.classificationValueId;
        data["classificationValueCode"] = this.classificationValueCode;
        data["classificationValueName"] = this.classificationValueName;
        data["classificationType"] = this.classificationType ? this.classificationType.toJSON() : <any>undefined;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ClassificationValueDto {
        const json = this.toJSON();
        let result = new ClassificationValueDto();
        result.init(json);
        return result;
    }
}

export interface IClassificationValueDto {
    classificationValueId: string | undefined;
    classificationValueCode: string | undefined;
    classificationValueName: string | undefined;
    classificationType: ClassificationTypeDto | undefined;
    names: LocalizedValue[] | undefined;
}

export class ErrorInfo implements IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;

    constructor(data?: IErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            this.details = _data["details"];
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors.push(ValidationErrorInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["details"] = this.details;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ErrorInfo {
        const json = this.toJSON();
        let result = new ErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IErrorInfo {
    code: number | undefined;
    message: string | undefined;
    details: string | undefined;
    validationErrors: ValidationErrorInfo[] | undefined;
}

export class ClassificationTypeDto implements IClassificationTypeDto {
    classificationTypeId: string | undefined;
    classificationTypeCode: string | undefined;
    classificationTypeName: string | undefined;
    names: LocalizedValue[] | undefined;

    constructor(data?: IClassificationTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.classificationTypeId = _data["classificationTypeId"];
            this.classificationTypeCode = _data["classificationTypeCode"];
            this.classificationTypeName = _data["classificationTypeName"];
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names.push(LocalizedValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClassificationTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClassificationTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["classificationTypeId"] = this.classificationTypeId;
        data["classificationTypeCode"] = this.classificationTypeCode;
        data["classificationTypeName"] = this.classificationTypeName;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ClassificationTypeDto {
        const json = this.toJSON();
        let result = new ClassificationTypeDto();
        result.init(json);
        return result;
    }
}

export interface IClassificationTypeDto {
    classificationTypeId: string | undefined;
    classificationTypeCode: string | undefined;
    classificationTypeName: string | undefined;
    names: LocalizedValue[] | undefined;
}

export class LocalizedValue implements ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;

    constructor(data?: ILocalizedValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.language = _data["language"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LocalizedValue {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language;
        data["value"] = this.value;
        return data; 
    }

    clone(): LocalizedValue {
        const json = this.toJSON();
        let result = new LocalizedValue();
        result.init(json);
        return result;
    }
}

export interface ILocalizedValue {
    language: LocalizedValueLanguage | undefined;
    value: string | undefined;
}

export class ValidationErrorInfo implements IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;

    constructor(data?: IValidationErrorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members.push(item);
            }
        }
    }

    static fromJS(data: any): ValidationErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item);
        }
        return data; 
    }

    clone(): ValidationErrorInfo {
        const json = this.toJSON();
        let result = new ValidationErrorInfo();
        result.init(json);
        return result;
    }
}

export interface IValidationErrorInfo {
    message: string | undefined;
    members: string[] | undefined;
}

export class AjaxResponseOfClassificationValueDto implements IAjaxResponseOfClassificationValueDto {
    result: ClassificationValueDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfClassificationValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ClassificationValueDto.fromJS(_data["result"]) : <any>undefined;
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfClassificationValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfClassificationValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfClassificationValueDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfClassificationValueDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfClassificationValueDto {
    result: ClassificationValueDto | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class AjaxResponseOfIListOfClassificationTypeDto implements IAjaxResponseOfIListOfClassificationTypeDto {
    result: ClassificationTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    readonly __abp: boolean | undefined;

    constructor(data?: IAjaxResponseOfIListOfClassificationTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result.push(ClassificationTypeDto.fromJS(item));
            }
            this.targetUrl = _data["targetUrl"];
            this.success = _data["success"];
            this.error = _data["error"] ? ErrorInfo.fromJS(_data["error"]) : <any>undefined;
            this.unAuthorizedRequest = _data["unAuthorizedRequest"];
            (<any>this).__abp = _data["__abp"];
        }
    }

    static fromJS(data: any): AjaxResponseOfIListOfClassificationTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AjaxResponseOfIListOfClassificationTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["targetUrl"] = this.targetUrl;
        data["success"] = this.success;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["unAuthorizedRequest"] = this.unAuthorizedRequest;
        data["__abp"] = this.__abp;
        return data; 
    }

    clone(): AjaxResponseOfIListOfClassificationTypeDto {
        const json = this.toJSON();
        let result = new AjaxResponseOfIListOfClassificationTypeDto();
        result.init(json);
        return result;
    }
}

export interface IAjaxResponseOfIListOfClassificationTypeDto {
    result: ClassificationTypeDto[] | undefined;
    targetUrl: string | undefined;
    success: boolean | undefined;
    error: ErrorInfo | undefined;
    unAuthorizedRequest: boolean | undefined;
    __abp: boolean | undefined;
}

export class NormalizedReferenceDataDto implements INormalizedReferenceDataDto {
    createdDateUtc: Date | undefined;
    lastModifiedUtc: Date | undefined;
    originatingSchema: string | undefined;
    originatingTable: string | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;

    constructor(data?: INormalizedReferenceDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            this.lastModifiedUtc = _data["lastModifiedUtc"] ? new Date(_data["lastModifiedUtc"].toString()) : <any>undefined;
            this.originatingSchema = _data["originatingSchema"];
            this.originatingTable = _data["originatingTable"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): NormalizedReferenceDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new NormalizedReferenceDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        data["lastModifiedUtc"] = this.lastModifiedUtc ? this.lastModifiedUtc.toISOString() : <any>undefined;
        data["originatingSchema"] = this.originatingSchema;
        data["originatingTable"] = this.originatingTable;
        data["name"] = this.name;
        data["code"] = this.code;
        data["id"] = this.id;
        return data; 
    }

    clone(): NormalizedReferenceDataDto {
        const json = this.toJSON();
        let result = new NormalizedReferenceDataDto();
        result.init(json);
        return result;
    }
}

export interface INormalizedReferenceDataDto {
    createdDateUtc: Date | undefined;
    lastModifiedUtc: Date | undefined;
    originatingSchema: string | undefined;
    originatingTable: string | undefined;
    name: string | undefined;
    code: string | undefined;
    id: string | undefined;
}

export enum LocalizedValueLanguage {
    Undefined = <any>"Undefined",
    En = <any>"en",
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}